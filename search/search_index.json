{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Overview This repository contains examples and documentation for using open network management tools and protocols with Arista EOS.","title":"Home"},{"location":"#overview","text":"This repository contains examples and documentation for using open network management tools and protocols with Arista EOS.","title":"Overview"},{"location":"configuration/","text":"Overview CLI OpenConfig (configuration) Platform compatibility GNMI OCTA How to enable Octa API models Certificate based authentication for gNMI Test example NETCONF RESTCONF A note on changing ports gRPC RPC role authorizations Enable AFT mapping Troubleshooting Limitations Supported OpenConfig paths References / Resources Overview There are a number of options for working with open management protocols with Arista EOS. Here are the methods used to configre them on EOS as well as troubleshooting tips. OpenConfig Platform compatibility All EOS flavors support OpenConfig (phyiscal, virtual, containerized, cloud). GNMI To start the gNMI server, which listens by default on TCP/6030 configured the gRPC transport under management api gnmi in the global config mode: Default VRF management api gnmi transport grpc openmgmt Non-default VRF management api gnmi transport grpc openmgmt vrf management Changing the port: management api gnmi transport grpc openmgmt port 5900 Apply ACL management api gnmi transport grpc openmgmt ip access-group ACCESS_GROUP Note The ACL should be a standard ACL allowing hosts or subnets. Authenticate the connection with TLS management api gnmi transport grpc openmgmt ssl profile PROFILE Enable authorization of incoming requests management api gnmi transport grpc openmgmt authorization requests Status check #show management api gnmi Octa: No Enabled: Yes Server: running on port 6030, in default VRF SSL Profile: none QoS DSCP: none OCTA The OpenConfing agent (gNMI API) can leverage the EOS state streaming agent's (TerminAttr) libraries, thus exposing EOS native paths. If Octa (OpenConfig+TerminAttr) is enabled then OpenConfig, in addition to accepting OpenConfig paths in gNMI get/subscribe requests, will also support EOS native paths (e.g. Sysdb/Smash paths). This feature was introduced in 4.22.1F . gNMI requests received by Octa are interpreted as either OpenConfig or TerminAttr requests, as follows. gNMI requests containing an origin of eos_native are processed as TerminAttr requests. Requests lacking an origin of eos_native are treated as OpenConfig requests. A gNMI client that supports specification of an origin as part of the associated RPC is a requirement. Note Support for sending GET/SUBSCRIBE requests to both an openconfig and an eos-native path in the same call is not yet supported. How to enable Octa Octa can be enable by adding provider eos-native under management api gnmi SW(config-mgmt-api-gnmi)#provider eos-native Status check #show management api gnmi Octa: enabled Enabled: Yes Server: running on port 6030, in default VRF SSL Profile: none QoS DSCP: none API models Starting in EOS 4.24.0F it is possible to configure the Smash paths that Octa has access to. Under the management api models mode, the provider smash submode allows for enabling or disabling a Smash path with the [no] path <Smash path> [disbaled] command. SW(config)#management api models SW(config-mgmt-api-models)#provider smash SW(config-provider-smash)#path forwarding/status SW(config-provider-smash)#path routing/status disabled SW(config-provider-smash)#path routing/isis/lsdb SW(config-provider-smash)#exit Note that every time a new path is added the Octa agent has to be restarted. EOS CLI: (config)#management api gnmi (config-mgmt-api-gnmi)#transport grpc <NAME> (config-gnmi-transport-def)#shut (config-gnmi-transport-def)#no shut Bash: $ sudo killall Octa show management api models will list the Smash paths enabled/disabled e.g.: #show management api models provider smash path /Smash/bridging path /Smash/forwarding/status path /Smash/routing/isis/lsdb path /Smash/routing path /Smash/routing/status disabled provider sysdb Certificate based authentication for gNMI The following example shows how to create a Root CA cert and key, the server cert and key and the client cert and key. On the switch side: 1. Generate the private key for the CA: openssl genrsa -out rootCA.key 2048 2. Generate the CA certificate: openssl req -x509 -new -nodes -key rootCA.key -out rootCA.pem 3. Generate the server key: openssl genrsa -out gnmi_server.key 2048 4. Generate the server's certificate signing request: openssl req -new -key gnmi_server.key -out gnmi_server.csr 5. Generate the server's cert: openssl x509 -req -in gnmi_server.csr -CA rootCA.pem -CAkey rootCA.key \\ -CAcreateserial -out gnmi_server.crt` 6. copy rootCA.key and rootCA.pem to the gNMI collector 7. Exit from bash and copy rootCA.key and gnmi_server.key to sslkey directory. e.g.: copy flash:gnmi_server.key sslkey: ) 8. copy rootCA.pem and gnmi_server.crt to certificate directory, e.g.: copy flash:scripts/rootCA.pem certificate: 9. Create the SSL profile management security ssl profile gnmi certificate gnmi_server.crt key gnmi_server.key trust certificate rootCA.pem 10. Apply the profile management api gnmi transport grpc def ssl profile gnmi provider eos-native On the remote machine which runs the gNMI queries: 1. Generate the client key: openssl genrsa -out gnmi_client.key 2048 2. Generate the certificate signing request: openssl req -new -key gnmi_client.key -out gnmi_client.csr 3. Sign the cert and generate the .crt file: openssl x509 -req -in gnmi_client.csr -CA rootCA.pem -CAkey rootCA.key \\ -CAcreateserial -out gnmi_client.crt 4. Make sure that rootCA.key and rootCA.pem are in same directory as gnmi_client.key and gnmi_client.crt Test example gnmi -tls -addr 172.28.161.138:6030 -keyfile gnmi_client.key \\ -certfile gnmi_client.crt get '/interfaces/interface[name=*]/state/counters' /interfaces/interface[name=Management1]/state/counters: { \"openconfig-interfaces:in-broadcast-pkts\": \"14498549\", \"openconfig-interfaces:in-discards\": \"0\", \"openconfig-interfaces:in-errors\": \"0\", \"openconfig-interfaces:in-fcs-errors\": \"0\", \"openconfig-interfaces:in-multicast-pkts\": \"20571\", \"openconfig-interfaces:in-octets\": \"1042742343\", \"openconfig-interfaces:in-unicast-pkts\": \"61135\", \"openconfig-interfaces:out-broadcast-pkts\": \"20\", \"openconfig-interfaces:out-discards\": \"0\", \"openconfig-interfaces:out-errors\": \"0\", \"openconfig-interfaces:out-multicast-pkts\": \"20232\", \"openconfig-interfaces:out-octets\": \"12004699\", \"openconfig-interfaces:out-unicast-pkts\": \"49070\" } NETCONF Currently supported NETCONF operations: get, get-config, get-schema, edit-config, lock, unlock, close-session, kill-session. To configure NETCONF in default VRF we can enable the ssh transport under management api netconf : Default VRF management api netconf transport ssh test Non-default VRF management api netconf transport ssh test vrf management Changing the port: management api netconf transport ssh test port 830 Apply ACL management api netconf transport ssh test ip access-group ACCESS_GROUP Note The ACL should be a standard ACL allowing hosts or subnets. Status check: #show management api netconf Enabled: Yes Server: running on port 830, in management VRF RESTCONF TLS authentication is required for RESTCONF to operate. This Cli command generates a self-signed cert: security pki certificate generate self-signed restconf.crt key restconf.key generate rsa 2048 parameters common-name restconf Create ssl profile: management security ssl profile restconf certificate restconf.crt key restconf.key Configure RESTCONF: Default VRF: management api restconf transport https test ssl profile restconf Non-default VRF management api restconf transport https test ssl profile restconf vrf management Changing the port: management api restconf transport https test port 5900 Apply ACL management api restconf transport https test ip access-group ACCESS_GROUP Note The ACL should be a standard ACL allowing hosts or subnets. Status check #show management api restconf Enabled: Yes Server: running on port 6020, in management VRF SSL Profile: restconf QoS DSCP: none A note on changing ports When changing the default ports one has to make sure they are also allowed in the control-plane ACL. The default control-plane ACL cannot be modified, so a new one has to be created and applied under system control-plane (EOS 4.23+ ) or control-plane (pre-EOS 4.23 ). The fastest way to do this is to clone the existing control-plane and add new permit rules. e.g.: 1. Reading the default CP ACL can be done with show ip access-lists default-control-plane-acl #show ip access-lists default-control-plane-acl IP Access List default-control-plane-acl [readonly] counters per-entry 10 permit icmp any any [match 7172 packets, 1 day, 20:46:09 ago] 20 permit ip any any tracked [match 98544013 packets, 0:00:36 ago] 30 permit udp any any eq bfd ttl eq 255 40 permit udp any any eq bfd-echo ttl eq 254 50 permit udp any any eq multihop-bfd 60 permit udp any any eq micro-bfd 70 permit udp any any eq sbfd 80 permit udp any eq sbfd any eq sbfd-initiator 90 permit ospf any any 100 permit tcp any any eq ssh telnet www snmp bgp https msdp ldp netconf-ssh gnmi [match 873 packets, 1 day, 20:43:39 ago] 110 permit udp any any eq bootps bootpc snmp rip ntp ldp [match 970 packets, 1:43:38 ago] 120 permit tcp any any eq mlag ttl eq 255 130 permit udp any any eq mlag ttl eq 255 140 permit vrrp any any 150 permit ahp any any 160 permit pim any any 170 permit igmp any any 180 permit tcp any any range 5900 5910 190 permit tcp any any range 50000 50100 [match 1480505 packets, 1 day, 20:43:16 ago] 200 permit udp any any range 51000 51100 210 permit tcp any any eq 3333 220 permit tcp any any eq nat ttl eq 255 230 permit tcp any eq bgp any 240 permit rsvp any any 250 permit tcp any any eq 6040 260 permit tcp any any eq 5541 ttl eq 255 270 permit tcp any any eq 5542 ttl eq 255 2. There are multiple ways to quickly edit and remove the unnecessary match outputs, in this example we'll use sed on EOS. Save the file to /mnt/flash : show ip access-lists default-control-plane-acl | redirect flash:cpacl.txt 3. Drop down to bash: #bash 4. Go to /mnt/flash and remove the match outputs cd /mnt/flash sudo sed -i \"s/\\[.*//g\" cpacl.txt 5. Reading the file now should be clean without all the match outputs like below: cat cpacl.txt IP Access List default-control-plane-acl counters per-entry 10 permit icmp any any 20 permit ip any any tracked 30 permit udp any any eq bfd ttl eq 255 40 permit udp any any eq bfd-echo ttl eq 254 50 permit udp any any eq multihop-bfd 60 permit udp any any eq micro-bfd 70 permit udp any any eq sbfd 80 permit udp any eq sbfd any eq sbfd-initiator 90 permit ospf any any 100 permit tcp any any eq ssh telnet www snmp bgp https msdp ldp netconf-ssh gnmi 110 permit udp any any eq bootps bootpc snmp rip ntp ldp 120 permit tcp any any eq mlag ttl eq 255 130 permit udp any any eq mlag ttl eq 255 140 permit vrrp any any 150 permit ahp any any 160 permit pim any any 170 permit igmp any any 180 permit tcp any any range 5900 5910 190 permit tcp any any range 50000 50100 200 permit udp any any range 51000 51100 210 permit tcp any any eq 3333 220 permit tcp any any eq nat ttl eq 255 230 permit tcp any eq bgp any 240 permit rsvp any any 250 permit tcp any any eq 6040 260 permit tcp any any eq 5541 ttl eq 255 270 permit tcp any any eq 5542 ttl eq 255 6. Now we can just copy that ACLs content into a new ACL, add our new rules and apply it on the control-plane $ exit logout (config)# ip access-list custom-cp (config)# <paste the content of the default CP from the file created> (config)# 280 permit tcp any any eq 5900 7. Apply the new ACL Default VRF system control-plane ip access-group custom-cp in Non-default VRF system control-plane ip access-group custom-cp vrf management in RPC role authorizations Starting in EOS 4.24.1F it is possible to perform authorization of each RPC (i.e. GET, SET, SUBSCRIBE), if authorization requests is supplied as described above. During authorization, the OpenConfig agent will communicate with the AAA agent, allowing authorization policies or roles to permit or deny the new tokens OpenConfig.Get and OpenConfig.Set. For example, a role may be defined such as: role oc-read 10 permit command OpenConfig.Get A user which is assigned to this role would be allowed to issue a gNMI get or subscribe request, but not a set request. Note that this is only available for gNMI. Enable AFT mapping By default, mapping of the FIB (forwarding information base) to the OpenConfig AFT (abstract forwarding table) model is disabled, as the volume of data can be large. Starting in EOS 4.25.1F it is possible to enable these mappings, for IPV4, IPV6, or both, as described below: management api models ipv4-unicast ipv6-unicast Troubleshooting The OpenConfig agent handles all transports described above: gNMI, RESTCONF, and NETCONF. The agent log file is present at /var/log/agents/OpenConfig-{PID} . Lines that begin with E are errors. Debug logging can be enabled with a regular trace command. Here are a couple of examples: (config)#trace OpenConfig setting server/9 # For server (gNMI) traces (config)#trace OpenConfig setting */9 # For all traces with verbose setting similary if Octa is enabled: (config)#trace Octa setting server/9 # For server (gNMI) traces (config)#trace Octa setting */9 # For all traces with verbose setting Limitations In EOS versions older than 4.24.0F , not all Smash paths were accessible via Octa. Starting in EOS 4.24.0F configuring the Smash paths that Octa has access to will also affect OpenConfig. Enabling a Smash path for Octa can result in extra YANG paths being populated in OpenConfig. Disabling a Smash path can result in having some YANG paths missing in OpenConfig. The %<zone-id> optional suffix in YANG ietf:ipv4-address , and ietf:ipv6-address types are not supported. An OpenConfig client update/merge/replace request can erase config that is not modified by the incoming request. This happens if a config that is part of a certain mountpoint but not supported by OpenConfig is configured via CLI prior to the OpenConfig client update/merge/replace request is processed. Below listed commands are the only QoS config commands that are supported class-map type qos match-any <cm name> match vlan <vlan id> policy-map type qos <pmap name> class <cm name> police cir <cir> bc <burst> kbytes class class-default interface Ethernet<xx> | port-channel<yy> service-policy type qos input <pmap name> Supported OpenConfig paths Please refer to the TOIs for the EOS releases to see the new list of paths supported per release. For convenience, supported paths may be found at https://eos.arista.com/path-report . References / Resources The OpenConfig working group: http://openconfig.net/ Repository of gNMI specifications: https://github.com/openconfig/reference/","title":"Device Configuration"},{"location":"configuration/#overview","text":"There are a number of options for working with open management protocols with Arista EOS. Here are the methods used to configre them on EOS as well as troubleshooting tips.","title":"Overview"},{"location":"configuration/#openconfig","text":"","title":"OpenConfig"},{"location":"configuration/#platform-compatibility","text":"All EOS flavors support OpenConfig (phyiscal, virtual, containerized, cloud).","title":"Platform compatibility"},{"location":"configuration/#gnmi","text":"To start the gNMI server, which listens by default on TCP/6030 configured the gRPC transport under management api gnmi in the global config mode: Default VRF management api gnmi transport grpc openmgmt Non-default VRF management api gnmi transport grpc openmgmt vrf management Changing the port: management api gnmi transport grpc openmgmt port 5900 Apply ACL management api gnmi transport grpc openmgmt ip access-group ACCESS_GROUP Note The ACL should be a standard ACL allowing hosts or subnets. Authenticate the connection with TLS management api gnmi transport grpc openmgmt ssl profile PROFILE Enable authorization of incoming requests management api gnmi transport grpc openmgmt authorization requests Status check #show management api gnmi Octa: No Enabled: Yes Server: running on port 6030, in default VRF SSL Profile: none QoS DSCP: none","title":"GNMI"},{"location":"configuration/#octa","text":"The OpenConfing agent (gNMI API) can leverage the EOS state streaming agent's (TerminAttr) libraries, thus exposing EOS native paths. If Octa (OpenConfig+TerminAttr) is enabled then OpenConfig, in addition to accepting OpenConfig paths in gNMI get/subscribe requests, will also support EOS native paths (e.g. Sysdb/Smash paths). This feature was introduced in 4.22.1F . gNMI requests received by Octa are interpreted as either OpenConfig or TerminAttr requests, as follows. gNMI requests containing an origin of eos_native are processed as TerminAttr requests. Requests lacking an origin of eos_native are treated as OpenConfig requests. A gNMI client that supports specification of an origin as part of the associated RPC is a requirement. Note Support for sending GET/SUBSCRIBE requests to both an openconfig and an eos-native path in the same call is not yet supported.","title":"OCTA"},{"location":"configuration/#how-to-enable-octa","text":"Octa can be enable by adding provider eos-native under management api gnmi SW(config-mgmt-api-gnmi)#provider eos-native Status check #show management api gnmi Octa: enabled Enabled: Yes Server: running on port 6030, in default VRF SSL Profile: none QoS DSCP: none","title":"How to enable Octa"},{"location":"configuration/#api-models","text":"Starting in EOS 4.24.0F it is possible to configure the Smash paths that Octa has access to. Under the management api models mode, the provider smash submode allows for enabling or disabling a Smash path with the [no] path <Smash path> [disbaled] command. SW(config)#management api models SW(config-mgmt-api-models)#provider smash SW(config-provider-smash)#path forwarding/status SW(config-provider-smash)#path routing/status disabled SW(config-provider-smash)#path routing/isis/lsdb SW(config-provider-smash)#exit Note that every time a new path is added the Octa agent has to be restarted. EOS CLI: (config)#management api gnmi (config-mgmt-api-gnmi)#transport grpc <NAME> (config-gnmi-transport-def)#shut (config-gnmi-transport-def)#no shut Bash: $ sudo killall Octa show management api models will list the Smash paths enabled/disabled e.g.: #show management api models provider smash path /Smash/bridging path /Smash/forwarding/status path /Smash/routing/isis/lsdb path /Smash/routing path /Smash/routing/status disabled provider sysdb","title":"API models"},{"location":"configuration/#certificate-based-authentication-for-gnmi","text":"The following example shows how to create a Root CA cert and key, the server cert and key and the client cert and key. On the switch side: 1. Generate the private key for the CA: openssl genrsa -out rootCA.key 2048 2. Generate the CA certificate: openssl req -x509 -new -nodes -key rootCA.key -out rootCA.pem 3. Generate the server key: openssl genrsa -out gnmi_server.key 2048 4. Generate the server's certificate signing request: openssl req -new -key gnmi_server.key -out gnmi_server.csr 5. Generate the server's cert: openssl x509 -req -in gnmi_server.csr -CA rootCA.pem -CAkey rootCA.key \\ -CAcreateserial -out gnmi_server.crt` 6. copy rootCA.key and rootCA.pem to the gNMI collector 7. Exit from bash and copy rootCA.key and gnmi_server.key to sslkey directory. e.g.: copy flash:gnmi_server.key sslkey: ) 8. copy rootCA.pem and gnmi_server.crt to certificate directory, e.g.: copy flash:scripts/rootCA.pem certificate: 9. Create the SSL profile management security ssl profile gnmi certificate gnmi_server.crt key gnmi_server.key trust certificate rootCA.pem 10. Apply the profile management api gnmi transport grpc def ssl profile gnmi provider eos-native On the remote machine which runs the gNMI queries: 1. Generate the client key: openssl genrsa -out gnmi_client.key 2048 2. Generate the certificate signing request: openssl req -new -key gnmi_client.key -out gnmi_client.csr 3. Sign the cert and generate the .crt file: openssl x509 -req -in gnmi_client.csr -CA rootCA.pem -CAkey rootCA.key \\ -CAcreateserial -out gnmi_client.crt 4. Make sure that rootCA.key and rootCA.pem are in same directory as gnmi_client.key and gnmi_client.crt","title":"Certificate based authentication for gNMI"},{"location":"configuration/#test-example","text":"gnmi -tls -addr 172.28.161.138:6030 -keyfile gnmi_client.key \\ -certfile gnmi_client.crt get '/interfaces/interface[name=*]/state/counters' /interfaces/interface[name=Management1]/state/counters: { \"openconfig-interfaces:in-broadcast-pkts\": \"14498549\", \"openconfig-interfaces:in-discards\": \"0\", \"openconfig-interfaces:in-errors\": \"0\", \"openconfig-interfaces:in-fcs-errors\": \"0\", \"openconfig-interfaces:in-multicast-pkts\": \"20571\", \"openconfig-interfaces:in-octets\": \"1042742343\", \"openconfig-interfaces:in-unicast-pkts\": \"61135\", \"openconfig-interfaces:out-broadcast-pkts\": \"20\", \"openconfig-interfaces:out-discards\": \"0\", \"openconfig-interfaces:out-errors\": \"0\", \"openconfig-interfaces:out-multicast-pkts\": \"20232\", \"openconfig-interfaces:out-octets\": \"12004699\", \"openconfig-interfaces:out-unicast-pkts\": \"49070\" }","title":"Test example"},{"location":"configuration/#netconf","text":"Currently supported NETCONF operations: get, get-config, get-schema, edit-config, lock, unlock, close-session, kill-session. To configure NETCONF in default VRF we can enable the ssh transport under management api netconf : Default VRF management api netconf transport ssh test Non-default VRF management api netconf transport ssh test vrf management Changing the port: management api netconf transport ssh test port 830 Apply ACL management api netconf transport ssh test ip access-group ACCESS_GROUP Note The ACL should be a standard ACL allowing hosts or subnets. Status check: #show management api netconf Enabled: Yes Server: running on port 830, in management VRF","title":"NETCONF"},{"location":"configuration/#restconf","text":"TLS authentication is required for RESTCONF to operate. This Cli command generates a self-signed cert: security pki certificate generate self-signed restconf.crt key restconf.key generate rsa 2048 parameters common-name restconf Create ssl profile: management security ssl profile restconf certificate restconf.crt key restconf.key Configure RESTCONF: Default VRF: management api restconf transport https test ssl profile restconf Non-default VRF management api restconf transport https test ssl profile restconf vrf management Changing the port: management api restconf transport https test port 5900 Apply ACL management api restconf transport https test ip access-group ACCESS_GROUP Note The ACL should be a standard ACL allowing hosts or subnets. Status check #show management api restconf Enabled: Yes Server: running on port 6020, in management VRF SSL Profile: restconf QoS DSCP: none","title":"RESTCONF"},{"location":"configuration/#a-note-on-changing-ports","text":"When changing the default ports one has to make sure they are also allowed in the control-plane ACL. The default control-plane ACL cannot be modified, so a new one has to be created and applied under system control-plane (EOS 4.23+ ) or control-plane (pre-EOS 4.23 ). The fastest way to do this is to clone the existing control-plane and add new permit rules. e.g.: 1. Reading the default CP ACL can be done with show ip access-lists default-control-plane-acl #show ip access-lists default-control-plane-acl IP Access List default-control-plane-acl [readonly] counters per-entry 10 permit icmp any any [match 7172 packets, 1 day, 20:46:09 ago] 20 permit ip any any tracked [match 98544013 packets, 0:00:36 ago] 30 permit udp any any eq bfd ttl eq 255 40 permit udp any any eq bfd-echo ttl eq 254 50 permit udp any any eq multihop-bfd 60 permit udp any any eq micro-bfd 70 permit udp any any eq sbfd 80 permit udp any eq sbfd any eq sbfd-initiator 90 permit ospf any any 100 permit tcp any any eq ssh telnet www snmp bgp https msdp ldp netconf-ssh gnmi [match 873 packets, 1 day, 20:43:39 ago] 110 permit udp any any eq bootps bootpc snmp rip ntp ldp [match 970 packets, 1:43:38 ago] 120 permit tcp any any eq mlag ttl eq 255 130 permit udp any any eq mlag ttl eq 255 140 permit vrrp any any 150 permit ahp any any 160 permit pim any any 170 permit igmp any any 180 permit tcp any any range 5900 5910 190 permit tcp any any range 50000 50100 [match 1480505 packets, 1 day, 20:43:16 ago] 200 permit udp any any range 51000 51100 210 permit tcp any any eq 3333 220 permit tcp any any eq nat ttl eq 255 230 permit tcp any eq bgp any 240 permit rsvp any any 250 permit tcp any any eq 6040 260 permit tcp any any eq 5541 ttl eq 255 270 permit tcp any any eq 5542 ttl eq 255 2. There are multiple ways to quickly edit and remove the unnecessary match outputs, in this example we'll use sed on EOS. Save the file to /mnt/flash : show ip access-lists default-control-plane-acl | redirect flash:cpacl.txt 3. Drop down to bash: #bash 4. Go to /mnt/flash and remove the match outputs cd /mnt/flash sudo sed -i \"s/\\[.*//g\" cpacl.txt 5. Reading the file now should be clean without all the match outputs like below: cat cpacl.txt IP Access List default-control-plane-acl counters per-entry 10 permit icmp any any 20 permit ip any any tracked 30 permit udp any any eq bfd ttl eq 255 40 permit udp any any eq bfd-echo ttl eq 254 50 permit udp any any eq multihop-bfd 60 permit udp any any eq micro-bfd 70 permit udp any any eq sbfd 80 permit udp any eq sbfd any eq sbfd-initiator 90 permit ospf any any 100 permit tcp any any eq ssh telnet www snmp bgp https msdp ldp netconf-ssh gnmi 110 permit udp any any eq bootps bootpc snmp rip ntp ldp 120 permit tcp any any eq mlag ttl eq 255 130 permit udp any any eq mlag ttl eq 255 140 permit vrrp any any 150 permit ahp any any 160 permit pim any any 170 permit igmp any any 180 permit tcp any any range 5900 5910 190 permit tcp any any range 50000 50100 200 permit udp any any range 51000 51100 210 permit tcp any any eq 3333 220 permit tcp any any eq nat ttl eq 255 230 permit tcp any eq bgp any 240 permit rsvp any any 250 permit tcp any any eq 6040 260 permit tcp any any eq 5541 ttl eq 255 270 permit tcp any any eq 5542 ttl eq 255 6. Now we can just copy that ACLs content into a new ACL, add our new rules and apply it on the control-plane $ exit logout (config)# ip access-list custom-cp (config)# <paste the content of the default CP from the file created> (config)# 280 permit tcp any any eq 5900 7. Apply the new ACL Default VRF system control-plane ip access-group custom-cp in Non-default VRF system control-plane ip access-group custom-cp vrf management in","title":"A note on changing ports"},{"location":"configuration/#rpc-role-authorizations","text":"Starting in EOS 4.24.1F it is possible to perform authorization of each RPC (i.e. GET, SET, SUBSCRIBE), if authorization requests is supplied as described above. During authorization, the OpenConfig agent will communicate with the AAA agent, allowing authorization policies or roles to permit or deny the new tokens OpenConfig.Get and OpenConfig.Set. For example, a role may be defined such as: role oc-read 10 permit command OpenConfig.Get A user which is assigned to this role would be allowed to issue a gNMI get or subscribe request, but not a set request. Note that this is only available for gNMI.","title":"RPC role authorizations"},{"location":"configuration/#enable-aft-mapping","text":"By default, mapping of the FIB (forwarding information base) to the OpenConfig AFT (abstract forwarding table) model is disabled, as the volume of data can be large. Starting in EOS 4.25.1F it is possible to enable these mappings, for IPV4, IPV6, or both, as described below: management api models ipv4-unicast ipv6-unicast","title":"Enable AFT mapping"},{"location":"configuration/#troubleshooting","text":"The OpenConfig agent handles all transports described above: gNMI, RESTCONF, and NETCONF. The agent log file is present at /var/log/agents/OpenConfig-{PID} . Lines that begin with E are errors. Debug logging can be enabled with a regular trace command. Here are a couple of examples: (config)#trace OpenConfig setting server/9 # For server (gNMI) traces (config)#trace OpenConfig setting */9 # For all traces with verbose setting similary if Octa is enabled: (config)#trace Octa setting server/9 # For server (gNMI) traces (config)#trace Octa setting */9 # For all traces with verbose setting","title":"Troubleshooting"},{"location":"configuration/#limitations","text":"In EOS versions older than 4.24.0F , not all Smash paths were accessible via Octa. Starting in EOS 4.24.0F configuring the Smash paths that Octa has access to will also affect OpenConfig. Enabling a Smash path for Octa can result in extra YANG paths being populated in OpenConfig. Disabling a Smash path can result in having some YANG paths missing in OpenConfig. The %<zone-id> optional suffix in YANG ietf:ipv4-address , and ietf:ipv6-address types are not supported. An OpenConfig client update/merge/replace request can erase config that is not modified by the incoming request. This happens if a config that is part of a certain mountpoint but not supported by OpenConfig is configured via CLI prior to the OpenConfig client update/merge/replace request is processed. Below listed commands are the only QoS config commands that are supported class-map type qos match-any <cm name> match vlan <vlan id> policy-map type qos <pmap name> class <cm name> police cir <cir> bc <burst> kbytes class class-default interface Ethernet<xx> | port-channel<yy> service-policy type qos input <pmap name>","title":"Limitations"},{"location":"configuration/#supported-openconfig-paths","text":"Please refer to the TOIs for the EOS releases to see the new list of paths supported per release. For convenience, supported paths may be found at https://eos.arista.com/path-report .","title":"Supported OpenConfig paths"},{"location":"configuration/#references-resources","text":"The OpenConfig working group: http://openconfig.net/ Repository of gNMI specifications: https://github.com/openconfig/reference/","title":"References / Resources"},{"location":"configuration/mtls/","text":"EOS mTLS Configuration Overview EOS supports the use of mutual TLS (mTLS) for gRPC, RESTCONF and eAPI services. This allows the use of certificates, signed by a recognized and trusted CA, for authentication to gNMI and other gRPC based services. By default only certificates signed with Arista's CA are trusted. In order to generate and sign certificates for mTLS authentication, an operator will need to install and configure a certifying authority (CA) that is used for signing certificates that are generated on network elements as well as the servers that will be interacting with the gRPC services. The necessary certificates for establishing the chain of trust will need to be imported into the switches and tools interacting with the switches. This document outlines the necessary steps to generate certificate signing requests (CSR) on arista devices, sign the certificates and import these into the switches. Process Overview Setup a private certificate authority (CA). This document uses easy-rsa Generate CSRs from the switch as well as for the host that will be initiating connections to the switch using mTLS as the authentication mechanism. Sign the CSRs using the CA tools. Copy the relevant elements to the switch (signed server certificate and CA certificate). Configure the switch to use the certificates and the associated CA certificate to perform mTLS authentication. Initiate connections from the clients to the switch to execute gNMI RPCs. Easy-RSA Setup The simple installation of Easy-RSA is well documented in the Easy RSA quick start guide . For a more durable installation you're encouraged to review the Easy-RSA documentation and customize the settings to your environment. Easy-RSA CA parameters easy RSA version: 3.0.8 As of this writing EOS only supports RSA certificates, this differs from the default configuration of Easy-RSA. The following variable in the vars file will need to be set in order to generate the appropriate certificate type. set_var EASYRSA_ALGO \"rsa\" Use the easyrsa build-ca command to create the necessary certificate signing infrastructure within easyrsa. This will generate a ca.crt certificate which can be imported into the PKI validation chain of the switches and other hosts in your PKI domain. This can also be used in a standalone manner with most gnmi clients. In our case, this CA certificate resides in: ${HOME}/easy-rsa/pki/ca.crt This will need to be imported into the network elements where you're using mTLS for authentication. Generate a Local Client Certificate This will be used by local clients (gnmi, gnoi, gribi, etc.) connecting to the switches in order to authenticate. Note the gnmi-client.cnf configuration file provided in the following openssl command is used to create the Subject Alternate Name IP address entry associated with the client certificate. This is optional and is not required for certificates. mkdir ~/gnmi-client-cert cd ~/gnmi-client-cert openssl req -out gnmi-client.csr -newkey rsa:2048 -nodes -keyout gnmi-client.key -config gnmi-client.cnf The above commands will generate a private key as well as the Certificate Signing Request (CSR) Sign the Local Client Certificate with Easy-RSA Note, that this is going to be a client certificate. As our gnmi client will be talking to the gnmi server on the switch. cd ~/easy-rsa ./easyrsa import-req ../gnmi-client-cert gnmi-client.csr gnmi-client ./easyrsa sign-req client gnmi-client The sign-req command generates the following output. Using SSL: openssl OpenSSL 1.1.1f 31 Mar 2020 ... snipped ... subject= countryName = us stateOrProvinceName = mn localityName = minneapolis organizationName = arista-lab commonName = sulrich@arista.com X509v3 Subject Alternative Name: IP:192.168.1.11 Type the word 'yes' to continue, or any other input to abort. Confirm request details: yes Using configuration from /home/sulrich/easy-rsa/pki/easy-rsa-3625384.5yQThV/tmp.kaJhk0 Check that the request matches the signature Signature ok The Subject's Distinguished Name is as follows countryName :PRINTABLE:'us' stateOrProvinceName :ASN.1 12:'mn' localityName :ASN.1 12:'minneapolis' organizationName :ASN.1 12:'arista-lab' commonName :ASN.1 12:'sulrich@arista.com' Certificate is to be certified until Oct 10 19:45:42 2023 GMT (825 days) Write out database with 1 new entries Data Base Updated Certificate created at: /home/sulrich/easy-rsa/pki/issued/gnmi-client.crt Switch Side Actions Generate a key pair on the switch the key will be named v1.key security pki key generate rsa 4096 v1.key Generate the CSR security pki certificate generate signing-request key v1.key Capture the CSR text into a file and copy this to the CA server. Sign the Switch CSR with Easy-RSA Note that in this case we're generating a server certificate. cd ~/easy-rsa ./easyrsa import-req ../v1.csr v1 ./easyrsa sign-req server v1 This will generate the signed certificate and place it into the easy-rsa local store. ${HOME}/easy-rsa/pki/issued/v1.crt Copy this to the switch and import it into the switch's certificate store. copy file:/mnt/flash/v1.crt certificate:v1.crt Copy the Private CA Certificate to the Switch You will need to copy the CA.crt (commonly in <easyrsa_root>/pki/ca.crt ) to the switch and add it to the list of certificates. In the following example the file has been copied to the switch as demo-ca.crt . copy flash:demo-ca.crt certificate: SSL Profile Configuration Configure the necessary ssl profile and include the demo-ca.crt in the list of trusted CAs. management security ssl profile test-arista certificate v1.crt key v1.key trust certificate demo-ca.crt ! gNMI Configuration The following configuration associates the gnmi service withthe associated ssl profile and enables it for use with mTLS for authentication. management api gnmi transport grpc default ssl profile test-arista provider eos-native ! At this point the switch is configured to accept connections from clients with valid, signed certificates. Useful Troubleshooting Commands show management api gnmi This command enables you to determine the operational state of the gnmi process as well as whether or not the ssl profile is considered valid. show management security ssl profile This command enables you to see the state of the ssl profiles and whether there are issues with the validation chain. Clocks and Certificate Lifetime Certificates should be created with a finite lifetime and rotated within that lifetime. However, if the clocks on the switch are grossly off this may impact certificate operation. Make sure that the clock on the switch is set correctly and synchronized to a reliable time source. Client Examples gnmi (Arista Client) gnmi -addr 192.168.1.21:6030 \\ -username admin -password arista \\ -cafile easy-rsa/pki/ca.crt \\ -certfile easy-rsa/pki/issued/gnmi-client.crt \\ -keyfile gnmi-client/gnmi-client.key capabilities gnmic gnmic -a 192.168.1.21:6030 -u admin -p arista \\ --tls-ca easy-rsa/pki/ca.crt \\ --tls-cert easy-rsa/pki/issued/gnmi-client.crt \\ --tls-key gnmi-client/gnmi-client.key capabilities Additional References EOS central: Working with Certificates","title":"Certificate Authentication"},{"location":"configuration/mtls/#eos-mtls-configuration","text":"","title":"EOS mTLS Configuration"},{"location":"configuration/mtls/#overview","text":"EOS supports the use of mutual TLS (mTLS) for gRPC, RESTCONF and eAPI services. This allows the use of certificates, signed by a recognized and trusted CA, for authentication to gNMI and other gRPC based services. By default only certificates signed with Arista's CA are trusted. In order to generate and sign certificates for mTLS authentication, an operator will need to install and configure a certifying authority (CA) that is used for signing certificates that are generated on network elements as well as the servers that will be interacting with the gRPC services. The necessary certificates for establishing the chain of trust will need to be imported into the switches and tools interacting with the switches. This document outlines the necessary steps to generate certificate signing requests (CSR) on arista devices, sign the certificates and import these into the switches.","title":"Overview"},{"location":"configuration/mtls/#process-overview","text":"Setup a private certificate authority (CA). This document uses easy-rsa Generate CSRs from the switch as well as for the host that will be initiating connections to the switch using mTLS as the authentication mechanism. Sign the CSRs using the CA tools. Copy the relevant elements to the switch (signed server certificate and CA certificate). Configure the switch to use the certificates and the associated CA certificate to perform mTLS authentication. Initiate connections from the clients to the switch to execute gNMI RPCs.","title":"Process Overview"},{"location":"configuration/mtls/#easy-rsa-setup","text":"The simple installation of Easy-RSA is well documented in the Easy RSA quick start guide . For a more durable installation you're encouraged to review the Easy-RSA documentation and customize the settings to your environment.","title":"Easy-RSA Setup"},{"location":"configuration/mtls/#easy-rsa-ca-parameters","text":"easy RSA version: 3.0.8 As of this writing EOS only supports RSA certificates, this differs from the default configuration of Easy-RSA. The following variable in the vars file will need to be set in order to generate the appropriate certificate type. set_var EASYRSA_ALGO \"rsa\" Use the easyrsa build-ca command to create the necessary certificate signing infrastructure within easyrsa. This will generate a ca.crt certificate which can be imported into the PKI validation chain of the switches and other hosts in your PKI domain. This can also be used in a standalone manner with most gnmi clients. In our case, this CA certificate resides in: ${HOME}/easy-rsa/pki/ca.crt This will need to be imported into the network elements where you're using mTLS for authentication.","title":"Easy-RSA CA parameters"},{"location":"configuration/mtls/#generate-a-local-client-certificate","text":"This will be used by local clients (gnmi, gnoi, gribi, etc.) connecting to the switches in order to authenticate. Note the gnmi-client.cnf configuration file provided in the following openssl command is used to create the Subject Alternate Name IP address entry associated with the client certificate. This is optional and is not required for certificates. mkdir ~/gnmi-client-cert cd ~/gnmi-client-cert openssl req -out gnmi-client.csr -newkey rsa:2048 -nodes -keyout gnmi-client.key -config gnmi-client.cnf The above commands will generate a private key as well as the Certificate Signing Request (CSR)","title":"Generate a Local Client Certificate"},{"location":"configuration/mtls/#sign-the-local-client-certificate-with-easy-rsa","text":"Note, that this is going to be a client certificate. As our gnmi client will be talking to the gnmi server on the switch. cd ~/easy-rsa ./easyrsa import-req ../gnmi-client-cert gnmi-client.csr gnmi-client ./easyrsa sign-req client gnmi-client The sign-req command generates the following output. Using SSL: openssl OpenSSL 1.1.1f 31 Mar 2020 ... snipped ... subject= countryName = us stateOrProvinceName = mn localityName = minneapolis organizationName = arista-lab commonName = sulrich@arista.com X509v3 Subject Alternative Name: IP:192.168.1.11 Type the word 'yes' to continue, or any other input to abort. Confirm request details: yes Using configuration from /home/sulrich/easy-rsa/pki/easy-rsa-3625384.5yQThV/tmp.kaJhk0 Check that the request matches the signature Signature ok The Subject's Distinguished Name is as follows countryName :PRINTABLE:'us' stateOrProvinceName :ASN.1 12:'mn' localityName :ASN.1 12:'minneapolis' organizationName :ASN.1 12:'arista-lab' commonName :ASN.1 12:'sulrich@arista.com' Certificate is to be certified until Oct 10 19:45:42 2023 GMT (825 days) Write out database with 1 new entries Data Base Updated Certificate created at: /home/sulrich/easy-rsa/pki/issued/gnmi-client.crt","title":"Sign the Local Client Certificate with Easy-RSA"},{"location":"configuration/mtls/#switch-side-actions","text":"Generate a key pair on the switch the key will be named v1.key security pki key generate rsa 4096 v1.key Generate the CSR security pki certificate generate signing-request key v1.key Capture the CSR text into a file and copy this to the CA server.","title":"Switch Side Actions"},{"location":"configuration/mtls/#sign-the-switch-csr-with-easy-rsa","text":"Note that in this case we're generating a server certificate. cd ~/easy-rsa ./easyrsa import-req ../v1.csr v1 ./easyrsa sign-req server v1 This will generate the signed certificate and place it into the easy-rsa local store. ${HOME}/easy-rsa/pki/issued/v1.crt Copy this to the switch and import it into the switch's certificate store. copy file:/mnt/flash/v1.crt certificate:v1.crt","title":"Sign the Switch CSR with Easy-RSA"},{"location":"configuration/mtls/#copy-the-private-ca-certificate-to-the-switch","text":"You will need to copy the CA.crt (commonly in <easyrsa_root>/pki/ca.crt ) to the switch and add it to the list of certificates. In the following example the file has been copied to the switch as demo-ca.crt . copy flash:demo-ca.crt certificate:","title":"Copy the Private CA Certificate to the Switch"},{"location":"configuration/mtls/#ssl-profile-configuration","text":"Configure the necessary ssl profile and include the demo-ca.crt in the list of trusted CAs. management security ssl profile test-arista certificate v1.crt key v1.key trust certificate demo-ca.crt !","title":"SSL Profile Configuration"},{"location":"configuration/mtls/#gnmi-configuration","text":"The following configuration associates the gnmi service withthe associated ssl profile and enables it for use with mTLS for authentication. management api gnmi transport grpc default ssl profile test-arista provider eos-native ! At this point the switch is configured to accept connections from clients with valid, signed certificates.","title":"gNMI Configuration"},{"location":"configuration/mtls/#useful-troubleshooting-commands","text":"show management api gnmi This command enables you to determine the operational state of the gnmi process as well as whether or not the ssl profile is considered valid. show management security ssl profile This command enables you to see the state of the ssl profiles and whether there are issues with the validation chain.","title":"Useful Troubleshooting Commands"},{"location":"configuration/mtls/#clocks-and-certificate-lifetime","text":"Certificates should be created with a finite lifetime and rotated within that lifetime. However, if the clocks on the switch are grossly off this may impact certificate operation. Make sure that the clock on the switch is set correctly and synchronized to a reliable time source.","title":"Clocks and Certificate Lifetime"},{"location":"configuration/mtls/#client-examples","text":"","title":"Client Examples"},{"location":"configuration/mtls/#gnmi-arista-client","text":"gnmi -addr 192.168.1.21:6030 \\ -username admin -password arista \\ -cafile easy-rsa/pki/ca.crt \\ -certfile easy-rsa/pki/issued/gnmi-client.crt \\ -keyfile gnmi-client/gnmi-client.key capabilities","title":"gnmi (Arista Client)"},{"location":"configuration/mtls/#gnmic","text":"gnmic -a 192.168.1.21:6030 -u admin -p arista \\ --tls-ca easy-rsa/pki/ca.crt \\ --tls-cert easy-rsa/pki/issued/gnmi-client.crt \\ --tls-key gnmi-client/gnmi-client.key capabilities","title":"gnmic"},{"location":"configuration/mtls/#additional-references","text":"EOS central: Working with Certificates","title":"Additional References"},{"location":"configuration/netconf/","text":"Overview EOS provides support for managing the switch via NETCONF. NETCONF Currently supported NETCONF operations: get, get-config, get-schema, edit-config, lock, unlock, close-session, kill-session. To configure NETCONF in default VRF we can enable the ssh transport under management api netconf : Default VRF management api netconf transport ssh test Non-default VRF management api netconf transport ssh test vrf management Changing the port: management api netconf transport ssh test port 830 Apply ACL management api netconf transport ssh test ip access-group ACCESS_GROUP Note The ACL should be a standard ACL allowing hosts or subnets. Status check: #show management api netconf Enabled: Yes Server: running on port 830, in management VRF","title":"NETCONF"},{"location":"configuration/netconf/#overview","text":"EOS provides support for managing the switch via NETCONF.","title":"Overview"},{"location":"configuration/netconf/#netconf","text":"Currently supported NETCONF operations: get, get-config, get-schema, edit-config, lock, unlock, close-session, kill-session. To configure NETCONF in default VRF we can enable the ssh transport under management api netconf : Default VRF management api netconf transport ssh test Non-default VRF management api netconf transport ssh test vrf management Changing the port: management api netconf transport ssh test port 830 Apply ACL management api netconf transport ssh test ip access-group ACCESS_GROUP Note The ACL should be a standard ACL allowing hosts or subnets. Status check: #show management api netconf Enabled: Yes Server: running on port 830, in management VRF","title":"NETCONF"},{"location":"configuration/openconfig/","text":"Overview EOS supports the OpenConfig gNMI interface for device management. Platform compatibility All EOS flavors support OpenConfig (phyiscal, virtual, containerized, cloud). gNMI To start the gNMI server, which listens by default on TCP/6030 configure the gRPC transport under management api gnmi in the global config mode: Default VRF management api gnmi transport grpc openmgmt Non-default VRF management api gnmi transport grpc openmgmt vrf management Changing the port: management api gnmi transport grpc openmgmt port 5900 Apply ACL management api gnmi transport grpc openmgmt ip access-group ACCESS_GROUP Note, the ACL should be a standard ACL allowing hosts or subnets. Authenticate the connection with TLS management api gnmi transport grpc openmgmt ssl profile PROFILE Enable authorization of incoming requests management api gnmi transport grpc openmgmt authorization requests Status check #show management api gnmi Octa: No Enabled: Yes Server: running on port 6030, in default VRF SSL Profile: none QoS DSCP: none OCTA The OpenConfig agent (gNMI API) can leverage the EOS state streaming agent's (TerminAttr) libraries, thus exposing EOS native paths. If Octa (OpenConfig + TerminAttr) is enabled then OpenConfig, in addition to accepting OpenConfig paths in gNMI get/subscribe requests, will also support EOS native paths (e.g. Sysdb/Smash paths). This feature was introduced in 4.22.1F . gNMI requests received by Octa are interpreted as either OpenConfig or TerminAttr requests, as follows. gNMI requests containing an origin of eos_native are processed as as native path requests. Requests lacking an origin of eos_native are treated as OpenConfig requests. A gNMI client that supports specification of an origin as part of the associated RPC is a requirement. Note support for sending GET/SUBSCRIBE requests to both an openconfig and an eos-native path in the same call is not yet supported. How to enable Octa Octa can be enable by adding provider eos-native under management api gnmi SW(config-mgmt-api-gnmi)#provider eos-native Status check #show management api gnmi Octa: enabled Enabled: Yes Server: running on port 6030, in default VRF SSL Profile: none QoS DSCP: none API models Starting in EOS 4.24.0F it is possible to configure the Smash paths that Octa has access to. Under the management api models mode, the provider smash sub-mode allows for enabling or disabling a Smash path with the [no] path smash_path_here [disabled] command. SW(config)#management api models SW(config-mgmt-api-models)#provider smash SW(config-provider-smash)#path forwarding/status SW(config-provider-smash)#path routing/status disabled SW(config-provider-smash)#path routing/isis/lsdb SW(config-provider-smash)#exit Note that every time a new path is added the Octa agent has to be restarted. EOS CLI: (config)#management api gnmi (config-mgmt-api-gnmi)#transport grpc <NAME> (config-gnmi-transport-def)#shut (config-gnmi-transport-def)#no shut Bash: $ sudo killall Octa show management api models will list the Smash paths enabled/disabled e.g.: #show management api models provider smash path /Smash/bridging path /Smash/forwarding/status path /Smash/routing/isis/lsdb path /Smash/routing path /Smash/routing/status disabled provider sysdb gNMI per-RPC role authorizations Starting in EOS 4.24.1F it is possible to perform authorization of each RPC (i.e. GET, SET, SUBSCRIBE), if authorization requests is supplied as described above. During authorization, the OpenConfig agent will communicate with the AAA agent, allowing authorization policies or roles to permit or deny the new tokens OpenConfig.Get and OpenConfig.Set. For example, a role may be defined such as: role oc-read 10 permit command OpenConfig.Get A user which is assigned to this role would be allowed to issue a gNMI GET or SUBSCRIBE request, but not a SET request. Note that this is only available for gNMI. Enable AFT mapping By default, mapping of the FIB (forwarding information base) to the OpenConfig AFT (abstract forwarding table) model is disabled, as the volume of data can be large. Starting in EOS 4.25.1F it is possible to enable these mappings, for IPV4, IPV6, or both, as described below: management api models ipv4-unicast ipv6-unicast Troubleshooting The OpenConfig agent handles all transports described above: gNMI, RESTCONF, and NETCONF. The agent log file is present at /var/log/agents/OpenConfig-{PID} . Lines that begin with E are errors. Debug logging can be enabled with a regular trace command. Here are a couple of examples: (config)#trace OpenConfig setting server/9 - For server (gNMI) traces (config)#trace OpenConfig setting */9 - For all traces with verbose setting similarly if Octa is enabled: (config)#trace Octa setting server/9 - For server (gNMI) traces (config)#trace Octa setting */9 - For all traces with verbose setting Limitations In EOS versions prior to 4.24.0F , not all Smash paths were accessible via Octa. Starting in EOS 4.24.0F configuring the Smash paths that Octa has access to will also affect OpenConfig. Enabling a Smash path for Octa can result in extra YANG paths being populated in OpenConfig. Disabling a Smash path can result in having some YANG paths missing in OpenConfig. The %<zone-id> optional suffix in YANG ietf:ipv4-address , and ietf:ipv6-address types are not supported. An OpenConfig client update/merge/replace request can erase config that is not modified by the incoming request. This happens if a config that is part of a certain mount point but not supported by OpenConfig is configured via CLI prior to the OpenConfig client update/merge/replace request is processed. Supported OpenConfig paths Please refer to the EOS Central TOIs to see the new list of paths supported per release. For convenience, supported paths may be found at: https://eos.arista.com/path-report . References / Resources The OpenConfig working group: http://openconfig.net/ Repository of gNMI specifications: https://github.com/openconfig/reference/","title":"OpenConfig"},{"location":"configuration/openconfig/#overview","text":"EOS supports the OpenConfig gNMI interface for device management.","title":"Overview"},{"location":"configuration/openconfig/#platform-compatibility","text":"All EOS flavors support OpenConfig (phyiscal, virtual, containerized, cloud).","title":"Platform compatibility"},{"location":"configuration/openconfig/#gnmi","text":"To start the gNMI server, which listens by default on TCP/6030 configure the gRPC transport under management api gnmi in the global config mode: Default VRF management api gnmi transport grpc openmgmt Non-default VRF management api gnmi transport grpc openmgmt vrf management Changing the port: management api gnmi transport grpc openmgmt port 5900 Apply ACL management api gnmi transport grpc openmgmt ip access-group ACCESS_GROUP Note, the ACL should be a standard ACL allowing hosts or subnets. Authenticate the connection with TLS management api gnmi transport grpc openmgmt ssl profile PROFILE Enable authorization of incoming requests management api gnmi transport grpc openmgmt authorization requests Status check #show management api gnmi Octa: No Enabled: Yes Server: running on port 6030, in default VRF SSL Profile: none QoS DSCP: none","title":"gNMI"},{"location":"configuration/openconfig/#octa","text":"The OpenConfig agent (gNMI API) can leverage the EOS state streaming agent's (TerminAttr) libraries, thus exposing EOS native paths. If Octa (OpenConfig + TerminAttr) is enabled then OpenConfig, in addition to accepting OpenConfig paths in gNMI get/subscribe requests, will also support EOS native paths (e.g. Sysdb/Smash paths). This feature was introduced in 4.22.1F . gNMI requests received by Octa are interpreted as either OpenConfig or TerminAttr requests, as follows. gNMI requests containing an origin of eos_native are processed as as native path requests. Requests lacking an origin of eos_native are treated as OpenConfig requests. A gNMI client that supports specification of an origin as part of the associated RPC is a requirement. Note support for sending GET/SUBSCRIBE requests to both an openconfig and an eos-native path in the same call is not yet supported.","title":"OCTA"},{"location":"configuration/openconfig/#how-to-enable-octa","text":"Octa can be enable by adding provider eos-native under management api gnmi SW(config-mgmt-api-gnmi)#provider eos-native Status check #show management api gnmi Octa: enabled Enabled: Yes Server: running on port 6030, in default VRF SSL Profile: none QoS DSCP: none","title":"How to enable Octa"},{"location":"configuration/openconfig/#api-models","text":"Starting in EOS 4.24.0F it is possible to configure the Smash paths that Octa has access to. Under the management api models mode, the provider smash sub-mode allows for enabling or disabling a Smash path with the [no] path smash_path_here [disabled] command. SW(config)#management api models SW(config-mgmt-api-models)#provider smash SW(config-provider-smash)#path forwarding/status SW(config-provider-smash)#path routing/status disabled SW(config-provider-smash)#path routing/isis/lsdb SW(config-provider-smash)#exit Note that every time a new path is added the Octa agent has to be restarted. EOS CLI: (config)#management api gnmi (config-mgmt-api-gnmi)#transport grpc <NAME> (config-gnmi-transport-def)#shut (config-gnmi-transport-def)#no shut Bash: $ sudo killall Octa show management api models will list the Smash paths enabled/disabled e.g.: #show management api models provider smash path /Smash/bridging path /Smash/forwarding/status path /Smash/routing/isis/lsdb path /Smash/routing path /Smash/routing/status disabled provider sysdb","title":"API models"},{"location":"configuration/openconfig/#gnmi-per-rpc-role-authorizations","text":"Starting in EOS 4.24.1F it is possible to perform authorization of each RPC (i.e. GET, SET, SUBSCRIBE), if authorization requests is supplied as described above. During authorization, the OpenConfig agent will communicate with the AAA agent, allowing authorization policies or roles to permit or deny the new tokens OpenConfig.Get and OpenConfig.Set. For example, a role may be defined such as: role oc-read 10 permit command OpenConfig.Get A user which is assigned to this role would be allowed to issue a gNMI GET or SUBSCRIBE request, but not a SET request. Note that this is only available for gNMI.","title":"gNMI per-RPC role authorizations"},{"location":"configuration/openconfig/#enable-aft-mapping","text":"By default, mapping of the FIB (forwarding information base) to the OpenConfig AFT (abstract forwarding table) model is disabled, as the volume of data can be large. Starting in EOS 4.25.1F it is possible to enable these mappings, for IPV4, IPV6, or both, as described below: management api models ipv4-unicast ipv6-unicast","title":"Enable AFT mapping"},{"location":"configuration/openconfig/#troubleshooting","text":"The OpenConfig agent handles all transports described above: gNMI, RESTCONF, and NETCONF. The agent log file is present at /var/log/agents/OpenConfig-{PID} . Lines that begin with E are errors. Debug logging can be enabled with a regular trace command. Here are a couple of examples: (config)#trace OpenConfig setting server/9 - For server (gNMI) traces (config)#trace OpenConfig setting */9 - For all traces with verbose setting similarly if Octa is enabled: (config)#trace Octa setting server/9 - For server (gNMI) traces (config)#trace Octa setting */9 - For all traces with verbose setting","title":"Troubleshooting"},{"location":"configuration/openconfig/#limitations","text":"In EOS versions prior to 4.24.0F , not all Smash paths were accessible via Octa. Starting in EOS 4.24.0F configuring the Smash paths that Octa has access to will also affect OpenConfig. Enabling a Smash path for Octa can result in extra YANG paths being populated in OpenConfig. Disabling a Smash path can result in having some YANG paths missing in OpenConfig. The %<zone-id> optional suffix in YANG ietf:ipv4-address , and ietf:ipv6-address types are not supported. An OpenConfig client update/merge/replace request can erase config that is not modified by the incoming request. This happens if a config that is part of a certain mount point but not supported by OpenConfig is configured via CLI prior to the OpenConfig client update/merge/replace request is processed.","title":"Limitations"},{"location":"configuration/openconfig/#supported-openconfig-paths","text":"Please refer to the EOS Central TOIs to see the new list of paths supported per release. For convenience, supported paths may be found at: https://eos.arista.com/path-report .","title":"Supported OpenConfig paths"},{"location":"configuration/openconfig/#references-resources","text":"The OpenConfig working group: http://openconfig.net/ Repository of gNMI specifications: https://github.com/openconfig/reference/","title":"References / Resources"},{"location":"configuration/restconf/","text":"Overview EOS provides support for RESTCONF and the necessary transport services to support it. RESTCONF Certificate-based authentication is required for RESTCONF to operate. You should follow the instructions in the Certificate Authentication section in order to generate and install a certificate to support RESTCONF in your environment. Alternately, a self-signed certificate may be generated on the switch and certificate validation can be handled appropriately by remote RESTCONF clients. The following Cli command generates a self-signed cert: security pki certificate generate self-signed restconf.crt key restconf.key generate rsa 2048 parameters common-name restconf Create ssl profile: management security ssl profile restconf certificate restconf.crt key restconf.key Configure RESTCONF: Default VRF: management api restconf transport https test ssl profile restconf Non-default VRF management api restconf transport https test ssl profile restconf vrf management Changing the port: management api restconf transport https test port 5900 Apply ACL management api restconf transport https test ip access-group ACCESS_GROUP Note The ACL should be a standard ACL allowing hosts or subnets. Status check #show management api restconf Enabled: Yes Server: running on port 6020, in management VRF SSL Profile: restconf QoS DSCP: none","title":"RESTCONF"},{"location":"configuration/restconf/#overview","text":"EOS provides support for RESTCONF and the necessary transport services to support it.","title":"Overview"},{"location":"configuration/restconf/#restconf","text":"Certificate-based authentication is required for RESTCONF to operate. You should follow the instructions in the Certificate Authentication section in order to generate and install a certificate to support RESTCONF in your environment. Alternately, a self-signed certificate may be generated on the switch and certificate validation can be handled appropriately by remote RESTCONF clients. The following Cli command generates a self-signed cert: security pki certificate generate self-signed restconf.crt key restconf.key generate rsa 2048 parameters common-name restconf Create ssl profile: management security ssl profile restconf certificate restconf.crt key restconf.key Configure RESTCONF: Default VRF: management api restconf transport https test ssl profile restconf Non-default VRF management api restconf transport https test ssl profile restconf vrf management Changing the port: management api restconf transport https test port 5900 Apply ACL management api restconf transport https test ip access-group ACCESS_GROUP Note The ACL should be a standard ACL allowing hosts or subnets. Status check #show management api restconf Enabled: Yes Server: running on port 6020, in management VRF SSL Profile: restconf QoS DSCP: none","title":"RESTCONF"},{"location":"configuration/security/","text":"Changing Default Service Ports When changing the default ports one has to make sure they are also allowed in the control-plane ACL. The default control-plane ACL cannot be modified, so a new one has to be created and applied under system control-plane (EOS 4.23+ ) or control-plane (pre-EOS 4.23 ). The fastest way to do this is to clone the existing control-plane and add new permit rules. Example 1. Reading the default CP ACL can be done with show ip access-lists default-control-plane-acl #show ip access-lists default-control-plane-acl IP Access List default-control-plane-acl [readonly] counters per-entry 10 permit icmp any any [match 7172 packets, 1 day, 20:46:09 ago] 20 permit ip any any tracked [match 98544013 packets, 0:00:36 ago] 30 permit udp any any eq bfd ttl eq 255 40 permit udp any any eq bfd-echo ttl eq 254 50 permit udp any any eq multihop-bfd 60 permit udp any any eq micro-bfd 70 permit udp any any eq sbfd 80 permit udp any eq sbfd any eq sbfd-initiator 90 permit ospf any any 100 permit tcp any any eq ssh telnet www snmp bgp https msdp ldp netconf-ssh gnmi [match 873 packets, 1 day, 20:43:39 ago] 110 permit udp any any eq bootps bootpc snmp rip ntp ldp [match 970 packets, 1:43:38 ago] 120 permit tcp any any eq mlag ttl eq 255 130 permit udp any any eq mlag ttl eq 255 140 permit vrrp any any 150 permit ahp any any 160 permit pim any any 170 permit igmp any any 180 permit tcp any any range 5900 5910 190 permit tcp any any range 50000 50100 [match 1480505 packets, 1 day, 20:43:16 ago] 200 permit udp any any range 51000 51100 210 permit tcp any any eq 3333 220 permit tcp any any eq nat ttl eq 255 230 permit tcp any eq bgp any 240 permit rsvp any any 250 permit tcp any any eq 6040 260 permit tcp any any eq 5541 ttl eq 255 270 permit tcp any any eq 5542 ttl eq 255 2. There are multiple ways to quickly edit and remove the unnecessary match outputs, in this example we'll use sed on EOS. Save the file to /mnt/flash : show ip access-lists default-control-plane-acl | redirect flash:cpacl.txt 3. Enter bash: #bash 4. Go to /mnt/flash and remove the match outputs cd /mnt/flash sudo sed -i \"s/\\[.*//g\" cpacl.txt 5. Reading the file now should be clean without all the match counter outputs like below: IP Access List default-control-plane-acl counters per-entry 10 permit icmp any any 20 permit ip any any tracked 30 permit udp any any eq bfd ttl eq 255 40 permit udp any any eq bfd-echo ttl eq 254 50 permit udp any any eq multihop-bfd 60 permit udp any any eq micro-bfd 70 permit udp any any eq sbfd 80 permit udp any eq sbfd any eq sbfd-initiator 90 permit ospf any any 100 permit tcp any any eq ssh telnet www snmp bgp https msdp ldp netconf-ssh gnmi 110 permit udp any any eq bootps bootpc snmp rip ntp ldp 120 permit tcp any any eq mlag ttl eq 255 130 permit udp any any eq mlag ttl eq 255 140 permit vrrp any any 150 permit ahp any any 160 permit pim any any 170 permit igmp any any 180 permit tcp any any range 5900 5910 190 permit tcp any any range 50000 50100 200 permit udp any any range 51000 51100 210 permit tcp any any eq 3333 220 permit tcp any any eq nat ttl eq 255 230 permit tcp any eq bgp any 240 permit rsvp any any 250 permit tcp any any eq 6040 260 permit tcp any any eq 5541 ttl eq 255 270 permit tcp any any eq 5542 ttl eq 255 6. Now we can just copy that ACLs content into a new ACL, add our new rules and apply it on the control-plane. From config mode: ip access-list custom-cp <paste the content of the default CP from the file created> 280 permit tcp any any eq 5900 7. Apply the new ACL Default VRF system control-plane ip access-group custom-cp in Non-default VRF system control-plane ip access-group custom-cp vrf management in","title":"Security Configuration"},{"location":"configuration/security/#changing-default-service-ports","text":"When changing the default ports one has to make sure they are also allowed in the control-plane ACL. The default control-plane ACL cannot be modified, so a new one has to be created and applied under system control-plane (EOS 4.23+ ) or control-plane (pre-EOS 4.23 ). The fastest way to do this is to clone the existing control-plane and add new permit rules.","title":"Changing Default Service Ports"},{"location":"configuration/security/#example","text":"1. Reading the default CP ACL can be done with show ip access-lists default-control-plane-acl #show ip access-lists default-control-plane-acl IP Access List default-control-plane-acl [readonly] counters per-entry 10 permit icmp any any [match 7172 packets, 1 day, 20:46:09 ago] 20 permit ip any any tracked [match 98544013 packets, 0:00:36 ago] 30 permit udp any any eq bfd ttl eq 255 40 permit udp any any eq bfd-echo ttl eq 254 50 permit udp any any eq multihop-bfd 60 permit udp any any eq micro-bfd 70 permit udp any any eq sbfd 80 permit udp any eq sbfd any eq sbfd-initiator 90 permit ospf any any 100 permit tcp any any eq ssh telnet www snmp bgp https msdp ldp netconf-ssh gnmi [match 873 packets, 1 day, 20:43:39 ago] 110 permit udp any any eq bootps bootpc snmp rip ntp ldp [match 970 packets, 1:43:38 ago] 120 permit tcp any any eq mlag ttl eq 255 130 permit udp any any eq mlag ttl eq 255 140 permit vrrp any any 150 permit ahp any any 160 permit pim any any 170 permit igmp any any 180 permit tcp any any range 5900 5910 190 permit tcp any any range 50000 50100 [match 1480505 packets, 1 day, 20:43:16 ago] 200 permit udp any any range 51000 51100 210 permit tcp any any eq 3333 220 permit tcp any any eq nat ttl eq 255 230 permit tcp any eq bgp any 240 permit rsvp any any 250 permit tcp any any eq 6040 260 permit tcp any any eq 5541 ttl eq 255 270 permit tcp any any eq 5542 ttl eq 255 2. There are multiple ways to quickly edit and remove the unnecessary match outputs, in this example we'll use sed on EOS. Save the file to /mnt/flash : show ip access-lists default-control-plane-acl | redirect flash:cpacl.txt 3. Enter bash: #bash 4. Go to /mnt/flash and remove the match outputs cd /mnt/flash sudo sed -i \"s/\\[.*//g\" cpacl.txt 5. Reading the file now should be clean without all the match counter outputs like below: IP Access List default-control-plane-acl counters per-entry 10 permit icmp any any 20 permit ip any any tracked 30 permit udp any any eq bfd ttl eq 255 40 permit udp any any eq bfd-echo ttl eq 254 50 permit udp any any eq multihop-bfd 60 permit udp any any eq micro-bfd 70 permit udp any any eq sbfd 80 permit udp any eq sbfd any eq sbfd-initiator 90 permit ospf any any 100 permit tcp any any eq ssh telnet www snmp bgp https msdp ldp netconf-ssh gnmi 110 permit udp any any eq bootps bootpc snmp rip ntp ldp 120 permit tcp any any eq mlag ttl eq 255 130 permit udp any any eq mlag ttl eq 255 140 permit vrrp any any 150 permit ahp any any 160 permit pim any any 170 permit igmp any any 180 permit tcp any any range 5900 5910 190 permit tcp any any range 50000 50100 200 permit udp any any range 51000 51100 210 permit tcp any any eq 3333 220 permit tcp any any eq nat ttl eq 255 230 permit tcp any eq bgp any 240 permit rsvp any any 250 permit tcp any any eq 6040 260 permit tcp any any eq 5541 ttl eq 255 270 permit tcp any any eq 5542 ttl eq 255 6. Now we can just copy that ACLs content into a new ACL, add our new rules and apply it on the control-plane. From config mode: ip access-list custom-cp <paste the content of the default CP from the file created> 280 permit tcp any any eq 5900 7. Apply the new ACL Default VRF system control-plane ip access-group custom-cp in Non-default VRF system control-plane ip access-group custom-cp vrf management in","title":"Example"},{"location":"examples/","text":"Overview In the examples folder we provide a variety of examples that will show how to use some of the many third party tools to interact with one of the GRPC interfaces(gNMI,gNOI and gRIBI) within Arista EOS. gNxI clients arista gnmi client gnmic gnmi-gateway gnoic grpcurl golang python","title":"examples"},{"location":"examples/#overview","text":"In the examples folder we provide a variety of examples that will show how to use some of the many third party tools to interact with one of the GRPC interfaces(gNMI,gNOI and gRIBI) within Arista EOS.","title":"Overview"},{"location":"examples/#gnxi-clients","text":"arista gnmi client gnmic gnmi-gateway gnoic grpcurl golang python","title":"gNxI clients"},{"location":"examples/ansible/","text":"overview In this ansible collection we show how to use ansible to find all the available modules within an Arista EOS device using the capabilities method within gNMI. Edit the inventory file to match your environment [leaf] 127.0.0.1 ansible_user=admin ansible_password=admin [all:vars] ansible_user=admin ansible_password=admin ansible_become_pass=admin ansible_python_interpreter=/usr/bin/python3 ansible_port=6030 ansible_connection=nokia.grpc.gnmi ansible_gnmi_encoding=JSON gNMI collection ansible-galaxy collection install nokia.openconfig Run the playbook ansible-playbook -i inventory capabilities.yaml output of playbook ok: [10.20.30.67] => { \"msg\": { \"gNMIVersion\": \"0.7.0\", \"supportedEncodings\": [ \"JSON\", \"JSON_IETF\", \"ASCII\" ], \"supportedModels\": [ { \"name\": \"arista-exp-eos-multicast\", \"organization\": \"Arista Networks <http://arista.com/>\" }, { \"name\": \"arista-exp-eos-evpn\", \"organization\": \"Arista Networks, Inc.\" },","title":"Ansible"},{"location":"examples/ansible/#overview","text":"In this ansible collection we show how to use ansible to find all the available modules within an Arista EOS device using the capabilities method within gNMI.","title":"overview"},{"location":"examples/ansible/#edit-the-inventory-file-to-match-your-environment","text":"[leaf] 127.0.0.1 ansible_user=admin ansible_password=admin [all:vars] ansible_user=admin ansible_password=admin ansible_become_pass=admin ansible_python_interpreter=/usr/bin/python3 ansible_port=6030 ansible_connection=nokia.grpc.gnmi ansible_gnmi_encoding=JSON","title":"Edit the inventory file to match your environment"},{"location":"examples/ansible/#gnmi-collection","text":"ansible-galaxy collection install nokia.openconfig","title":"gNMI collection"},{"location":"examples/ansible/#run-the-playbook","text":"ansible-playbook -i inventory capabilities.yaml","title":"Run the playbook"},{"location":"examples/ansible/#output-of-playbook","text":"ok: [10.20.30.67] => { \"msg\": { \"gNMIVersion\": \"0.7.0\", \"supportedEncodings\": [ \"JSON\", \"JSON_IETF\", \"ASCII\" ], \"supportedModels\": [ { \"name\": \"arista-exp-eos-multicast\", \"organization\": \"Arista Networks <http://arista.com/>\" }, { \"name\": \"arista-exp-eos-evpn\", \"organization\": \"Arista Networks, Inc.\" },","title":"output of playbook"},{"location":"examples/gnmi-clients/arista-gnmi/","text":"gNMI GET RPC Examples OpenConfig paths Get all information gnmi -addr 10.83.13.139:6030 -username admin -password arista get / Get the BGP configuration in the default VRF gnmi -addr 172.28.160.219:6030 -username admin -password arista \\ get '/network-instances/network-instance[name=default]/protocols/protocol[identifier=BGP][name=BGP]/bgp'` Reveal output /network-instances/network-instance[name=default]/protocols/protocol[identifier=BGP][name=BGP]/bgp: { \"openconfig-network-instance:global\": { \"confederation\": { \"config\": { \"identifier\": 0 }, \"state\": {p \"identifier\": 0 } }, \"config\": { \"as\": 4206000022, \"router-id\": \"0.0.0.0\" }, \"default-route-distance\": { \"config\": { \"external-route-distance\": 200, \"internal-route-distance\": 200 }, \"state\": { \"external-route-distance\": 200, \"internal-route-distance\": 200 } }, \"graceful-restart\": { \"config\": { \"restart-time\": 0 }, \"state\": { \"restart-time\": 0 } }, \"route-selection-options\": { \"config\": {}, \"state\": {} }, \"state\": { \"as\": 4206000022, \"router-id\": \"4.4.4.4\" } }, \"openconfig-network-instance:neighbors\": { \"neighbor\": [ { \"afi-safis\": { \"afi-safi\": [ { \"afi-safi-name\": \"IPV4_UNICAST\", \"config\": { \"afi-safi-name\": \"IPV4_UNICAST\", \"enabled\": false }, \"graceful-restart\": { \"config\": { \"enabled\": false }, \"state\": { \"enabled\": false } }, \"state\": { \"afi-safi-name\": \"IPV4_UNICAST\", \"enabled\": false } }, { \"afi-safi-name\": \"IPV6_UNICAST\", \"config\": { \"afi-safi-name\": \"IPV6_UNICAST\", \"enabled\": false }, \"graceful-restart\": { \"config\": { \"enabled\": false }, \"state\": { \"enabled\": false } }, \"state\": { \"afi-safi-name\": \"IPV6_UNICAST\", \"enabled\": false } } ] }, \"config\": { \"auth-password\": \"\", \"description\": \"\", \"local-as\": 0, \"neighbor-address\": \"3.4.5.6\", \"peer-as\": 1, \"send-community\": \"NONE\" }, \"ebgp-multihop\": { \"config\": { \"multihop-ttl\": 0 }, \"state\": { \"multihop-ttl\": 0 } }, \"neighbor-address\": \"3.4.5.6\", \"route-reflector\": { \"config\": { \"route-reflector-client\": false }, \"state\": { \"route-reflector-client\": false } }, \"state\": { \"auth-password\": \"\", \"description\": \"\", \"local-as\": 0, \"peer-as\": 1, \"send-community\": \"NONE\" }, \"timers\": { \"config\": { \"hold-time\": \"180.0\", \"keepalive-interval\": \"60.0\" }, \"state\": { \"hold-time\": \"180.0\", \"keepalive-interval\": \"60.0\" } }, \"transport\": { \"config\": { \"passive-mode\": false }, \"state\": { \"passive-mode\": false } } }, { \"afi-safis\": { \"afi-safi\": [ { \"afi-safi-name\": \"IPV4_UNICAST\", \"config\": { \"afi-safi-name\": \"IPV4_UNICAST\", \"enabled\": false }, \"graceful-restart\": { \"config\": { \"enabled\": false }, \"state\": { \"enabled\": false } }, \"state\": { \"afi-safi-name\": \"IPV4_UNICAST\", \"enabled\": false } }, { \"afi-safi-name\": \"IPV6_UNICAST\", \"config\": { \"afi-safi-name\": \"IPV6_UNICAST\", \"enabled\": false }, \"graceful-restart\": { \"config\": { \"enabled\": false }, \"state\": { \"enabled\": false } }, \"state\": { \"afi-safi-name\": \"IPV6_UNICAST\", \"enabled\": false } } ] }, \"config\": { \"auth-password\": \"\", \"description\": \"\", \"local-as\": 0, \"neighbor-address\": \"20.1.1.1\", \"peer-as\": 65001, \"send-community\": \"NONE\" }, \"ebgp-multihop\": { \"config\": { \"multihop-ttl\": 0 }, \"state\": { \"multihop-ttl\": 0 } }, \"neighbor-address\": \"20.1.1.1\", \"route-reflector\": { \"config\": { \"route-reflector-client\": false }, \"state\": { \"route-reflector-client\": false } }, \"state\": { \"auth-password\": \"\", \"description\": \"\", \"local-as\": 0, \"peer-as\": 65001, \"send-community\": \"NONE\" }, \"timers\": { \"config\": { \"hold-time\": \"180.0\", \"keepalive-interval\": \"60.0\" }, \"state\": { \"hold-time\": \"180.0\", \"keepalive-interval\": \"60.0\" } }, \"transport\": { \"config\": { \"passive-mode\": false }, \"state\": { \"passive-mode\": false } } } ] } Get BGP neighbors gnmi -addr 10.83.13.139 -username admin \\ get '/network-instances/network-instance[name=default]/protocols/protocol[name=BGP]/bgp/neighbors' Reveal output /network-instances/network-instance[name=default]/protocols/protocol[identifier=BGP][name=BGP]/bgp/neighbors: { \"openconfig-network-instance:neighbor\": [ { \"afi-safis\": { \"afi-safi\": [ { \"afi-safi-name\": \"openconfig-bgp-types:IPV6_UNICAST\", \"config\": { \"afi-safi-name\": \"openconfig-bgp-types:IPV6_UNICAST\" }, \"state\": { \"afi-safi-name\": \"openconfig-bgp-types:IPV6_UNICAST\", \"prefixes\": { \"arista-bgp-augments:best-ecmp-paths\": 0, \"arista-bgp-augments:best-paths\": 0, \"installed\": 0, \"received\": 0, \"sent\": 0 } } }, { \"afi-safi-name\": \"openconfig-bgp-types:L2VPN_EVPN\", \"config\": { \"afi-safi-name\": \"openconfig-bgp-types:L2VPN_EVPN\" }, \"state\": { \"afi-safi-name\": \"openconfig-bgp-types:L2VPN_EVPN\", \"prefixes\": { \"arista-bgp-augments:best-ecmp-paths\": 0, \"arista-bgp-augments:best-paths\": 0, \"installed\": 0, \"received\": 0, \"sent\": 0 } } }, { \"afi-safi-name\": \"openconfig-bgp-types:IPV4_UNICAST\", \"config\": { \"afi-safi-name\": \"openconfig-bgp-types:IPV4_UNICAST\" }, \"state\": { \"afi-safi-name\": \"openconfig-bgp-types:IPV4_UNICAST\", \"prefixes\": { \"arista-bgp-augments:best-ecmp-paths\": 0, \"arista-bgp-augments:best-paths\": 0, \"installed\": 0, \"received\": 0, \"sent\": 0 } } } ] }, \"apply-policy\": { \"config\": { \"default-export-policy\": \"REJECT_ROUTE\", \"default-import-policy\": \"REJECT_ROUTE\" }, \"state\": { \"default-export-policy\": \"REJECT_ROUTE\", \"default-import-policy\": \"REJECT_ROUTE\" } }, \"as-path-options\": { \"config\": { \"replace-peer-as\": false }, \"state\": { \"replace-peer-as\": false } }, \"config\": { \"enabled\": true, \"neighbor-address\": \"172.168.14.2\", \"peer-as\": 65002, \"send-community\": \"NONE\" }, \"ebgp-multihop\": { \"config\": { \"enabled\": false, \"multihop-ttl\": 0 }, \"state\": { \"enabled\": false, \"multihop-ttl\": 0 } }, \"neighbor-address\": \"172.168.14.2\", \"state\": { \"enabled\": true, \"established-transitions\": \"2\", \"last-established\": \"1614170027122047488\", \"messages\": { \"received\": { \"UPDATE\": \"2\" }, \"sent\": { \"UPDATE\": \"2\" } }, \"neighbor-address\": \"172.168.14.2\", \"peer-as\": 65002, \"send-community\": \"NONE\", \"session-state\": \"ESTABLISHED\" }, \"transport\": { \"config\": { \"mtu-discovery\": true }, \"state\": { \"mtu-discovery\": true, \"remote-address\": \"172.168.14.2\", \"remote-port\": 0 } } } ] } Get all interface descriptions gnmi -addr 10.83.13.139:6030 -username admin -password arista \\ get '/interfaces/interface/subinterfaces/subinterface/state/description' /interfaces/interface[name=Ethernet3]/subinterfaces/subinterface[index=0]/state/description: SRV01 /interfaces/interface[name=Ethernet1]/subinterfaces/subinterface[index=0]/state/description: DCI /interfaces/interface[name=Ethernet2]/subinterfaces/subinterface[index=0]/state/description: To Spines Get an interface's description gnmi -addr 10.81.117.100:6030 -username admin -password arista \\ get 'interfaces/interface[name=Ethernet1/1]/subinterfaces/subinterface/state/description' /interfaces/interface[name=Ethernet1/1]/subinterfaces/subinterface[index=0]/state/description: \"Tyrion\" Get the operational status of all interfaces gnmi -addr 10.83.13.139:6030 -username admin -password arista \\ get 'interfaces/interface/state/oper-status'` Get all states of an interface gnmi -addr 10.83.13.139:6030 -username cvpadmin -password arastra \\ get 'interfaces/interface[name=Ethernet24]/state/'` Reveal output /interfaces/interface[name=Ethernet24]/state: { \"openconfig-interfaces:admin-status\": \"UP\", \"openconfig-interfaces:counters\": { \"in-broadcast-pkts\": \"1\", \"in-discards\": \"0\", \"in-errors\": \"0\", \"in-fcs-errors\": \"0\", \"in-multicast-pkts\": \"70143\", \"in-octets\": \"570132503174\", \"in-unicast-pkts\": \"376128549\", \"out-broadcast-pkts\": \"2\", \"out-discards\": \"0\", \"out-errors\": \"0\", \"out-multicast-pkts\": \"169207\", \"out-octets\": \"569979193348\", \"out-unicast-pkts\": \"376049116\" }, \"openconfig-interfaces:description\": \"\", \"openconfig-interfaces:enabled\": true, \"openconfig-platform-port:hardware-port\": \"Port24\", \"openconfig-interfaces:ifindex\": 24, \"arista-intf-augments:inactive\": false, \"openconfig-interfaces:last-change\": \"1614001155863084032\", \"openconfig-interfaces:loopback-mode\": false, \"openconfig-interfaces:mtu\": 0, \"openconfig-interfaces:name\": \"Ethernet24\", \"openconfig-interfaces:oper-status\": \"UP\", \"openconfig-vlan:tpid\": \"openconfig-vlan-types:TPID_0X8100\", \"openconfig-interfaces:type\": \"iana-if-type:ethernetCsmacd\" } Get an interface's operational status gnmi -addr 10.83.13.139:6030 -username cvpadmin -password arastra \\ get 'interfaces/interface[name=Ethernet24]/state/oper-status' Output: /interfaces/interface[name=Ethernet24]/state/oper-status: UP Get an interface's admin status gnmi -addr 10.83.13.139:6030 -username cvpadmin -password arastra \\ get 'interfaces/interface[name=Ethernet24]/state/admin-status'` Output: /interfaces/interface[name=Ethernet24]/state/admin-status: UP Get the DOM metrics of all interfaces gnmi -addr 10.83.13.139:6030 -username cvpadmin -password arastra \\ get \"components/component/transceiver/physical-channels/channel/state/\" Get the DOM metrics of an interface gnmi -addr 10.83.13.139:6030 -username cvpadmin -password arastra \\ get \"components/component[name=Ethernet24 transceiver]/transceiver/physical-channels/channel/state/\" Reveal output /components/component[name=Ethernet24 transceiver]/transceiver/physical-channels/channel[index=0]/state: { \"openconfig-platform-transceiver:index\": 0, \"openconfig-platform-transceiver:input-power\": { \"instant\": \"-0.26\" }, \"openconfig-platform-transceiver:laser-bias-current\": { \"instant\": \"7.49\" }, \"openconfig-platform-transceiver:output-power\": { \"instant\": \"0.32\" } } Get per core CPU utilization gnmi -addr 10.83.13.139:6030 -username cvpadmin -password arastra \\ get 'components/component/cpu' Reveal output /components/component[name=CPU3]/cpu: { \"openconfig-platform-cpu:utilization\": { \"state\": { \"avg\": 18, \"instant\": 16, \"interval\": \"1000000000000\", \"max\": 28, \"max-time\": \"3230106984172745216\", \"min\": 13, \"min-time\": \"3230106514174602752\" } } } /components/component[name=CPU0]/cpu: { \"openconfig-platform-cpu:utilization\": { \"state\": { \"avg\": 17, \"instant\": 16, \"interval\": \"1000000000000\", \"max\": 25, \"max-time\": \"3230106564173730816\", \"min\": 12, \"min-time\": \"3230106394175068672\" } } } /components/component[name=CPU1]/cpu: { \"openconfig-platform-cpu:utilization\": { \"state\": { \"avg\": 18, \"instant\": 17, \"interval\": \"1000000000000\", \"max\": 27, \"max-time\": \"3230107464174793728\", \"min\": 13, \"min-time\": \"3230107334172570624\" } } } /components/component[name=CPU2]/cpu: { \"openconfig-platform-cpu:utilization\": { \"state\": { \"avg\": 17, \"instant\": 21, \"interval\": \"1000000000000\", \"max\": 24, \"max-time\": \"3230106924173756928\", \"min\": 11, \"min-time\": \"3230107394173572608\" } } } Get the available/utilized memory gnmi -addr 10.83.13.139:6030 -username cvpadmin -password arastra \\ get 'components/component/state/memory/' Output: /components/component[name=Chassis]/state/memory: { \"openconfig-platform:available\": \"8298774528\", \"openconfig-platform:utilized\": \"7706267648\" } Get the system environment temperatures gnmi -addr 10.83.13.139:6030 -username cvpadmin -password arastra \\ get 'components/component/state/temperature/instant' Reveal output /components/component[name=DomTemperatureSensor49]/state/temperature/instant: 30.49609375 /components/component[name=DomTemperatureSensor25]/state/temperature/instant: 24.69921875 /components/component[name=DomTemperatureSensor40]/state/temperature/instant: 25.5078125 /components/component[name=TempSensorP2/2]/state/temperature/instant: 0.0 /components/component[name=TempSensorP1/3]/state/temperature/instant: 40.0 /components/component[name=TempSensorP2/1]/state/temperature/instant: 0.0 /components/component[name=TempSensorP2/3]/state/temperature/instant: 0.0 /components/component[name=DomTemperatureSensor24]/state/temperature/instant: 24.5 /components/component[name=DomTemperatureSensor26]/state/temperature/instant: 23.73046875 /components/component[name=DomTemperatureSensor54]/state/temperature/instant: 27.26953125 /components/component[name=TempSensorP1/1]/state/temperature/instant: 34.0 /components/component[name=DomTemperatureSensor50]/state/temperature/instant: 27.453125 /components/component[name=TempSensorP1/2]/state/temperature/instant: 25.0 /components/component[name=TempSensor1]/state/temperature/instant: 45.84278576588521 /components/component[name=TempSensor15]/state/temperature/instant: 33.875 /components/component[name=TempSensor18]/state/temperature/instant: 44.625 /components/component[name=TempSensor16]/state/temperature/instant: 22.75 /components/component[name=TempSensor17]/state/temperature/instant: 37.0 /components/component[name=TempSensor14]/state/temperature/instant: 37.0 EOS Native paths To get EOS native paths, OCTA has to be enabled as mentioned in the configuration section. Performing GET/SUBSCRIBE actions using EOS native paths require changing the origin to eos_native . Commonly used paths MAC table: /Smash/bridging/status/smashFdbStatus ARP table: /Smash/arp/status/arpEntry Neighbor table: /Smash/arp/status/neighborEntry IPv4 RIB: /Smash/routing/status/route IPv6 RIB: /Smash/routing6/status/route IPv4 next-hop table: /Smash/routing/status/nexthop IPv6 next-hop table: /Smash/routing6/status/nexthop CPU info: /Kernel/proc/cpu Process statistics: /Kernel/proc/stat System info: /Kernel/sysinfo EOS version: /Eos/image Interface counters: /Smash/counters/ethIntf/<agent>/current/counter Values for <agent> are: 7500-family, 7280-family, 7020-family (Arad/Jericho ASICs): SandCounters 7300-family, 7250-family, 7050-family, 7010 products, 720-family (Trident ASICs): StrataCounters For 7060-family, 7260-family (Tomahawk): Strata-FixedSystem or StrataCounters from 4.22+ 7150-family products (Alta ASICs): FocalPointV2 7160-family products (Cavium/Xpliant ASICs): XpCounters 7170-family products (Barefoot ASIC): BfnCounters Get CPU utilization gnmi -addr 10.83.13.130:6030 -username admin \\ get origin=eos_native '/Kernel/proc/cpu/utilization/total' Output: /Kernel/proc/cpu/utilization/total/nice: 38446 /Kernel/proc/cpu/utilization/total/system: 2347714 /Kernel/proc/cpu/utilization/total/idle: 247720286 /Kernel/proc/cpu/utilization/total/name: total /Kernel/proc/cpu/utilization/total/util: 7 /Kernel/proc/cpu/utilization/total/user: 16984784 Get transceiver DOM temperature gnmi -addr 10.83.13.130:6030 -username admin get origin=eos_native \\ 'Sysdb/environment/archer/temperature/status/system/DomTemperatureSensor32'` Reveal output /Sysdb/environment/archer/temperature/status/system/DomTemperatureSensor32/temperature: { \"value\": 32.5 } /Sysdb/environment/archer/temperature/status/system/DomTemperatureSensor32/maxTemperature: { \"value\": 34.88671875 } /Sysdb/environment/archer/temperature/status/system/DomTemperatureSensor32/maxTemperatureTime: 1564757444.339129 /Sysdb/environment/archer/temperature/status/system/DomTemperatureSensor32/name: DomTemperatureSensor32 /Sysdb/environment/archer/temperature/status/system/DomTemperatureSensor32/generationId: 0 /Sysdb/environment/archer/temperature/status/system/DomTemperatureSensor32/hwStatus: ok /Sysdb/environment/archer/temperature/status/system/DomTemperatureSensor32/alertRaised: false /Sysdb/environment/archer/temperature/status/system/DomTemperatureSensor32/alertRaisedCount: 0 /Sysdb/environment/archer/temperature/status/system/DomTemperatureSensor32/lastAlertRaisedTime: 1564194739.259879 Get connectivity monitor host stats gnmi -addr 10.83.13.139:6030 -username admin get origin=eos_native '/Sysdb/connectivityMonitor/status/hostStatus/' Reveal output /Sysdb/connectivityMonitor/status/hostStatus/wls100_default/key/hostName: wls100 /Sysdb/connectivityMonitor/status/hostStatus/wls100_default/key/vrfName: { \"value\": \"default\" } /Sysdb/connectivityMonitor/status/hostStatus/wls100_default/name: wls100_default /Sysdb/connectivityMonitor/status/hostStatus/wls100_default/defaultStats/packetLoss: 0 /Sysdb/connectivityMonitor/status/hostStatus/wls100_default/defaultStats/httpResponseTime: 0 /Sysdb/connectivityMonitor/status/hostStatus/wls100_default/defaultStats/interfaceName: /Sysdb/connectivityMonitor/status/hostStatus/wls100_default/defaultStats/jitter: 0 /Sysdb/connectivityMonitor/status/hostStatus/wls100_default/defaultStats/latency: 0 /Sysdb/connectivityMonitor/status/hostStatus/wls100_default/ipAddr: \"10.83.13.140\" /Sysdb/connectivityMonitor/status/hostStatus/ats323_management/key/hostName: ats323 /Sysdb/connectivityMonitor/status/hostStatus/ats323_management/key/vrfName: { \"value\": \"management\" } /Sysdb/connectivityMonitor/status/hostStatus/ats323_management/name: ats323_management /Sysdb/connectivityMonitor/status/hostStatus/ats323_management/ipAddr: \"10.83.13.138\" /Sysdb/connectivityMonitor/status/hostStatus/ats323_management/defaultStats/latency: 0.127 /Sysdb/connectivityMonitor/status/hostStatus/ats323_management/defaultStats/jitter: 0.033 /Sysdb/connectivityMonitor/status/hostStatus/ats323_management/defaultStats/packetLoss: 0 /Sysdb/connectivityMonitor/status/hostStatus/ats323_management/defaultStats/httpResponseTime: 21.860306 /Sysdb/connectivityMonitor/status/hostStatus/ats323_management/defaultStats/interfaceName: gNMI SET RPC Examples OpenConfig paths Configure BGP neighbor Configure neighbor address and peer AS gnmi -addr 10.83.13.139:6030 -username cvpadmin -password arastra \\ update '/network-instances/network-instance[name=default]/protocols/protocol[name=BGP]/bgp/neighbors/neighbor[neighbor-address=10.10.100.43]' \\ '{\"config\": {\"neighbor-address\":\"10.10.100.43\", \"peer-as\": 123}}' Configure neighbor address, peer AS and send-community gnmi -addr 10.83.28.203:6030 -username arista -password arista update '/network-instances/network-instance[name=default]/protocols/protocol[name=BGP]/bgp/neighbors/neighbor[neighbor-address=10.10.100.43]' \\ '{\"config\": {\"neighbor-address\":\"10.10.100.43\", \"peer-as\": 123, \"enabled\": true, \"send-community\": \"EXTENDED\"}}' Create peer group gnmi -addr 10.83.28.203 -username arista -password arista update \\ '/network-instances/network-instance[name=default]/protocols/protocol[name=BGP]/bgp/peer-groups/peer-group[peer-group-name=XYZ]' \\ '{\"config\": {\"peer-group-name\":\"XYZ\", \"local-as\": 114}}' Update the peer AS gnmi -addr 10.83.28.203:6030 -username arista -password arista \\ update '/network-instances/network-instance[name=default]/protocols/protocol[name=BGP]/bgp/neighbors/neighbor[neighbor-address=10.10.10.0]/config/peer-as' \\ '110' gnmi -addr 10.83.28.203:6030 -username arista -password arista \\ update '/network-instances/network-instance[name=default]/protocols/protocol[name=BGP]/bgp/neighbors/neighbor[neighbor-address=10.10.10.0]' \\ '{\"config\": {\"peer-as\": 110}}' Update the peer group gnmi -addr 10.83.28.203:6030 -username arista -password arista \\ update '/network-instances/network-instance[name=default]/protocols/protocol[name=BGP]/bgp/neighbors/neighbor[neighbor-address=10.10.100.43]/config/peer-group' \\ 'XYZ' gnmi -addr 10.83.28.203:6030 -username arista -password arista \\ update '/network-instances/network-instance[name=default]/protocols/protocol[name=BGP]/bgp/neighbors/neighbor[neighbor-address=10.10.10.0]' \\ '{\"config\": {\"peer-group\": \"XYZ\",\"peer-as\": 143}}' Update BGP config using json file gnmi -addr 10.83.28.203:6030 -username arista -password arista \\ update /network-instances/network-instance[name=default]/protocols/protocol[name=BGP]/bgp' Reveal output { \"neighbors\": { \"neighbor\": [ { \"config\": { \"enabled\": true, \"neighbor-address\": \"10.10.10.154\", \"peer-group\": \"XYZ\" }, \"neighbor-address\": \"10.10.10.154\" }, { \"config\": { \"enabled\": true, \"neighbor-address\": \"10.10.10.157\", \"peer-group\": \"XYZ\" }, \"neighbor-address\": \"10.10.10.157\" } ] }, \"peer-groups\": { \"peer-group\": [ { \"config\": { \"peer-as\": 65002, \"peer-group-name\": \"ABC\" }, \"peer-group-name\": \"ABC\" } ] } } Create an ACL gnmi -addr 10.83.28.203:6030 -username admin -password arista \\ update /acl/acl-sets acl2.json` cat acl2.json Reveal output { \"acl-set\": [ { \"config\": { \"name\": \"test\", \"type\": \"ACL_IPV4\" }, \"name\": \"test\", \"type\": \"ACL_IPV4\", \"acl-entries\": { \"acl-entry\": [ { \"sequence-id\": 10, \"actions\": { \"config\": { \"forwarding-action\": \"DROP\" } }, \"config\": { \"sequence-id\": 10 }, \"ipv4\": { \"config\": { \"destination-address\": \"1.2.3.4/12\", \"source-address\": \"0.0.0.0/0\" } } } ] } } ] } This creates ip access-list test 10 deny ip any 1.0.0.0/12 Shutdown an interface gnmi -addr 10.83.13.139:6030 -username arista -password arista \\ update '/interfaces/interface[name=Ethernet1]/config/enabled' \\ 'false' Bring up an interface gnmi -addr 10.83.13.139:6030 -username arista -password arista \\ update '/interfaces/interface[name=Ethernet1]/config/enabled' \\ 'true' gNMI SUBSCRIBE RPC Examples OpenConfig paths Subscribe to all BGP neighbor states gnmi -addr 10.83.28.203 -username arista -password arista \\ subscribe '/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/state' Subscribe to specific BGP neighbor state gnmi -addr 10.83.28.203 -username arista -password arista \\ subscribe '/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor[neighbor-address=10.10.10.5]/state' Subscribe with stream mode sample and interval gnmi -addr 10.83.13.214:6030 -username admin -password arista \\ -sample_interval 5s -stream_mode sample \\ subscribe \\ '/network-instances/network-instance[name=Tenant_A_WEB_Zone]/protocols/protocol[identifier=BGP][name=BGP]/bgp/neighbors/neighbor[neighbor-address=10.255.251.1]/afi-safis/afi-safi[afi-safi-name=openconfig-bgp-types:IPV4_UNICAST]/state/prefixes/received'","title":"gnmi (Arista)"},{"location":"examples/gnmi-clients/arista-gnmi/#gnmi-get-rpc-examples","text":"","title":"gNMI GET RPC Examples"},{"location":"examples/gnmi-clients/arista-gnmi/#openconfig-paths","text":"","title":"OpenConfig paths"},{"location":"examples/gnmi-clients/arista-gnmi/#get-all-information","text":"gnmi -addr 10.83.13.139:6030 -username admin -password arista get /","title":"Get all information"},{"location":"examples/gnmi-clients/arista-gnmi/#get-the-bgp-configuration-in-the-default-vrf","text":"gnmi -addr 172.28.160.219:6030 -username admin -password arista \\ get '/network-instances/network-instance[name=default]/protocols/protocol[identifier=BGP][name=BGP]/bgp'` Reveal output /network-instances/network-instance[name=default]/protocols/protocol[identifier=BGP][name=BGP]/bgp: { \"openconfig-network-instance:global\": { \"confederation\": { \"config\": { \"identifier\": 0 }, \"state\": {p \"identifier\": 0 } }, \"config\": { \"as\": 4206000022, \"router-id\": \"0.0.0.0\" }, \"default-route-distance\": { \"config\": { \"external-route-distance\": 200, \"internal-route-distance\": 200 }, \"state\": { \"external-route-distance\": 200, \"internal-route-distance\": 200 } }, \"graceful-restart\": { \"config\": { \"restart-time\": 0 }, \"state\": { \"restart-time\": 0 } }, \"route-selection-options\": { \"config\": {}, \"state\": {} }, \"state\": { \"as\": 4206000022, \"router-id\": \"4.4.4.4\" } }, \"openconfig-network-instance:neighbors\": { \"neighbor\": [ { \"afi-safis\": { \"afi-safi\": [ { \"afi-safi-name\": \"IPV4_UNICAST\", \"config\": { \"afi-safi-name\": \"IPV4_UNICAST\", \"enabled\": false }, \"graceful-restart\": { \"config\": { \"enabled\": false }, \"state\": { \"enabled\": false } }, \"state\": { \"afi-safi-name\": \"IPV4_UNICAST\", \"enabled\": false } }, { \"afi-safi-name\": \"IPV6_UNICAST\", \"config\": { \"afi-safi-name\": \"IPV6_UNICAST\", \"enabled\": false }, \"graceful-restart\": { \"config\": { \"enabled\": false }, \"state\": { \"enabled\": false } }, \"state\": { \"afi-safi-name\": \"IPV6_UNICAST\", \"enabled\": false } } ] }, \"config\": { \"auth-password\": \"\", \"description\": \"\", \"local-as\": 0, \"neighbor-address\": \"3.4.5.6\", \"peer-as\": 1, \"send-community\": \"NONE\" }, \"ebgp-multihop\": { \"config\": { \"multihop-ttl\": 0 }, \"state\": { \"multihop-ttl\": 0 } }, \"neighbor-address\": \"3.4.5.6\", \"route-reflector\": { \"config\": { \"route-reflector-client\": false }, \"state\": { \"route-reflector-client\": false } }, \"state\": { \"auth-password\": \"\", \"description\": \"\", \"local-as\": 0, \"peer-as\": 1, \"send-community\": \"NONE\" }, \"timers\": { \"config\": { \"hold-time\": \"180.0\", \"keepalive-interval\": \"60.0\" }, \"state\": { \"hold-time\": \"180.0\", \"keepalive-interval\": \"60.0\" } }, \"transport\": { \"config\": { \"passive-mode\": false }, \"state\": { \"passive-mode\": false } } }, { \"afi-safis\": { \"afi-safi\": [ { \"afi-safi-name\": \"IPV4_UNICAST\", \"config\": { \"afi-safi-name\": \"IPV4_UNICAST\", \"enabled\": false }, \"graceful-restart\": { \"config\": { \"enabled\": false }, \"state\": { \"enabled\": false } }, \"state\": { \"afi-safi-name\": \"IPV4_UNICAST\", \"enabled\": false } }, { \"afi-safi-name\": \"IPV6_UNICAST\", \"config\": { \"afi-safi-name\": \"IPV6_UNICAST\", \"enabled\": false }, \"graceful-restart\": { \"config\": { \"enabled\": false }, \"state\": { \"enabled\": false } }, \"state\": { \"afi-safi-name\": \"IPV6_UNICAST\", \"enabled\": false } } ] }, \"config\": { \"auth-password\": \"\", \"description\": \"\", \"local-as\": 0, \"neighbor-address\": \"20.1.1.1\", \"peer-as\": 65001, \"send-community\": \"NONE\" }, \"ebgp-multihop\": { \"config\": { \"multihop-ttl\": 0 }, \"state\": { \"multihop-ttl\": 0 } }, \"neighbor-address\": \"20.1.1.1\", \"route-reflector\": { \"config\": { \"route-reflector-client\": false }, \"state\": { \"route-reflector-client\": false } }, \"state\": { \"auth-password\": \"\", \"description\": \"\", \"local-as\": 0, \"peer-as\": 65001, \"send-community\": \"NONE\" }, \"timers\": { \"config\": { \"hold-time\": \"180.0\", \"keepalive-interval\": \"60.0\" }, \"state\": { \"hold-time\": \"180.0\", \"keepalive-interval\": \"60.0\" } }, \"transport\": { \"config\": { \"passive-mode\": false }, \"state\": { \"passive-mode\": false } } } ] }","title":"Get the BGP configuration in the default VRF"},{"location":"examples/gnmi-clients/arista-gnmi/#get-bgp-neighbors","text":"gnmi -addr 10.83.13.139 -username admin \\ get '/network-instances/network-instance[name=default]/protocols/protocol[name=BGP]/bgp/neighbors' Reveal output /network-instances/network-instance[name=default]/protocols/protocol[identifier=BGP][name=BGP]/bgp/neighbors: { \"openconfig-network-instance:neighbor\": [ { \"afi-safis\": { \"afi-safi\": [ { \"afi-safi-name\": \"openconfig-bgp-types:IPV6_UNICAST\", \"config\": { \"afi-safi-name\": \"openconfig-bgp-types:IPV6_UNICAST\" }, \"state\": { \"afi-safi-name\": \"openconfig-bgp-types:IPV6_UNICAST\", \"prefixes\": { \"arista-bgp-augments:best-ecmp-paths\": 0, \"arista-bgp-augments:best-paths\": 0, \"installed\": 0, \"received\": 0, \"sent\": 0 } } }, { \"afi-safi-name\": \"openconfig-bgp-types:L2VPN_EVPN\", \"config\": { \"afi-safi-name\": \"openconfig-bgp-types:L2VPN_EVPN\" }, \"state\": { \"afi-safi-name\": \"openconfig-bgp-types:L2VPN_EVPN\", \"prefixes\": { \"arista-bgp-augments:best-ecmp-paths\": 0, \"arista-bgp-augments:best-paths\": 0, \"installed\": 0, \"received\": 0, \"sent\": 0 } } }, { \"afi-safi-name\": \"openconfig-bgp-types:IPV4_UNICAST\", \"config\": { \"afi-safi-name\": \"openconfig-bgp-types:IPV4_UNICAST\" }, \"state\": { \"afi-safi-name\": \"openconfig-bgp-types:IPV4_UNICAST\", \"prefixes\": { \"arista-bgp-augments:best-ecmp-paths\": 0, \"arista-bgp-augments:best-paths\": 0, \"installed\": 0, \"received\": 0, \"sent\": 0 } } } ] }, \"apply-policy\": { \"config\": { \"default-export-policy\": \"REJECT_ROUTE\", \"default-import-policy\": \"REJECT_ROUTE\" }, \"state\": { \"default-export-policy\": \"REJECT_ROUTE\", \"default-import-policy\": \"REJECT_ROUTE\" } }, \"as-path-options\": { \"config\": { \"replace-peer-as\": false }, \"state\": { \"replace-peer-as\": false } }, \"config\": { \"enabled\": true, \"neighbor-address\": \"172.168.14.2\", \"peer-as\": 65002, \"send-community\": \"NONE\" }, \"ebgp-multihop\": { \"config\": { \"enabled\": false, \"multihop-ttl\": 0 }, \"state\": { \"enabled\": false, \"multihop-ttl\": 0 } }, \"neighbor-address\": \"172.168.14.2\", \"state\": { \"enabled\": true, \"established-transitions\": \"2\", \"last-established\": \"1614170027122047488\", \"messages\": { \"received\": { \"UPDATE\": \"2\" }, \"sent\": { \"UPDATE\": \"2\" } }, \"neighbor-address\": \"172.168.14.2\", \"peer-as\": 65002, \"send-community\": \"NONE\", \"session-state\": \"ESTABLISHED\" }, \"transport\": { \"config\": { \"mtu-discovery\": true }, \"state\": { \"mtu-discovery\": true, \"remote-address\": \"172.168.14.2\", \"remote-port\": 0 } } } ] }","title":"Get BGP neighbors"},{"location":"examples/gnmi-clients/arista-gnmi/#get-all-interface-descriptions","text":"gnmi -addr 10.83.13.139:6030 -username admin -password arista \\ get '/interfaces/interface/subinterfaces/subinterface/state/description' /interfaces/interface[name=Ethernet3]/subinterfaces/subinterface[index=0]/state/description: SRV01 /interfaces/interface[name=Ethernet1]/subinterfaces/subinterface[index=0]/state/description: DCI /interfaces/interface[name=Ethernet2]/subinterfaces/subinterface[index=0]/state/description: To Spines","title":"Get all interface descriptions"},{"location":"examples/gnmi-clients/arista-gnmi/#get-an-interfaces-description","text":"gnmi -addr 10.81.117.100:6030 -username admin -password arista \\ get 'interfaces/interface[name=Ethernet1/1]/subinterfaces/subinterface/state/description' /interfaces/interface[name=Ethernet1/1]/subinterfaces/subinterface[index=0]/state/description: \"Tyrion\"","title":"Get an interface's description"},{"location":"examples/gnmi-clients/arista-gnmi/#get-the-operational-status-of-all-interfaces","text":"gnmi -addr 10.83.13.139:6030 -username admin -password arista \\ get 'interfaces/interface/state/oper-status'`","title":"Get the operational status of all interfaces"},{"location":"examples/gnmi-clients/arista-gnmi/#get-all-states-of-an-interface","text":"gnmi -addr 10.83.13.139:6030 -username cvpadmin -password arastra \\ get 'interfaces/interface[name=Ethernet24]/state/'` Reveal output /interfaces/interface[name=Ethernet24]/state: { \"openconfig-interfaces:admin-status\": \"UP\", \"openconfig-interfaces:counters\": { \"in-broadcast-pkts\": \"1\", \"in-discards\": \"0\", \"in-errors\": \"0\", \"in-fcs-errors\": \"0\", \"in-multicast-pkts\": \"70143\", \"in-octets\": \"570132503174\", \"in-unicast-pkts\": \"376128549\", \"out-broadcast-pkts\": \"2\", \"out-discards\": \"0\", \"out-errors\": \"0\", \"out-multicast-pkts\": \"169207\", \"out-octets\": \"569979193348\", \"out-unicast-pkts\": \"376049116\" }, \"openconfig-interfaces:description\": \"\", \"openconfig-interfaces:enabled\": true, \"openconfig-platform-port:hardware-port\": \"Port24\", \"openconfig-interfaces:ifindex\": 24, \"arista-intf-augments:inactive\": false, \"openconfig-interfaces:last-change\": \"1614001155863084032\", \"openconfig-interfaces:loopback-mode\": false, \"openconfig-interfaces:mtu\": 0, \"openconfig-interfaces:name\": \"Ethernet24\", \"openconfig-interfaces:oper-status\": \"UP\", \"openconfig-vlan:tpid\": \"openconfig-vlan-types:TPID_0X8100\", \"openconfig-interfaces:type\": \"iana-if-type:ethernetCsmacd\" }","title":"Get all states of an interface"},{"location":"examples/gnmi-clients/arista-gnmi/#get-an-interfaces-operational-status","text":"gnmi -addr 10.83.13.139:6030 -username cvpadmin -password arastra \\ get 'interfaces/interface[name=Ethernet24]/state/oper-status' Output: /interfaces/interface[name=Ethernet24]/state/oper-status: UP","title":"Get an interface's operational status"},{"location":"examples/gnmi-clients/arista-gnmi/#get-an-interfaces-admin-status","text":"gnmi -addr 10.83.13.139:6030 -username cvpadmin -password arastra \\ get 'interfaces/interface[name=Ethernet24]/state/admin-status'` Output: /interfaces/interface[name=Ethernet24]/state/admin-status: UP","title":"Get an interface's admin status"},{"location":"examples/gnmi-clients/arista-gnmi/#get-the-dom-metrics-of-all-interfaces","text":"gnmi -addr 10.83.13.139:6030 -username cvpadmin -password arastra \\ get \"components/component/transceiver/physical-channels/channel/state/\"","title":"Get the DOM metrics of all interfaces"},{"location":"examples/gnmi-clients/arista-gnmi/#get-the-dom-metrics-of-an-interface","text":"gnmi -addr 10.83.13.139:6030 -username cvpadmin -password arastra \\ get \"components/component[name=Ethernet24 transceiver]/transceiver/physical-channels/channel/state/\" Reveal output /components/component[name=Ethernet24 transceiver]/transceiver/physical-channels/channel[index=0]/state: { \"openconfig-platform-transceiver:index\": 0, \"openconfig-platform-transceiver:input-power\": { \"instant\": \"-0.26\" }, \"openconfig-platform-transceiver:laser-bias-current\": { \"instant\": \"7.49\" }, \"openconfig-platform-transceiver:output-power\": { \"instant\": \"0.32\" } }","title":"Get the DOM metrics of an interface"},{"location":"examples/gnmi-clients/arista-gnmi/#get-per-core-cpu-utilization","text":"gnmi -addr 10.83.13.139:6030 -username cvpadmin -password arastra \\ get 'components/component/cpu' Reveal output /components/component[name=CPU3]/cpu: { \"openconfig-platform-cpu:utilization\": { \"state\": { \"avg\": 18, \"instant\": 16, \"interval\": \"1000000000000\", \"max\": 28, \"max-time\": \"3230106984172745216\", \"min\": 13, \"min-time\": \"3230106514174602752\" } } } /components/component[name=CPU0]/cpu: { \"openconfig-platform-cpu:utilization\": { \"state\": { \"avg\": 17, \"instant\": 16, \"interval\": \"1000000000000\", \"max\": 25, \"max-time\": \"3230106564173730816\", \"min\": 12, \"min-time\": \"3230106394175068672\" } } } /components/component[name=CPU1]/cpu: { \"openconfig-platform-cpu:utilization\": { \"state\": { \"avg\": 18, \"instant\": 17, \"interval\": \"1000000000000\", \"max\": 27, \"max-time\": \"3230107464174793728\", \"min\": 13, \"min-time\": \"3230107334172570624\" } } } /components/component[name=CPU2]/cpu: { \"openconfig-platform-cpu:utilization\": { \"state\": { \"avg\": 17, \"instant\": 21, \"interval\": \"1000000000000\", \"max\": 24, \"max-time\": \"3230106924173756928\", \"min\": 11, \"min-time\": \"3230107394173572608\" } } }","title":"Get per core CPU utilization"},{"location":"examples/gnmi-clients/arista-gnmi/#get-the-availableutilized-memory","text":"gnmi -addr 10.83.13.139:6030 -username cvpadmin -password arastra \\ get 'components/component/state/memory/' Output: /components/component[name=Chassis]/state/memory: { \"openconfig-platform:available\": \"8298774528\", \"openconfig-platform:utilized\": \"7706267648\" }","title":"Get the available/utilized memory"},{"location":"examples/gnmi-clients/arista-gnmi/#get-the-system-environment-temperatures","text":"gnmi -addr 10.83.13.139:6030 -username cvpadmin -password arastra \\ get 'components/component/state/temperature/instant' Reveal output /components/component[name=DomTemperatureSensor49]/state/temperature/instant: 30.49609375 /components/component[name=DomTemperatureSensor25]/state/temperature/instant: 24.69921875 /components/component[name=DomTemperatureSensor40]/state/temperature/instant: 25.5078125 /components/component[name=TempSensorP2/2]/state/temperature/instant: 0.0 /components/component[name=TempSensorP1/3]/state/temperature/instant: 40.0 /components/component[name=TempSensorP2/1]/state/temperature/instant: 0.0 /components/component[name=TempSensorP2/3]/state/temperature/instant: 0.0 /components/component[name=DomTemperatureSensor24]/state/temperature/instant: 24.5 /components/component[name=DomTemperatureSensor26]/state/temperature/instant: 23.73046875 /components/component[name=DomTemperatureSensor54]/state/temperature/instant: 27.26953125 /components/component[name=TempSensorP1/1]/state/temperature/instant: 34.0 /components/component[name=DomTemperatureSensor50]/state/temperature/instant: 27.453125 /components/component[name=TempSensorP1/2]/state/temperature/instant: 25.0 /components/component[name=TempSensor1]/state/temperature/instant: 45.84278576588521 /components/component[name=TempSensor15]/state/temperature/instant: 33.875 /components/component[name=TempSensor18]/state/temperature/instant: 44.625 /components/component[name=TempSensor16]/state/temperature/instant: 22.75 /components/component[name=TempSensor17]/state/temperature/instant: 37.0 /components/component[name=TempSensor14]/state/temperature/instant: 37.0","title":"Get the system environment temperatures"},{"location":"examples/gnmi-clients/arista-gnmi/#eos-native-paths","text":"To get EOS native paths, OCTA has to be enabled as mentioned in the configuration section. Performing GET/SUBSCRIBE actions using EOS native paths require changing the origin to eos_native .","title":"EOS Native paths"},{"location":"examples/gnmi-clients/arista-gnmi/#commonly-used-paths","text":"MAC table: /Smash/bridging/status/smashFdbStatus ARP table: /Smash/arp/status/arpEntry Neighbor table: /Smash/arp/status/neighborEntry IPv4 RIB: /Smash/routing/status/route IPv6 RIB: /Smash/routing6/status/route IPv4 next-hop table: /Smash/routing/status/nexthop IPv6 next-hop table: /Smash/routing6/status/nexthop CPU info: /Kernel/proc/cpu Process statistics: /Kernel/proc/stat System info: /Kernel/sysinfo EOS version: /Eos/image Interface counters: /Smash/counters/ethIntf/<agent>/current/counter Values for <agent> are: 7500-family, 7280-family, 7020-family (Arad/Jericho ASICs): SandCounters 7300-family, 7250-family, 7050-family, 7010 products, 720-family (Trident ASICs): StrataCounters For 7060-family, 7260-family (Tomahawk): Strata-FixedSystem or StrataCounters from 4.22+ 7150-family products (Alta ASICs): FocalPointV2 7160-family products (Cavium/Xpliant ASICs): XpCounters 7170-family products (Barefoot ASIC): BfnCounters","title":"Commonly used paths"},{"location":"examples/gnmi-clients/arista-gnmi/#get-cpu-utilization","text":"gnmi -addr 10.83.13.130:6030 -username admin \\ get origin=eos_native '/Kernel/proc/cpu/utilization/total' Output: /Kernel/proc/cpu/utilization/total/nice: 38446 /Kernel/proc/cpu/utilization/total/system: 2347714 /Kernel/proc/cpu/utilization/total/idle: 247720286 /Kernel/proc/cpu/utilization/total/name: total /Kernel/proc/cpu/utilization/total/util: 7 /Kernel/proc/cpu/utilization/total/user: 16984784","title":"Get CPU utilization"},{"location":"examples/gnmi-clients/arista-gnmi/#get-transceiver-dom-temperature","text":"gnmi -addr 10.83.13.130:6030 -username admin get origin=eos_native \\ 'Sysdb/environment/archer/temperature/status/system/DomTemperatureSensor32'` Reveal output /Sysdb/environment/archer/temperature/status/system/DomTemperatureSensor32/temperature: { \"value\": 32.5 } /Sysdb/environment/archer/temperature/status/system/DomTemperatureSensor32/maxTemperature: { \"value\": 34.88671875 } /Sysdb/environment/archer/temperature/status/system/DomTemperatureSensor32/maxTemperatureTime: 1564757444.339129 /Sysdb/environment/archer/temperature/status/system/DomTemperatureSensor32/name: DomTemperatureSensor32 /Sysdb/environment/archer/temperature/status/system/DomTemperatureSensor32/generationId: 0 /Sysdb/environment/archer/temperature/status/system/DomTemperatureSensor32/hwStatus: ok /Sysdb/environment/archer/temperature/status/system/DomTemperatureSensor32/alertRaised: false /Sysdb/environment/archer/temperature/status/system/DomTemperatureSensor32/alertRaisedCount: 0 /Sysdb/environment/archer/temperature/status/system/DomTemperatureSensor32/lastAlertRaisedTime: 1564194739.259879","title":"Get transceiver DOM temperature"},{"location":"examples/gnmi-clients/arista-gnmi/#get-connectivity-monitor-host-stats","text":"gnmi -addr 10.83.13.139:6030 -username admin get origin=eos_native '/Sysdb/connectivityMonitor/status/hostStatus/' Reveal output /Sysdb/connectivityMonitor/status/hostStatus/wls100_default/key/hostName: wls100 /Sysdb/connectivityMonitor/status/hostStatus/wls100_default/key/vrfName: { \"value\": \"default\" } /Sysdb/connectivityMonitor/status/hostStatus/wls100_default/name: wls100_default /Sysdb/connectivityMonitor/status/hostStatus/wls100_default/defaultStats/packetLoss: 0 /Sysdb/connectivityMonitor/status/hostStatus/wls100_default/defaultStats/httpResponseTime: 0 /Sysdb/connectivityMonitor/status/hostStatus/wls100_default/defaultStats/interfaceName: /Sysdb/connectivityMonitor/status/hostStatus/wls100_default/defaultStats/jitter: 0 /Sysdb/connectivityMonitor/status/hostStatus/wls100_default/defaultStats/latency: 0 /Sysdb/connectivityMonitor/status/hostStatus/wls100_default/ipAddr: \"10.83.13.140\" /Sysdb/connectivityMonitor/status/hostStatus/ats323_management/key/hostName: ats323 /Sysdb/connectivityMonitor/status/hostStatus/ats323_management/key/vrfName: { \"value\": \"management\" } /Sysdb/connectivityMonitor/status/hostStatus/ats323_management/name: ats323_management /Sysdb/connectivityMonitor/status/hostStatus/ats323_management/ipAddr: \"10.83.13.138\" /Sysdb/connectivityMonitor/status/hostStatus/ats323_management/defaultStats/latency: 0.127 /Sysdb/connectivityMonitor/status/hostStatus/ats323_management/defaultStats/jitter: 0.033 /Sysdb/connectivityMonitor/status/hostStatus/ats323_management/defaultStats/packetLoss: 0 /Sysdb/connectivityMonitor/status/hostStatus/ats323_management/defaultStats/httpResponseTime: 21.860306 /Sysdb/connectivityMonitor/status/hostStatus/ats323_management/defaultStats/interfaceName:","title":"Get connectivity monitor host stats"},{"location":"examples/gnmi-clients/arista-gnmi/#gnmi-set-rpc-examples","text":"","title":"gNMI SET RPC Examples"},{"location":"examples/gnmi-clients/arista-gnmi/#openconfig-paths_1","text":"","title":"OpenConfig paths"},{"location":"examples/gnmi-clients/arista-gnmi/#configure-bgp-neighbor","text":"","title":"Configure BGP neighbor"},{"location":"examples/gnmi-clients/arista-gnmi/#configure-neighbor-address-and-peer-as","text":"gnmi -addr 10.83.13.139:6030 -username cvpadmin -password arastra \\ update '/network-instances/network-instance[name=default]/protocols/protocol[name=BGP]/bgp/neighbors/neighbor[neighbor-address=10.10.100.43]' \\ '{\"config\": {\"neighbor-address\":\"10.10.100.43\", \"peer-as\": 123}}'","title":"Configure neighbor address and peer AS"},{"location":"examples/gnmi-clients/arista-gnmi/#configure-neighbor-address-peer-as-and-send-community","text":"gnmi -addr 10.83.28.203:6030 -username arista -password arista update '/network-instances/network-instance[name=default]/protocols/protocol[name=BGP]/bgp/neighbors/neighbor[neighbor-address=10.10.100.43]' \\ '{\"config\": {\"neighbor-address\":\"10.10.100.43\", \"peer-as\": 123, \"enabled\": true, \"send-community\": \"EXTENDED\"}}'","title":"Configure neighbor address, peer AS and send-community"},{"location":"examples/gnmi-clients/arista-gnmi/#create-peer-group","text":"gnmi -addr 10.83.28.203 -username arista -password arista update \\ '/network-instances/network-instance[name=default]/protocols/protocol[name=BGP]/bgp/peer-groups/peer-group[peer-group-name=XYZ]' \\ '{\"config\": {\"peer-group-name\":\"XYZ\", \"local-as\": 114}}'","title":"Create peer group"},{"location":"examples/gnmi-clients/arista-gnmi/#update-the-peer-as","text":"gnmi -addr 10.83.28.203:6030 -username arista -password arista \\ update '/network-instances/network-instance[name=default]/protocols/protocol[name=BGP]/bgp/neighbors/neighbor[neighbor-address=10.10.10.0]/config/peer-as' \\ '110' gnmi -addr 10.83.28.203:6030 -username arista -password arista \\ update '/network-instances/network-instance[name=default]/protocols/protocol[name=BGP]/bgp/neighbors/neighbor[neighbor-address=10.10.10.0]' \\ '{\"config\": {\"peer-as\": 110}}'","title":"Update the peer AS"},{"location":"examples/gnmi-clients/arista-gnmi/#update-the-peer-group","text":"gnmi -addr 10.83.28.203:6030 -username arista -password arista \\ update '/network-instances/network-instance[name=default]/protocols/protocol[name=BGP]/bgp/neighbors/neighbor[neighbor-address=10.10.100.43]/config/peer-group' \\ 'XYZ' gnmi -addr 10.83.28.203:6030 -username arista -password arista \\ update '/network-instances/network-instance[name=default]/protocols/protocol[name=BGP]/bgp/neighbors/neighbor[neighbor-address=10.10.10.0]' \\ '{\"config\": {\"peer-group\": \"XYZ\",\"peer-as\": 143}}'","title":"Update the peer group"},{"location":"examples/gnmi-clients/arista-gnmi/#update-bgp-config-using-json-file","text":"gnmi -addr 10.83.28.203:6030 -username arista -password arista \\ update /network-instances/network-instance[name=default]/protocols/protocol[name=BGP]/bgp' Reveal output { \"neighbors\": { \"neighbor\": [ { \"config\": { \"enabled\": true, \"neighbor-address\": \"10.10.10.154\", \"peer-group\": \"XYZ\" }, \"neighbor-address\": \"10.10.10.154\" }, { \"config\": { \"enabled\": true, \"neighbor-address\": \"10.10.10.157\", \"peer-group\": \"XYZ\" }, \"neighbor-address\": \"10.10.10.157\" } ] }, \"peer-groups\": { \"peer-group\": [ { \"config\": { \"peer-as\": 65002, \"peer-group-name\": \"ABC\" }, \"peer-group-name\": \"ABC\" } ] } }","title":"Update BGP config using json file"},{"location":"examples/gnmi-clients/arista-gnmi/#create-an-acl","text":"gnmi -addr 10.83.28.203:6030 -username admin -password arista \\ update /acl/acl-sets acl2.json` cat acl2.json Reveal output { \"acl-set\": [ { \"config\": { \"name\": \"test\", \"type\": \"ACL_IPV4\" }, \"name\": \"test\", \"type\": \"ACL_IPV4\", \"acl-entries\": { \"acl-entry\": [ { \"sequence-id\": 10, \"actions\": { \"config\": { \"forwarding-action\": \"DROP\" } }, \"config\": { \"sequence-id\": 10 }, \"ipv4\": { \"config\": { \"destination-address\": \"1.2.3.4/12\", \"source-address\": \"0.0.0.0/0\" } } } ] } } ] } This creates ip access-list test 10 deny ip any 1.0.0.0/12","title":"Create an ACL"},{"location":"examples/gnmi-clients/arista-gnmi/#shutdown-an-interface","text":"gnmi -addr 10.83.13.139:6030 -username arista -password arista \\ update '/interfaces/interface[name=Ethernet1]/config/enabled' \\ 'false'","title":"Shutdown an interface"},{"location":"examples/gnmi-clients/arista-gnmi/#bring-up-an-interface","text":"gnmi -addr 10.83.13.139:6030 -username arista -password arista \\ update '/interfaces/interface[name=Ethernet1]/config/enabled' \\ 'true'","title":"Bring up an interface"},{"location":"examples/gnmi-clients/arista-gnmi/#gnmi-subscribe-rpc-examples","text":"","title":"gNMI SUBSCRIBE RPC Examples"},{"location":"examples/gnmi-clients/arista-gnmi/#openconfig-paths_2","text":"","title":"OpenConfig paths"},{"location":"examples/gnmi-clients/arista-gnmi/#subscribe-to-all-bgp-neighbor-states","text":"gnmi -addr 10.83.28.203 -username arista -password arista \\ subscribe '/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/state'","title":"Subscribe to all BGP neighbor states"},{"location":"examples/gnmi-clients/arista-gnmi/#subscribe-to-specific-bgp-neighbor-state","text":"gnmi -addr 10.83.28.203 -username arista -password arista \\ subscribe '/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor[neighbor-address=10.10.10.5]/state'","title":"Subscribe to specific BGP neighbor state"},{"location":"examples/gnmi-clients/arista-gnmi/#subscribe-with-stream-mode-sample-and-interval","text":"gnmi -addr 10.83.13.214:6030 -username admin -password arista \\ -sample_interval 5s -stream_mode sample \\ subscribe \\ '/network-instances/network-instance[name=Tenant_A_WEB_Zone]/protocols/protocol[identifier=BGP][name=BGP]/bgp/neighbors/neighbor[neighbor-address=10.255.251.1]/afi-safis/afi-safi[afi-safi-name=openconfig-bgp-types:IPV4_UNICAST]/state/prefixes/received'","title":"Subscribe with stream mode sample and interval"},{"location":"examples/gnmi-clients/gnmic/","text":"overview The following examples are used to find openconfig paths within Arista EOS using the gNMIC binary . There will be some commands which will specify one liners which will have the address of the gNMI target and some commands which will use the .gnmic.yaml file which will have the target information inside declared. All outputs will be redirected to the outputs file with the .json extension so they are easier to view within a text editor. Download && install gnmic To install run: curl -sL https://github.com/karimra/gnmic/raw/master/install.sh | sudo bash To get the version run: gnmi_stuff$ gnmic version Output: version : 0.17.0 commit : 278661e date : 2021-07-14T07:29:14Z gitURL : https://github.com/karimra/gnmic docs : https://gnmic.kmrd.dev Device config management api gnmi transport grpc default provider eos-native ceos3# show management api gnmi Octa: enabled Enabled: Yes Server: running on port 6030 SSL Profile: none QoS DSCP: none Authorization Required:No gnmic -a 127.0.0.1:6030 -u admin -p admin --insecure capabilities \\ >> outputs/capabilities.json gNMI GET RPC Examples OpenConfig paths Get all information gnmic -a 10.83.13.214:6030 -u cvpadmin -p arastra --insecure --gzip get --path \"/\" Get the BGP configuration in the default VRF gnmic -a 10.83.13.214:6030 -u cvpadmin -p arastra --insecure --gzip get --path \\ '/network-instances/network-instance[name=default]/protocols/protocol[identifier=BGP][name=BGP]/bgp'` Get BGP neighbors gnmi -addr 10.83.13.139 -username admin get \\ '/network-instances/network-instance[name=default]/protocols/protocol[name=BGP]/bgp/neighbors' Get all interface descriptions gnmic -a 10.83.13.214:6030 -u cvpadmin -p arastra --insecure --gzip get --path \\ '/interfaces/interface/subinterfaces/subinterface/state/description' Get an interface's description gnmic -a 10.83.13.214:6030 -u cvpadmin -p arastra --insecure --gzip get --path \\ 'interfaces/interface[name=Ethernet1]/subinterfaces/subinterface/state/description' [ { \"timestamp\": 1626293671204274106, \"time\": \"2021-07-14T21:14:31.204274106+01:00\", \"updates\": [ { \"Path\": \"interfaces/interface[name=Ethernet1]/subinterfaces/subinterface[index=0]/state/description\", \"values\": { \"interfaces/interface/subinterfaces/subinterface/state/description\": \"To-SPINE1\" } } ] } ] Get the operational status of all interfaces gnmic -a 10.83.13.214:6030 -u cvpadmin -p arastra --insecure --gzip get --path \\ 'interfaces/interface/state/oper-status' Reveal output [ { \"timestamp\": 1626293641102904713, \"time\": \"2021-07-14T21:14:01.102904713+01:00\", \"updates\": [ { \"Path\": \"interfaces/interface[name=Management1]/state/oper-status\", \"values\": { \"interfaces/interface/state/oper-status\": \"UP\" } }, { \"Path\": \"interfaces/interface[name=Ethernet1]/state/oper-status\", \"values\": { \"interfaces/interface/state/oper-status\": \"UP\" } }, { \"Path\": \"interfaces/interface[name=Ethernet5]/state/oper-status\", \"values\": { \"interfaces/interface/state/oper-status\": \"UP\" } }, { \"Path\": \"interfaces/interface[name=Ethernet4]/state/oper-status\", \"values\": { \"interfaces/interface/state/oper-status\": \"UP\" } }, { \"Path\": \"interfaces/interface[name=Ethernet3]/state/oper-status\", \"values\": { \"interfaces/interface/state/oper-status\": \"UP\" } }, { \"Path\": \"interfaces/interface[name=Ethernet2]/state/oper-status\", \"values\": { \"interfaces/interface/state/oper-status\": \"UP\" } }, { \"Path\": \"interfaces/interface[name=Port-Channel4]/state/oper-status\", \"values\": { \"interfaces/interface/state/oper-status\": \"UP\" } }, { \"Path\": \"interfaces/interface[name=Port-Channel3]/state/oper-status\", \"values\": { \"interfaces/interface/state/oper-status\": \"UP\" } } ] } ] Get all states of an interface gnmic -a 10.83.13.214:6030 -u cvpadmin -p arastra --insecure --gzip get --path \\ 'interfaces/interface[name=Ethernet1]/state/' Reveal output [[ { \"timestamp\": 1626293429376469348, \"time\": \"2021-07-14T21:10:29.376469348+01:00\", \"updates\": [ { \"Path\": \"interfaces/interface[name=Ethernet1]/state\", \"values\": { \"interfaces/interface/state\": { \"arista-intf-augments:inactive\": false, \"openconfig-interfaces:admin-status\": \"UP\", \"openconfig-interfaces:counters\": { \"in-broadcast-pkts\": \"0\", \"in-discards\": \"0\", \"in-errors\": \"0\", \"in-fcs-errors\": \"0\", \"in-multicast-pkts\": \"48\", \"in-octets\": \"111398\", \"in-unicast-pkts\": \"1460\", \"out-broadcast-pkts\": \"1\", \"out-discards\": \"0\", \"out-errors\": \"0\", \"out-multicast-pkts\": \"49\", \"out-octets\": \"117389\", \"out-unicast-pkts\": \"1457\" }, \"openconfig-interfaces:description\": \"To-SPINE1\", \"openconfig-interfaces:ifindex\": 1, \"openconfig-interfaces:last-change\": \"1626292006733589760\", \"openconfig-interfaces:mtu\": 0, \"openconfig-interfaces:name\": \"Ethernet1\", \"openconfig-interfaces:oper-status\": \"UP\", \"openconfig-interfaces:type\": \"iana-if-type:ethernetCsmacd\", \"openconfig-platform-port:hardware-port\": \"Port1\" } } } ] } ] Get an interface's operational status gnmic -a 10.83.13.214:6030 -u cvpadmin -p arastra --insecure --gzip get --path \\ 'interfaces/interface[name=Ethernet24]/state/oper-status' [ { \"timestamp\": 1626293414057239130, \"time\": \"2021-07-14T21:10:14.05723913+01:00\", \"updates\": [ { \"Path\": \"interfaces/interface[name=Ethernet2]/state/oper-status\", \"values\": { \"interfaces/interface/state/oper-status\": \"UP\" } } ] } ] Get an interface's admin status gnmic -a 10.83.13.214:6030 -u cvpadmin -p arastra --insecure --gzip get --path \\ 'interfaces/interface[name=Ethernet1]/state/admin-status' [ { \"timestamp\": 1626293085257457373, \"time\": \"2021-07-14T21:04:45.257457373+01:00\", \"updates\": [ { \"Path\": \"interfaces/interface[name=Ethernet1]/state/admin-status\", \"values\": { \"interfaces/interface/state/admin-status\": \"UP\" } } ] } ] Get the DOM metrics of all interfaces gnmic -a 10.83.13.214:6030 -u cvpadmin -p arastra --insecure --gzip get --path \\ \"components/component/transceiver/physical-channels/channel/state/\" Reveal output [ { \"timestamp\": 1626293085257457373, \"time\": \"2021-07-14T21:04:45.257457373+01:00\", \"updates\": [ { \"Path\": \"components/component[name=Ethernet49 transceiver]/transceiver/physical-channels/channel[index=0]/state\", \"values\": { \"components/component/transceiver/physical-channels/channel/state\": { \"openconfig-platform-transceiver:index\": 0, \"openconfig-platform-transceiver:input-power\": { \"instant\": \"1.15\" }, \"openconfig-platform-transceiver:laser-bias-current\": { \"instant\": \"0.0\" }, \"openconfig-platform-transceiver:output-power\": {} } } }, { \"Path\": \"components/component[name=Ethernet50 transceiver]/transceiver/physical-channels/channel[index=0]/state\", \"values\": { \"components/component/transceiver/physical-channels/channel/state\": { \"openconfig-platform-transceiver:index\": 0, \"openconfig-platform-transceiver:input-power\": { \"instant\": \"1.11\" }, \"openconfig-platform-transceiver:laser-bias-current\": { \"instant\": \"0.0\" }, \"openconfig-platform-transceiver:output-power\": {} } } } ] } ] Get the DOM metrics of an interface gnmic -a 10.83.13.214:6030 -u cvpadmin -p arastra --insecure --gzip get --path \\ \"components/component[name=Ethernet49 transceiver]/transceiver/physical-channels/channel/state/\" Reveal output [ { \"time\": \"1970-01-01T01:00:00+01:00\", \"updates\": [ { \"Path\": \"components/component[name=Ethernet49 transceiver]/transceiver/physical-channels/channel[index=0]/state\", \"values\": { \"components/component/transceiver/physical-channels/channel/state\": { \"openconfig-platform-transceiver:index\": 0, \"openconfig-platform-transceiver:input-power\": { \"instant\": \"1.08\" }, \"openconfig-platform-transceiver:laser-bias-current\": { \"instant\": \"0.0\" }, \"openconfig-platform-transceiver:output-power\": {} } } } ] } ] Get per core CPU utilization gnmic -a 10.83.13.214:6030 -u cvpadmin -p arastra --insecure --gzip get --path \\ 'components/component/cpu' Reveal output [ { \"timestamp\": 1626294810779644595, \"time\": \"2021-07-14T21:33:30.779644595+01:00\", \"updates\": [ { \"Path\": \"components/component[name=CPU1]/cpu\", \"values\": { \"components/component/cpu\": { \"openconfig-platform-cpu:utilization\": { \"state\": { \"avg\": 6, \"instant\": 6, \"interval\": \"1000000000000\", \"max\": 14, \"max-time\": \"3252585270429488128\", \"min\": 2, \"min-time\": \"3252586330424618496\" } } } } }, { \"Path\": \"components/component[name=CPU0]/cpu\", \"values\": { \"components/component/cpu\": { \"openconfig-platform-cpu:utilization\": { \"state\": { \"avg\": 5, \"instant\": 7, \"interval\": \"1000000000000\", \"max\": 13, \"max-time\": \"3252586170423993344\", \"min\": 1, \"min-time\": \"3252585340433252352\" } } } } } ] } ] Get the available/utilized memory gnmic -a 10.83.13.214:6030 -u cvpadmin -p arastra --insecure --gzip get --path \\ 'components/component/state/memory/' [ { \"timestamp\": 1626294846423115892, \"time\": \"2021-07-14T21:34:06.423115892+01:00\", \"updates\": [ { \"Path\": \"components/component[name=Chassis]/state/memory\", \"values\": { \"components/component/state/memory\": { \"openconfig-platform:available\": \"4098412544\", \"openconfig-platform:utilized\": \"4018016256\" } } } ] } ] Get the system environment temperatures gnmic -a 10.83.13.214:6030 -u cvpadmin -p arastra --insecure --gzip get --path \\ 'components/component/state/temperature/instant' Reveal output [ { \"timestamp\": 1626294876186613578, \"time\": \"2021-07-14T21:34:36.186613578+01:00\" \"updates\": [ { \"Path\": \"components/component[name=DomTemperatureSensor50]/state/temperature/instant\", \"values\": { \"components/component/state/temperature/instant\": { \"digits\": 2709375, \"precision\": 5 } } }, { \"Path\": \"components/component[name=DomTemperatureSensor49]/state/temperature/instant\", \"values\": { \"components/component/state/temperature/instant\": { \"digits\": 27140625, \"precision\": 6 } } }, { \"Path\": \"components/component[name=TempSensor7]/state/temperature/instant\", \"values\": { \"components/component/state/temperature/instant\": { \"digits\": 41168000000000006, \"precision\": 15 } } }, { \"Path\": \"components/component[name=TempSensor8]/state/temperature/instant\", \"values\": { \"components/component/state/temperature/instant\": { \"digits\": 4225279999999998, \"precision\": 14 } } }, { \"Path\": \"components/component[name=TempSensor9]/state/temperature/instant\", \"values\": { \"components/component/state/temperature/instant\": { \"digits\": 4062560000000002, \"precision\": 14 } } }, { \"Path\": \"components/component[name=TempSensor1]/state/temperature/instant\", \"values\": { \"components/component/state/temperature/instant\": { \"digits\": 39141723894742796, \"precision\": 15 } } }, { \"Path\": \"components/component[name=TempSensor6]/state/temperature/instant\", \"values\": { \"components/component/state/temperature/instant\": { \"digits\": 23875, \"precision\": 3 } } }, { \"Path\": \"components/component[name=TempSensor3]/state/temperature/instant\", \"values\": { \"components/component/state/temperature/instant\": { \"digits\": 21 } } }, { \"Path\": \"components/component[name=TempSensor4]/state/temperature/instant\", \"values\": { \"components/component/state/temperature/instant\": { \"digits\": 1725, \"precision\": 2 } } }, { \"Path\": \"components/component[name=TempSensor5]/state/temperature/instant\", \"values\": { \"components/component/state/temperature/instant\": { \"digits\": 29 } } }, { \"Path\": \"components/component[name=TempSensor2]/state/temperature/instant\", \"values\": { \"components/component/state/temperature/instant\": { \"digits\": 32 } } } ] } ] gNMI SUBSCRIBE RPC Examples OpenConfig paths Subscribe to all BGP neighbor states gnmic -a 10.83.13.214:6030 -u cvpadmin -p arastra --insecure --gzip subscribe --path \\ '/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/state' Reveal output { \"source\": \"10.83.13.214:6030\", \"subscription-name\": \"default-1626302647\", \"timestamp\": 1626292010055258009, \"time\": \"2021-07-14T20:46:50.055258009+01:00\", \"updates\": [ { \"Path\": \"network-instances/network-instance[name=default]/protocols/protocol[identifier=BGP][name=BGP]/bgp/neighbors/neighbor[neighbor-address=172.18.255.42]/state/messages/sent/UPDATE\", \"values\": { \"network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/state/messages/sent/UPDATE\": 8 } } ] } { \"source\": \"10.83.13.214:6030\", \"subscription-name\": \"default-1626302647\", \"timestamp\": 1626292008053994815, \"time\": \"2021-07-14T20:46:48.053994815+01:00\", \"updates\": [ { \"Path\": \"network-instances/network-instance[name=default]/protocols/protocol[identifier=BGP][name=BGP]/bgp/neighbors/neighbor[neighbor-address=172.18.255.42]/state/established-transitions\", \"values\": { \"network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/state/established-transitions\": 1 } } ] } Subscribe to specific BGP neighbor state gnmic -a 10.83.13.214:6030 -u cvpadmin -p arastra --insecure --gzip subscribe --path \\ 'network-instances/network-instance[name=Tenant_A_WEB_Zone]/protocols/protocol[identifier=BGP][name=BGP]/bgp/neighbors/neighbor[neighbor-address=10.255.251.21]/state' Reveal output { \"source\": \"10.83.13.214:6030\", \"subscription-name\": \"default-1626303017\", \"timestamp\": 1626302991598465536, \"time\": \"2021-07-14T23:49:51.598465536+01:00\", \"updates\": [ { \"Path\": \"network-instances/network-instance[name=Tenant_A_WEB_Zone]/protocols/protocol[identifier=BGP][name=BGP]/bgp/neighbors/neighbor[neighbor-address=10.255.251.21]/state/last-established\", \"values\": { \"network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/state/last-established\": 1626302991563603200 } } ] } Subscribe with stream mode sample and interval gnmic -a 10.83.13.214:6030 -u cvpadmin -p arastra --insecure --gzip --sample-interval 5s --stream-mode sample subscribe --path \\ '/network-instances/network-instance[name=Tenant_A_WEB_Zone]/protocols/protocol[identifier=BGP][name=BGP]/bgp/neighbors/neighbor[neighbor-address=10.255.251.21]/afi-safis/afi-safi[afi-safi-name=openconfig-bgp-types:IPV4_UNICAST]/state/prefixes/received' Reveal output { \"source\": \"10.83.13.214:6030\", \"subscription-name\": \"default-1626303393\", \"timestamp\": 1626303158135414182, \"time\": \"2021-07-14T23:52:38.135414182+01:00\", \"updates\": [ { \"Path\": \"network-instances/network-instance[name=Tenant_A_WEB_Zone]/protocols/protocol[identifier=BGP][name=BGP]/bgp/neighbors/neighbor[neighbor-address=10.255.251.21]/afi-safis/afi-safi[afi-safi-name=IPV4_UNICAST]/state/prefixes/received\", \"values\": { \"network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/state/prefixes/received\": 5 } } ] } { \"source\": \"10.83.13.214:6030\", \"subscription-name\": \"default-1626303393\", \"timestamp\": 1626303158135414182, \"time\": \"2021-07-14T23:52:38.135414182+01:00\", \"updates\": [ { \"Path\": \"network-instances/network-instance[name=Tenant_A_WEB_Zone]/protocols/protocol[identifier=BGP][name=BGP]/bgp/neighbors/neighbor[neighbor-address=10.255.251.21]/afi-safis/afi-safi[afi-safi-name=IPV4_UNICAST]/state/prefixes/received\", \"values\": { \"network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/state/prefixes/received\": 5 } } ] } Subscribe to interface counters and save them to a file gnmic -a 127.0.0.1:6030 -u admin -p admin --insecure subscribe --path \\ \"/interfaces/interface/state/counters\" >> outputs/interface_state.json gNMI SET RPC Examples OpenConfig paths Configure BGP neighbor address and peer AS gnmic -a 10.83.13.214:6030 -u cvpadmin -p arastra --insecure --gzip set \\ --update-path '/network-instances/network-instance[name=default]/protocols/protocol[name=BGP]/bgp/neighbors/neighbor[neighbor-address=10.10.100.43]' \\ --update-file value.json value.json : {\"config\": {\"neighbor-address\":\"10.10.100.43\", \"peer-as\": 123}} Output: { \"timestamp\": 1626305876151537555, \"time\": \"2021-07-15T00:37:56.151537555+01:00\", \"results\": [ { \"operation\": \"UPDATE\", \"path\": \"network-instances/network-instance[name=default]/protocols/protocol[name=BGP]/bgp/neighbors/neighbor[neighbor-address=10.10.100.43]\" } ] } Configure BGP neighbor address, peer AS and send-community gnmic -a 10.83.13.214:6030 -u cvpadmin -p arastra --insecure --gzip set \\ --update-path '/network-instances/network-instance[name=default]/protocols/protocol[name=BGP]/bgp/neighbors/neighbor[neighbor-address=10.10.100.43]' \\ --update-file value.json value.json : {\"config\": {\"neighbor-address\":\"10.10.100.43\", \"peer-as\": 123, \"enabled\": true, \"send-community\": \"EXTENDED\"}} Output: { \"timestamp\": 1626305480401353997, \"time\": \"2021-07-15T00:31:20.401353997+01:00\", \"results\": [ { \"operation\": \"UPDATE\", \"path\": \"network-instances/network-instance[name=default]/protocols/protocol[name=BGP]/bgp/neighbors/neighbor[neighbor-address=10.10.100.43]\" } ] } Create BGP peer group gnmic -a 10.83.13.214:6030 -u cvpadmin -p arastra --insecure --gzip set \\ --update-path '/network-instances/network-instance[name=default]/protocols/protocol[name=BGP]/bgp/peer-groups/peer-group[peer-group-name=XYZ]' \\ --update-file value.json value.json : {\"config\": {\"peer-group-name\":\"XYZ\", \"local-as\": 114}} Update BGP peer AS gnmic -a 10.83.13.214:6030 -u cvpadmin -p arastra --insecure --gzip set \\ --update-path '/network-instances/network-instance[name=default]/protocols/protocol[name=BGP]/bgp/neighbors/neighbor[neighbor-address=10.10.100.43]/config/peer-as' \\ --update-value '110' Output: { \"timestamp\": 1626306067189329813, \"time\": \"2021-07-15T00:41:07.189329813+01:00\", \"results\": [ { \"operation\": \"UPDATE\", \"path\": \"network-instances/network-instance[name=default]/protocols/protocol[name=BGP]/bgp/neighbors/neighbor[neighbor-address=10.10.100.43]/config/peer-as\" } ] } Update BGP peer group gnmic -a 10.83.13.214:6030 -u cvpadmin -p arastra --insecure --gzip set \\ --update-path '/network-instances/network-instance[name=default]/protocols/protocol[name=BGP]/bgp/neighbors/neighbor[neighbor-address=10.10.100.43]/config/peer-group' \\ --update-value 'XYZ' Output: { \"timestamp\": 1626306067189329813, \"time\": \"2021-07-15T00:41:07.189329813+01:00\", \"results\": [ { \"operation\": \"UPDATE\", \"path\": \"network-instances/network-instance[name=default]/protocols/protocol[name=BGP]/bgp/neighbors/neighbor[neighbor-address=10.10.100.43]/config/peer-as\" } ] } Create an ACL gnmic -a 10.83.13.108:6030 -u cvpadmin -p arastra --insecure --gzip set \\ --update-path /acl/acl-sets \\ --update-file acl2.json Output: { \"timestamp\": 1626307972085688242, \"time\": \"2021-07-15T01:12:52.085688242+01:00\", \"results\": [ { \"operation\": \"UPDATE\", \"path\": \"acl/acl-sets\" } ] } acl2.json { \"acl-set\": [ { \"config\": { \"name\": \"test\", \"type\": \"ACL_IPV4\" }, \"name\": \"test\", \"type\": \"ACL_IPV4\", \"acl-entries\": { \"acl-entry\": [ { \"sequence-id\": 10, \"actions\": { \"config\": { \"forwarding-action\": \"DROP\" } }, \"config\": { \"sequence-id\": 10 }, \"ipv4\": { \"config\": { \"destination-address\": \"1.2.3.4/12\", \"source-address\": \"0.0.0.0/0\" } } } ] } } ] } This creates ip access-list test 10 deny ip any 1.0.0.0/12 Shutdown an interface gnmic -a 10.83.13.108:6030 -u cvpadmin -p arastra --insecure --gzip set \\ --update-path '/interfaces/interface[name=Ethernet1]/config/enabled' \\ --update-value 'false' { \"timestamp\": 1626309145489047571, \"time\": \"2021-07-15T01:32:25.489047571+01:00\", \"results\": [ { \"operation\": \"UPDATE\", \"path\": \"interfaces/interface[name=Ethernet1]/config/enabled\" } ] } Bring up an interface gnmic -a 10.83.13.108:6030 -u cvpadmin -p arastra --insecure --gzip set \\ --update-path '/interfaces/interface[name=Ethernet1]/config/enabled' \\ --update-value 'true' { \"timestamp\": 1626309156607307596, \"time\": \"2021-07-15T01:32:36.607307596+01:00\", \"results\": [ { \"operation\": \"UPDATE\", \"path\": \"interfaces/interface[name=Ethernet1]/config/enabled\" } ] } EOS Native paths To get EOS native paths, OCTA has to be enabled as mentioned in the configuration section. Performing GET/SUBSCRIBE actions using EOS native paths require changing the origin to eos_native . Commonly used paths MAC table: /Smash/bridging/status/smashFdbStatus ARP table: /Smash/arp/status/arpEntry Neighbor table: /Smash/arp/status/neighborEntry IPv4 RIB: /Smash/routing/status/route IPv6 RIB: /Smash/routing6/status/route IPv4 next-hop table: /Smash/routing/status/nexthop IPv6 next-hop table: /Smash/routing6/status/nexthop CPU info: /Kernel/proc/cpu Process statistics: /Kernel/proc/stat System info: /Kernel/sysinfo EOS version: /Eos/image Interface counters: /Smash/counters/ethIntf/<agent>/current/counter Values for <agent> are: 7500-family, 7280-family, 7020-family (Arad/Jericho ASICs): SandCounters 7300-family, 7250-family, 7050-family, 7010 products, 720-family (Trident ASICs): StrataCounters For 7060-family, 7260-family (Tomahawk): Strata-FixedSystem or StrataCounters from 4.22+ 7150-family products (Alta ASICs): FocalPointV2 7160-family products (Cavium/Xpliant ASICs): XpCounters 7170-family products (Barefoot ASIC): BfnCounters Get CPU utilization gnmic -a 10.83.13.108:6030 -u cvpadmin -p arastra --insecure --gzip get --path \\ 'eos_native:/Kernel/proc/cpu/utilization/total' Reveal output [ { \"timestamp\": 1626291721294738334, \"time\": \"2021-07-14T20:42:01.294738334+01:00\", \"prefix\": \"eos_native:Kernel/proc/cpu/utilization/total\", \"updates\": [ { \"Path\": \"name\", \"values\": { \"name\": \"total\" } }, { \"Path\": \"nice\", \"values\": { \"nice\": 28845 } }, { \"Path\": \"util\", \"values\": { \"util\": 41 } }, { \"Path\": \"user\", \"values\": { \"user\": 32058347 } }, { \"Path\": \"system\", \"values\": { \"system\": 4597389 } }, { \"Path\": \"idle\", \"values\": { \"idle\": 76373566 } } ] } ] Get transceiver DOM temperature gnmic -a 127.0.0.1:6030 -u admin -p admin --insecure --gzip get --path \\ eos_native:/Sysdb/hardware/archer/xcvr/status >> outputs/doms.json Get EOS image version gnmic -a 127.0.0.1:6030 -u admin -p admin --insecure --gzip get \\ --path eos_native:/Eos/image >> outputs/eos_image.json Cli origin Get the running config gnmic -a 127.0.0.1:6030 -u admin -p admin --insecure get \\ --path \"cli:/show running-config\" >> outputs/outputs.json Get the total route count gnmic -a 127.0.0.1:6030 -u admin -p admin --insecure get \\ --path \"cli:/show ip route summary\" \\ | jq '.[0].updates[0].values.\"show ip route summary\".totalRoutes' Misc Save all status states to a file gnmic -a 127.0.0.1:6030 -u admin -p admin --insecure get \\ --path \".../state/...\" >> outputs/states.json Save all config states to a file gnmic -a 127.0.0.1:6030 -u admin -p admin --insecure get \\ --path \".../config/...\" >> outputs/configs.json Save network instance states to a file gnmic -a 127.0.0.1:6030 -u admin -p admin --insecure get --path \\ /network-instances/network-instance >> outputs/network-instances.json Save BGP states to a file gnmic -a 127.0.0.1:6030 -u admin -p admin --insecure get --path \\ /network-instances/network-instance[name=default]/protocols/protocol[name=BGP]\\ >> outputs/bgp.json","title":"gnmic"},{"location":"examples/gnmi-clients/gnmic/#overview","text":"The following examples are used to find openconfig paths within Arista EOS using the gNMIC binary . There will be some commands which will specify one liners which will have the address of the gNMI target and some commands which will use the .gnmic.yaml file which will have the target information inside declared. All outputs will be redirected to the outputs file with the .json extension so they are easier to view within a text editor.","title":"overview"},{"location":"examples/gnmi-clients/gnmic/#download-install-gnmic","text":"To install run: curl -sL https://github.com/karimra/gnmic/raw/master/install.sh | sudo bash To get the version run: gnmi_stuff$ gnmic version Output: version : 0.17.0 commit : 278661e date : 2021-07-14T07:29:14Z gitURL : https://github.com/karimra/gnmic docs : https://gnmic.kmrd.dev","title":"Download &amp;&amp; install gnmic"},{"location":"examples/gnmi-clients/gnmic/#device-config","text":"management api gnmi transport grpc default provider eos-native ceos3# show management api gnmi Octa: enabled Enabled: Yes Server: running on port 6030 SSL Profile: none QoS DSCP: none Authorization Required:No gnmic -a 127.0.0.1:6030 -u admin -p admin --insecure capabilities \\ >> outputs/capabilities.json","title":"Device config"},{"location":"examples/gnmi-clients/gnmic/#gnmi-get-rpc-examples","text":"","title":"gNMI GET RPC Examples"},{"location":"examples/gnmi-clients/gnmic/#openconfig-paths","text":"","title":"OpenConfig paths"},{"location":"examples/gnmi-clients/gnmic/#get-all-information","text":"gnmic -a 10.83.13.214:6030 -u cvpadmin -p arastra --insecure --gzip get --path \"/\"","title":"Get all information"},{"location":"examples/gnmi-clients/gnmic/#get-the-bgp-configuration-in-the-default-vrf","text":"gnmic -a 10.83.13.214:6030 -u cvpadmin -p arastra --insecure --gzip get --path \\ '/network-instances/network-instance[name=default]/protocols/protocol[identifier=BGP][name=BGP]/bgp'`","title":"Get the BGP configuration in the default VRF"},{"location":"examples/gnmi-clients/gnmic/#get-bgp-neighbors","text":"gnmi -addr 10.83.13.139 -username admin get \\ '/network-instances/network-instance[name=default]/protocols/protocol[name=BGP]/bgp/neighbors'","title":"Get BGP neighbors"},{"location":"examples/gnmi-clients/gnmic/#get-all-interface-descriptions","text":"gnmic -a 10.83.13.214:6030 -u cvpadmin -p arastra --insecure --gzip get --path \\ '/interfaces/interface/subinterfaces/subinterface/state/description'","title":"Get all interface descriptions"},{"location":"examples/gnmi-clients/gnmic/#get-an-interfaces-description","text":"gnmic -a 10.83.13.214:6030 -u cvpadmin -p arastra --insecure --gzip get --path \\ 'interfaces/interface[name=Ethernet1]/subinterfaces/subinterface/state/description' [ { \"timestamp\": 1626293671204274106, \"time\": \"2021-07-14T21:14:31.204274106+01:00\", \"updates\": [ { \"Path\": \"interfaces/interface[name=Ethernet1]/subinterfaces/subinterface[index=0]/state/description\", \"values\": { \"interfaces/interface/subinterfaces/subinterface/state/description\": \"To-SPINE1\" } } ] } ]","title":"Get an interface's description"},{"location":"examples/gnmi-clients/gnmic/#get-the-operational-status-of-all-interfaces","text":"gnmic -a 10.83.13.214:6030 -u cvpadmin -p arastra --insecure --gzip get --path \\ 'interfaces/interface/state/oper-status' Reveal output [ { \"timestamp\": 1626293641102904713, \"time\": \"2021-07-14T21:14:01.102904713+01:00\", \"updates\": [ { \"Path\": \"interfaces/interface[name=Management1]/state/oper-status\", \"values\": { \"interfaces/interface/state/oper-status\": \"UP\" } }, { \"Path\": \"interfaces/interface[name=Ethernet1]/state/oper-status\", \"values\": { \"interfaces/interface/state/oper-status\": \"UP\" } }, { \"Path\": \"interfaces/interface[name=Ethernet5]/state/oper-status\", \"values\": { \"interfaces/interface/state/oper-status\": \"UP\" } }, { \"Path\": \"interfaces/interface[name=Ethernet4]/state/oper-status\", \"values\": { \"interfaces/interface/state/oper-status\": \"UP\" } }, { \"Path\": \"interfaces/interface[name=Ethernet3]/state/oper-status\", \"values\": { \"interfaces/interface/state/oper-status\": \"UP\" } }, { \"Path\": \"interfaces/interface[name=Ethernet2]/state/oper-status\", \"values\": { \"interfaces/interface/state/oper-status\": \"UP\" } }, { \"Path\": \"interfaces/interface[name=Port-Channel4]/state/oper-status\", \"values\": { \"interfaces/interface/state/oper-status\": \"UP\" } }, { \"Path\": \"interfaces/interface[name=Port-Channel3]/state/oper-status\", \"values\": { \"interfaces/interface/state/oper-status\": \"UP\" } } ] } ]","title":"Get the operational status of all interfaces"},{"location":"examples/gnmi-clients/gnmic/#get-all-states-of-an-interface","text":"gnmic -a 10.83.13.214:6030 -u cvpadmin -p arastra --insecure --gzip get --path \\ 'interfaces/interface[name=Ethernet1]/state/' Reveal output [[ { \"timestamp\": 1626293429376469348, \"time\": \"2021-07-14T21:10:29.376469348+01:00\", \"updates\": [ { \"Path\": \"interfaces/interface[name=Ethernet1]/state\", \"values\": { \"interfaces/interface/state\": { \"arista-intf-augments:inactive\": false, \"openconfig-interfaces:admin-status\": \"UP\", \"openconfig-interfaces:counters\": { \"in-broadcast-pkts\": \"0\", \"in-discards\": \"0\", \"in-errors\": \"0\", \"in-fcs-errors\": \"0\", \"in-multicast-pkts\": \"48\", \"in-octets\": \"111398\", \"in-unicast-pkts\": \"1460\", \"out-broadcast-pkts\": \"1\", \"out-discards\": \"0\", \"out-errors\": \"0\", \"out-multicast-pkts\": \"49\", \"out-octets\": \"117389\", \"out-unicast-pkts\": \"1457\" }, \"openconfig-interfaces:description\": \"To-SPINE1\", \"openconfig-interfaces:ifindex\": 1, \"openconfig-interfaces:last-change\": \"1626292006733589760\", \"openconfig-interfaces:mtu\": 0, \"openconfig-interfaces:name\": \"Ethernet1\", \"openconfig-interfaces:oper-status\": \"UP\", \"openconfig-interfaces:type\": \"iana-if-type:ethernetCsmacd\", \"openconfig-platform-port:hardware-port\": \"Port1\" } } } ] } ]","title":"Get all states of an interface"},{"location":"examples/gnmi-clients/gnmic/#get-an-interfaces-operational-status","text":"gnmic -a 10.83.13.214:6030 -u cvpadmin -p arastra --insecure --gzip get --path \\ 'interfaces/interface[name=Ethernet24]/state/oper-status' [ { \"timestamp\": 1626293414057239130, \"time\": \"2021-07-14T21:10:14.05723913+01:00\", \"updates\": [ { \"Path\": \"interfaces/interface[name=Ethernet2]/state/oper-status\", \"values\": { \"interfaces/interface/state/oper-status\": \"UP\" } } ] } ]","title":"Get an interface's operational status"},{"location":"examples/gnmi-clients/gnmic/#get-an-interfaces-admin-status","text":"gnmic -a 10.83.13.214:6030 -u cvpadmin -p arastra --insecure --gzip get --path \\ 'interfaces/interface[name=Ethernet1]/state/admin-status' [ { \"timestamp\": 1626293085257457373, \"time\": \"2021-07-14T21:04:45.257457373+01:00\", \"updates\": [ { \"Path\": \"interfaces/interface[name=Ethernet1]/state/admin-status\", \"values\": { \"interfaces/interface/state/admin-status\": \"UP\" } } ] } ]","title":"Get an interface's admin status"},{"location":"examples/gnmi-clients/gnmic/#get-the-dom-metrics-of-all-interfaces","text":"gnmic -a 10.83.13.214:6030 -u cvpadmin -p arastra --insecure --gzip get --path \\ \"components/component/transceiver/physical-channels/channel/state/\" Reveal output [ { \"timestamp\": 1626293085257457373, \"time\": \"2021-07-14T21:04:45.257457373+01:00\", \"updates\": [ { \"Path\": \"components/component[name=Ethernet49 transceiver]/transceiver/physical-channels/channel[index=0]/state\", \"values\": { \"components/component/transceiver/physical-channels/channel/state\": { \"openconfig-platform-transceiver:index\": 0, \"openconfig-platform-transceiver:input-power\": { \"instant\": \"1.15\" }, \"openconfig-platform-transceiver:laser-bias-current\": { \"instant\": \"0.0\" }, \"openconfig-platform-transceiver:output-power\": {} } } }, { \"Path\": \"components/component[name=Ethernet50 transceiver]/transceiver/physical-channels/channel[index=0]/state\", \"values\": { \"components/component/transceiver/physical-channels/channel/state\": { \"openconfig-platform-transceiver:index\": 0, \"openconfig-platform-transceiver:input-power\": { \"instant\": \"1.11\" }, \"openconfig-platform-transceiver:laser-bias-current\": { \"instant\": \"0.0\" }, \"openconfig-platform-transceiver:output-power\": {} } } } ] } ]","title":"Get the DOM metrics of all interfaces"},{"location":"examples/gnmi-clients/gnmic/#get-the-dom-metrics-of-an-interface","text":"gnmic -a 10.83.13.214:6030 -u cvpadmin -p arastra --insecure --gzip get --path \\ \"components/component[name=Ethernet49 transceiver]/transceiver/physical-channels/channel/state/\" Reveal output [ { \"time\": \"1970-01-01T01:00:00+01:00\", \"updates\": [ { \"Path\": \"components/component[name=Ethernet49 transceiver]/transceiver/physical-channels/channel[index=0]/state\", \"values\": { \"components/component/transceiver/physical-channels/channel/state\": { \"openconfig-platform-transceiver:index\": 0, \"openconfig-platform-transceiver:input-power\": { \"instant\": \"1.08\" }, \"openconfig-platform-transceiver:laser-bias-current\": { \"instant\": \"0.0\" }, \"openconfig-platform-transceiver:output-power\": {} } } } ] } ]","title":"Get the DOM metrics of an interface"},{"location":"examples/gnmi-clients/gnmic/#get-per-core-cpu-utilization","text":"gnmic -a 10.83.13.214:6030 -u cvpadmin -p arastra --insecure --gzip get --path \\ 'components/component/cpu' Reveal output [ { \"timestamp\": 1626294810779644595, \"time\": \"2021-07-14T21:33:30.779644595+01:00\", \"updates\": [ { \"Path\": \"components/component[name=CPU1]/cpu\", \"values\": { \"components/component/cpu\": { \"openconfig-platform-cpu:utilization\": { \"state\": { \"avg\": 6, \"instant\": 6, \"interval\": \"1000000000000\", \"max\": 14, \"max-time\": \"3252585270429488128\", \"min\": 2, \"min-time\": \"3252586330424618496\" } } } } }, { \"Path\": \"components/component[name=CPU0]/cpu\", \"values\": { \"components/component/cpu\": { \"openconfig-platform-cpu:utilization\": { \"state\": { \"avg\": 5, \"instant\": 7, \"interval\": \"1000000000000\", \"max\": 13, \"max-time\": \"3252586170423993344\", \"min\": 1, \"min-time\": \"3252585340433252352\" } } } } } ] } ]","title":"Get per core CPU utilization"},{"location":"examples/gnmi-clients/gnmic/#get-the-availableutilized-memory","text":"gnmic -a 10.83.13.214:6030 -u cvpadmin -p arastra --insecure --gzip get --path \\ 'components/component/state/memory/' [ { \"timestamp\": 1626294846423115892, \"time\": \"2021-07-14T21:34:06.423115892+01:00\", \"updates\": [ { \"Path\": \"components/component[name=Chassis]/state/memory\", \"values\": { \"components/component/state/memory\": { \"openconfig-platform:available\": \"4098412544\", \"openconfig-platform:utilized\": \"4018016256\" } } } ] } ]","title":"Get the available/utilized memory"},{"location":"examples/gnmi-clients/gnmic/#get-the-system-environment-temperatures","text":"gnmic -a 10.83.13.214:6030 -u cvpadmin -p arastra --insecure --gzip get --path \\ 'components/component/state/temperature/instant' Reveal output [ { \"timestamp\": 1626294876186613578, \"time\": \"2021-07-14T21:34:36.186613578+01:00\" \"updates\": [ { \"Path\": \"components/component[name=DomTemperatureSensor50]/state/temperature/instant\", \"values\": { \"components/component/state/temperature/instant\": { \"digits\": 2709375, \"precision\": 5 } } }, { \"Path\": \"components/component[name=DomTemperatureSensor49]/state/temperature/instant\", \"values\": { \"components/component/state/temperature/instant\": { \"digits\": 27140625, \"precision\": 6 } } }, { \"Path\": \"components/component[name=TempSensor7]/state/temperature/instant\", \"values\": { \"components/component/state/temperature/instant\": { \"digits\": 41168000000000006, \"precision\": 15 } } }, { \"Path\": \"components/component[name=TempSensor8]/state/temperature/instant\", \"values\": { \"components/component/state/temperature/instant\": { \"digits\": 4225279999999998, \"precision\": 14 } } }, { \"Path\": \"components/component[name=TempSensor9]/state/temperature/instant\", \"values\": { \"components/component/state/temperature/instant\": { \"digits\": 4062560000000002, \"precision\": 14 } } }, { \"Path\": \"components/component[name=TempSensor1]/state/temperature/instant\", \"values\": { \"components/component/state/temperature/instant\": { \"digits\": 39141723894742796, \"precision\": 15 } } }, { \"Path\": \"components/component[name=TempSensor6]/state/temperature/instant\", \"values\": { \"components/component/state/temperature/instant\": { \"digits\": 23875, \"precision\": 3 } } }, { \"Path\": \"components/component[name=TempSensor3]/state/temperature/instant\", \"values\": { \"components/component/state/temperature/instant\": { \"digits\": 21 } } }, { \"Path\": \"components/component[name=TempSensor4]/state/temperature/instant\", \"values\": { \"components/component/state/temperature/instant\": { \"digits\": 1725, \"precision\": 2 } } }, { \"Path\": \"components/component[name=TempSensor5]/state/temperature/instant\", \"values\": { \"components/component/state/temperature/instant\": { \"digits\": 29 } } }, { \"Path\": \"components/component[name=TempSensor2]/state/temperature/instant\", \"values\": { \"components/component/state/temperature/instant\": { \"digits\": 32 } } } ] } ]","title":"Get the system environment temperatures"},{"location":"examples/gnmi-clients/gnmic/#gnmi-subscribe-rpc-examples","text":"","title":"gNMI SUBSCRIBE RPC Examples"},{"location":"examples/gnmi-clients/gnmic/#openconfig-paths_1","text":"","title":"OpenConfig paths"},{"location":"examples/gnmi-clients/gnmic/#subscribe-to-all-bgp-neighbor-states","text":"gnmic -a 10.83.13.214:6030 -u cvpadmin -p arastra --insecure --gzip subscribe --path \\ '/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/state' Reveal output { \"source\": \"10.83.13.214:6030\", \"subscription-name\": \"default-1626302647\", \"timestamp\": 1626292010055258009, \"time\": \"2021-07-14T20:46:50.055258009+01:00\", \"updates\": [ { \"Path\": \"network-instances/network-instance[name=default]/protocols/protocol[identifier=BGP][name=BGP]/bgp/neighbors/neighbor[neighbor-address=172.18.255.42]/state/messages/sent/UPDATE\", \"values\": { \"network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/state/messages/sent/UPDATE\": 8 } } ] } { \"source\": \"10.83.13.214:6030\", \"subscription-name\": \"default-1626302647\", \"timestamp\": 1626292008053994815, \"time\": \"2021-07-14T20:46:48.053994815+01:00\", \"updates\": [ { \"Path\": \"network-instances/network-instance[name=default]/protocols/protocol[identifier=BGP][name=BGP]/bgp/neighbors/neighbor[neighbor-address=172.18.255.42]/state/established-transitions\", \"values\": { \"network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/state/established-transitions\": 1 } } ] }","title":"Subscribe to all BGP neighbor states"},{"location":"examples/gnmi-clients/gnmic/#subscribe-to-specific-bgp-neighbor-state","text":"gnmic -a 10.83.13.214:6030 -u cvpadmin -p arastra --insecure --gzip subscribe --path \\ 'network-instances/network-instance[name=Tenant_A_WEB_Zone]/protocols/protocol[identifier=BGP][name=BGP]/bgp/neighbors/neighbor[neighbor-address=10.255.251.21]/state' Reveal output { \"source\": \"10.83.13.214:6030\", \"subscription-name\": \"default-1626303017\", \"timestamp\": 1626302991598465536, \"time\": \"2021-07-14T23:49:51.598465536+01:00\", \"updates\": [ { \"Path\": \"network-instances/network-instance[name=Tenant_A_WEB_Zone]/protocols/protocol[identifier=BGP][name=BGP]/bgp/neighbors/neighbor[neighbor-address=10.255.251.21]/state/last-established\", \"values\": { \"network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/state/last-established\": 1626302991563603200 } } ] }","title":"Subscribe to specific BGP neighbor state"},{"location":"examples/gnmi-clients/gnmic/#subscribe-with-stream-mode-sample-and-interval","text":"gnmic -a 10.83.13.214:6030 -u cvpadmin -p arastra --insecure --gzip --sample-interval 5s --stream-mode sample subscribe --path \\ '/network-instances/network-instance[name=Tenant_A_WEB_Zone]/protocols/protocol[identifier=BGP][name=BGP]/bgp/neighbors/neighbor[neighbor-address=10.255.251.21]/afi-safis/afi-safi[afi-safi-name=openconfig-bgp-types:IPV4_UNICAST]/state/prefixes/received' Reveal output { \"source\": \"10.83.13.214:6030\", \"subscription-name\": \"default-1626303393\", \"timestamp\": 1626303158135414182, \"time\": \"2021-07-14T23:52:38.135414182+01:00\", \"updates\": [ { \"Path\": \"network-instances/network-instance[name=Tenant_A_WEB_Zone]/protocols/protocol[identifier=BGP][name=BGP]/bgp/neighbors/neighbor[neighbor-address=10.255.251.21]/afi-safis/afi-safi[afi-safi-name=IPV4_UNICAST]/state/prefixes/received\", \"values\": { \"network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/state/prefixes/received\": 5 } } ] } { \"source\": \"10.83.13.214:6030\", \"subscription-name\": \"default-1626303393\", \"timestamp\": 1626303158135414182, \"time\": \"2021-07-14T23:52:38.135414182+01:00\", \"updates\": [ { \"Path\": \"network-instances/network-instance[name=Tenant_A_WEB_Zone]/protocols/protocol[identifier=BGP][name=BGP]/bgp/neighbors/neighbor[neighbor-address=10.255.251.21]/afi-safis/afi-safi[afi-safi-name=IPV4_UNICAST]/state/prefixes/received\", \"values\": { \"network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/state/prefixes/received\": 5 } } ] }","title":"Subscribe with stream mode sample and interval"},{"location":"examples/gnmi-clients/gnmic/#subscribe-to-interface-counters-and-save-them-to-a-file","text":"gnmic -a 127.0.0.1:6030 -u admin -p admin --insecure subscribe --path \\ \"/interfaces/interface/state/counters\" >> outputs/interface_state.json","title":"Subscribe to interface counters and save them to a file"},{"location":"examples/gnmi-clients/gnmic/#gnmi-set-rpc-examples","text":"","title":"gNMI SET RPC Examples"},{"location":"examples/gnmi-clients/gnmic/#openconfig-paths_2","text":"","title":"OpenConfig paths"},{"location":"examples/gnmi-clients/gnmic/#configure-bgp-neighbor-address-and-peer-as","text":"gnmic -a 10.83.13.214:6030 -u cvpadmin -p arastra --insecure --gzip set \\ --update-path '/network-instances/network-instance[name=default]/protocols/protocol[name=BGP]/bgp/neighbors/neighbor[neighbor-address=10.10.100.43]' \\ --update-file value.json value.json : {\"config\": {\"neighbor-address\":\"10.10.100.43\", \"peer-as\": 123}} Output: { \"timestamp\": 1626305876151537555, \"time\": \"2021-07-15T00:37:56.151537555+01:00\", \"results\": [ { \"operation\": \"UPDATE\", \"path\": \"network-instances/network-instance[name=default]/protocols/protocol[name=BGP]/bgp/neighbors/neighbor[neighbor-address=10.10.100.43]\" } ] }","title":"Configure BGP neighbor address and peer AS"},{"location":"examples/gnmi-clients/gnmic/#configure-bgp-neighbor-address-peer-as-and-send-community","text":"gnmic -a 10.83.13.214:6030 -u cvpadmin -p arastra --insecure --gzip set \\ --update-path '/network-instances/network-instance[name=default]/protocols/protocol[name=BGP]/bgp/neighbors/neighbor[neighbor-address=10.10.100.43]' \\ --update-file value.json value.json : {\"config\": {\"neighbor-address\":\"10.10.100.43\", \"peer-as\": 123, \"enabled\": true, \"send-community\": \"EXTENDED\"}} Output: { \"timestamp\": 1626305480401353997, \"time\": \"2021-07-15T00:31:20.401353997+01:00\", \"results\": [ { \"operation\": \"UPDATE\", \"path\": \"network-instances/network-instance[name=default]/protocols/protocol[name=BGP]/bgp/neighbors/neighbor[neighbor-address=10.10.100.43]\" } ] }","title":"Configure BGP neighbor address, peer AS and send-community"},{"location":"examples/gnmi-clients/gnmic/#create-bgp-peer-group","text":"gnmic -a 10.83.13.214:6030 -u cvpadmin -p arastra --insecure --gzip set \\ --update-path '/network-instances/network-instance[name=default]/protocols/protocol[name=BGP]/bgp/peer-groups/peer-group[peer-group-name=XYZ]' \\ --update-file value.json value.json : {\"config\": {\"peer-group-name\":\"XYZ\", \"local-as\": 114}}","title":"Create BGP peer group"},{"location":"examples/gnmi-clients/gnmic/#update-bgp-peer-as","text":"gnmic -a 10.83.13.214:6030 -u cvpadmin -p arastra --insecure --gzip set \\ --update-path '/network-instances/network-instance[name=default]/protocols/protocol[name=BGP]/bgp/neighbors/neighbor[neighbor-address=10.10.100.43]/config/peer-as' \\ --update-value '110' Output: { \"timestamp\": 1626306067189329813, \"time\": \"2021-07-15T00:41:07.189329813+01:00\", \"results\": [ { \"operation\": \"UPDATE\", \"path\": \"network-instances/network-instance[name=default]/protocols/protocol[name=BGP]/bgp/neighbors/neighbor[neighbor-address=10.10.100.43]/config/peer-as\" } ] }","title":"Update BGP peer AS"},{"location":"examples/gnmi-clients/gnmic/#update-bgp-peer-group","text":"gnmic -a 10.83.13.214:6030 -u cvpadmin -p arastra --insecure --gzip set \\ --update-path '/network-instances/network-instance[name=default]/protocols/protocol[name=BGP]/bgp/neighbors/neighbor[neighbor-address=10.10.100.43]/config/peer-group' \\ --update-value 'XYZ' Output: { \"timestamp\": 1626306067189329813, \"time\": \"2021-07-15T00:41:07.189329813+01:00\", \"results\": [ { \"operation\": \"UPDATE\", \"path\": \"network-instances/network-instance[name=default]/protocols/protocol[name=BGP]/bgp/neighbors/neighbor[neighbor-address=10.10.100.43]/config/peer-as\" } ] }","title":"Update BGP peer group"},{"location":"examples/gnmi-clients/gnmic/#create-an-acl","text":"gnmic -a 10.83.13.108:6030 -u cvpadmin -p arastra --insecure --gzip set \\ --update-path /acl/acl-sets \\ --update-file acl2.json Output: { \"timestamp\": 1626307972085688242, \"time\": \"2021-07-15T01:12:52.085688242+01:00\", \"results\": [ { \"operation\": \"UPDATE\", \"path\": \"acl/acl-sets\" } ] } acl2.json { \"acl-set\": [ { \"config\": { \"name\": \"test\", \"type\": \"ACL_IPV4\" }, \"name\": \"test\", \"type\": \"ACL_IPV4\", \"acl-entries\": { \"acl-entry\": [ { \"sequence-id\": 10, \"actions\": { \"config\": { \"forwarding-action\": \"DROP\" } }, \"config\": { \"sequence-id\": 10 }, \"ipv4\": { \"config\": { \"destination-address\": \"1.2.3.4/12\", \"source-address\": \"0.0.0.0/0\" } } } ] } } ] } This creates ip access-list test 10 deny ip any 1.0.0.0/12","title":"Create an ACL"},{"location":"examples/gnmi-clients/gnmic/#shutdown-an-interface","text":"gnmic -a 10.83.13.108:6030 -u cvpadmin -p arastra --insecure --gzip set \\ --update-path '/interfaces/interface[name=Ethernet1]/config/enabled' \\ --update-value 'false' { \"timestamp\": 1626309145489047571, \"time\": \"2021-07-15T01:32:25.489047571+01:00\", \"results\": [ { \"operation\": \"UPDATE\", \"path\": \"interfaces/interface[name=Ethernet1]/config/enabled\" } ] }","title":"Shutdown an interface"},{"location":"examples/gnmi-clients/gnmic/#bring-up-an-interface","text":"gnmic -a 10.83.13.108:6030 -u cvpadmin -p arastra --insecure --gzip set \\ --update-path '/interfaces/interface[name=Ethernet1]/config/enabled' \\ --update-value 'true' { \"timestamp\": 1626309156607307596, \"time\": \"2021-07-15T01:32:36.607307596+01:00\", \"results\": [ { \"operation\": \"UPDATE\", \"path\": \"interfaces/interface[name=Ethernet1]/config/enabled\" } ] }","title":"Bring up an interface"},{"location":"examples/gnmi-clients/gnmic/#eos-native-paths","text":"To get EOS native paths, OCTA has to be enabled as mentioned in the configuration section. Performing GET/SUBSCRIBE actions using EOS native paths require changing the origin to eos_native .","title":"EOS Native paths"},{"location":"examples/gnmi-clients/gnmic/#commonly-used-paths","text":"MAC table: /Smash/bridging/status/smashFdbStatus ARP table: /Smash/arp/status/arpEntry Neighbor table: /Smash/arp/status/neighborEntry IPv4 RIB: /Smash/routing/status/route IPv6 RIB: /Smash/routing6/status/route IPv4 next-hop table: /Smash/routing/status/nexthop IPv6 next-hop table: /Smash/routing6/status/nexthop CPU info: /Kernel/proc/cpu Process statistics: /Kernel/proc/stat System info: /Kernel/sysinfo EOS version: /Eos/image Interface counters: /Smash/counters/ethIntf/<agent>/current/counter Values for <agent> are: 7500-family, 7280-family, 7020-family (Arad/Jericho ASICs): SandCounters 7300-family, 7250-family, 7050-family, 7010 products, 720-family (Trident ASICs): StrataCounters For 7060-family, 7260-family (Tomahawk): Strata-FixedSystem or StrataCounters from 4.22+ 7150-family products (Alta ASICs): FocalPointV2 7160-family products (Cavium/Xpliant ASICs): XpCounters 7170-family products (Barefoot ASIC): BfnCounters","title":"Commonly used paths"},{"location":"examples/gnmi-clients/gnmic/#get-cpu-utilization","text":"gnmic -a 10.83.13.108:6030 -u cvpadmin -p arastra --insecure --gzip get --path \\ 'eos_native:/Kernel/proc/cpu/utilization/total' Reveal output [ { \"timestamp\": 1626291721294738334, \"time\": \"2021-07-14T20:42:01.294738334+01:00\", \"prefix\": \"eos_native:Kernel/proc/cpu/utilization/total\", \"updates\": [ { \"Path\": \"name\", \"values\": { \"name\": \"total\" } }, { \"Path\": \"nice\", \"values\": { \"nice\": 28845 } }, { \"Path\": \"util\", \"values\": { \"util\": 41 } }, { \"Path\": \"user\", \"values\": { \"user\": 32058347 } }, { \"Path\": \"system\", \"values\": { \"system\": 4597389 } }, { \"Path\": \"idle\", \"values\": { \"idle\": 76373566 } } ] } ]","title":"Get CPU utilization"},{"location":"examples/gnmi-clients/gnmic/#get-transceiver-dom-temperature","text":"gnmic -a 127.0.0.1:6030 -u admin -p admin --insecure --gzip get --path \\ eos_native:/Sysdb/hardware/archer/xcvr/status >> outputs/doms.json","title":"Get transceiver DOM temperature"},{"location":"examples/gnmi-clients/gnmic/#get-eos-image-version","text":"gnmic -a 127.0.0.1:6030 -u admin -p admin --insecure --gzip get \\ --path eos_native:/Eos/image >> outputs/eos_image.json","title":"Get EOS image version"},{"location":"examples/gnmi-clients/gnmic/#cli-origin","text":"","title":"Cli origin"},{"location":"examples/gnmi-clients/gnmic/#get-the-running-config","text":"gnmic -a 127.0.0.1:6030 -u admin -p admin --insecure get \\ --path \"cli:/show running-config\" >> outputs/outputs.json","title":"Get the running config"},{"location":"examples/gnmi-clients/gnmic/#get-the-total-route-count","text":"gnmic -a 127.0.0.1:6030 -u admin -p admin --insecure get \\ --path \"cli:/show ip route summary\" \\ | jq '.[0].updates[0].values.\"show ip route summary\".totalRoutes'","title":"Get the total route count"},{"location":"examples/gnmi-clients/gnmic/#misc","text":"","title":"Misc"},{"location":"examples/gnmi-clients/gnmic/#save-all-status-states-to-a-file","text":"gnmic -a 127.0.0.1:6030 -u admin -p admin --insecure get \\ --path \".../state/...\" >> outputs/states.json","title":"Save all status states to a file"},{"location":"examples/gnmi-clients/gnmic/#save-all-config-states-to-a-file","text":"gnmic -a 127.0.0.1:6030 -u admin -p admin --insecure get \\ --path \".../config/...\" >> outputs/configs.json","title":"Save all config states to a file"},{"location":"examples/gnmi-clients/gnmic/#save-network-instance-states-to-a-file","text":"gnmic -a 127.0.0.1:6030 -u admin -p admin --insecure get --path \\ /network-instances/network-instance >> outputs/network-instances.json","title":"Save network instance states to a file"},{"location":"examples/gnmi-clients/gnmic/#save-bgp-states-to-a-file","text":"gnmic -a 127.0.0.1:6030 -u admin -p admin --insecure get --path \\ /network-instances/network-instance[name=default]/protocols/protocol[name=BGP]\\ >> outputs/bgp.json","title":"Save BGP states to a file"},{"location":"examples/gnmi-gateway/","text":"Overview EOS configuration Start gNMI gateway Query gNMI gateway Overview gNMI gateway is a opensource project created by netflix. The idea of gNMI gateway is the gateway sits as a gateway or a proxy for multiple gNMI targets which it then manages. A gNMI client will then speak to the gNMI service(gNMI gateway) and use a gNMI target which the client will then request the path. gNMI gateway documentation can be found here NANOG demo can also be found here In this demo we will start the gNMI gateway binary and use gNMIC to then stream to a target which is managed by gNMI gateway. Please make adjustments to the targets.json file to match your own network. The demo is structured in a few different files all which have their own function. \u251c\u2500\u2500 gnmi-gateway \u251c\u2500\u2500 index.md \u251c\u2500\u2500 server.crt \u251c\u2500\u2500 server.key \u2514\u2500\u2500 targets.json gnmi-gateway - The binary to activate gNMI gateway server.crt / server.key - the certificate and key for gNMI gateway targets.json - This file specifies the targets. gNMI-gateway supports hot reloading of the files. So if changes are made within targets.json it will reload automatically with new targets and or new paths. EOS configuration The following configuration will add a self signed cert to the device and start the gNMI service with the cert. management api gnmi transport grpc default ssl profile SELFSIGNED provider eos-native ! management security ssl profile SELFSIGNED certificate cvp.crt key cvp.key ! security pki certificate generate self-signed cvp.crt key cvp.key generate rsa 2048 validity 30000 parameters common-name cvp Start gNMI gateway gnmi-gateway -EnableGNMIServer -ServerTLSCert=server.crt \\ -ServerTLSKey=server.key -TargetLoaders=json -TargetJSONFile=targets.json Output: {\"level\":\"info\",\"time\":\"2021-03-19T08:47:35-04:00\",\"message\":\"Starting GNMI Gateway.\"} {\"level\":\"info\",\"time\":\"2021-03-19T08:47:35-04:00\",\"message\":\"Clustering is NOT enabled. No locking or cluster coordination will happen.\"} {\"level\":\"info\",\"time\":\"2021-03-19T08:47:35-04:00\",\"message\":\"Starting connection manager.\"} {\"level\":\"info\",\"time\":\"2021-03-19T08:47:35-04:00\",\"message\":\"Starting gNMI server on 0.0.0.0:9339.\"} {\"level\":\"info\",\"time\":\"2021-03-19T08:47:35-04:00\",\"message\":\"Connection manager received a target control message: 3 inserts 0 removes\"} {\"level\":\"info\",\"time\":\"2021-03-19T08:47:35-04:00\",\"message\":\"Initializing target DC2-SP02 ([10.20.30.22:6030]) map[NoTLS:yes].\"} {\"level\":\"info\",\"time\":\"2021-03-19T08:47:35-04:00\",\"message\":\"Initializing target DC2-LEAF1A ([10.20.30.5:6030]) map[NoTLS:yes].\"} {\"level\":\"info\",\"time\":\"2021-03-19T08:47:35-04:00\",\"message\":\"Target DC2-SP02: Connecting\"} {\"level\":\"warn\",\"time\":\"2021-03-19T08:47:35-04:00\",\"message\":\"DEPRECATED: The 'NoTLS' target flag has been deprecated and will be removed in a future release. Please use 'NoTLSVerify' instead.\"} {\"level\":\"info\",\"time\":\"2021-03-19T08:47:35-04:00\",\"message\":\"Target DC2-SP02: Subscribing\"} {\"level\":\"info\",\"time\":\"2021-03-19T08:47:35-04:00\",\"message\":\"Initializing target DC2-LF70 ([10.20.30.70:6030]) map[NoTLS:yes].\"} {\"level\":\"info\",\"time\":\"2021-03-19T08:47:35-04:00\",\"message\":\"Target DC2-LEAF1A: Connecting\"} {\"level\":\"warn\",\"time\":\"2021-03-19T08:47:35-04:00\",\"message\":\"DEPRECATED: The 'NoTLS' target flag has been deprecated and will be removed in a future release. Please use 'NoTLSVerify' instead.\"} {\"level\":\"info\",\"time\":\"2021-03-19T08:47:35-04:00\",\"message\":\"Target DC2-LEAF1A: Subscribing\"} {\"level\":\"info\",\"time\":\"2021-03-19T08:47:35-04:00\",\"message\":\"Target DC2-LF70: Connecting\"} {\"level\":\"warn\",\"time\":\"2021-03-19T08:47:35-04:00\",\"message\":\"DEPRECATED: The 'NoTLS' target flag has been deprecated and will be removed in a future release. Please use 'NoTLSVerify' instead.\"} {\"level\":\"info\",\"time\":\"2021-03-19T08:47:35-04:00\",\"message\":\"Target DC2-LF70: Subscribing\"} {\"level\":\"info\",\"time\":\"2021-03-19T08:47:35-04:00\",\"message\":\"Target DC2-SP02: Connected\"} {\"level\":\"info\",\"time\":\"2021-03-19T08:47:36-04:00\",\"message\":\"Target DC2-LF70: Connected\"} {\"level\":\"info\",\"time\":\"2021-03-19T08:47:36-04:00\",\"message\":\"Target DC2-LEAF1A: Connected\"} {\"level\":\"info\",\"time\":\"2021-03-19T08:47:37-04:00\",\"message\":\"Target DC2-LF70: Synced\"} {\"level\":\"info\",\"time\":\"2021-03-19T08:47:37-04:00\",\"message\":\"Target DC2-SP02: Synced\"} {\"level\":\"info\",\"time\":\"2021-03-19T08:47:38-04:00\",\"message\":\"Target DC2-LEAF1A: Synced\"} The output tells us that gNMI-gateway has started and began to serve up gNMI requests to the /interfaces/interface path via any gNMI external client. Requesting a target managed by gNMI gateway gnmic subscribe -a 127.0.0.1 -u ansible -p ansible --port=9339 \\ --skip-verify --target=DC2-SP02 --path=/interfaces Output: { \"source\": \"127.0.0.1:9339\", \"subscription-name\": \"default-1616158143\", \"timestamp\": 1605208845740882713, \"time\": \"2020-11-12T14:20:45.740882713-05:00\", \"target\": \"DC2-SP02\", \"updates\": [ { \"Path\": \"interfaces/interface[name=Ethernet54/1]/state/tpid\", \"values\": { \"interfaces/interface/state/tpid\": \"openconfig-vlan-types:TPID_0X8100\" } } ] } Since the gNMI gateway is running locally a query can be issued to the service on port 9339 passing in the target value of DC2-SP02 and telemetry will start to stream data back to the client.","title":"gNMI gateway"},{"location":"examples/gnmi-gateway/#overview","text":"gNMI gateway is a opensource project created by netflix. The idea of gNMI gateway is the gateway sits as a gateway or a proxy for multiple gNMI targets which it then manages. A gNMI client will then speak to the gNMI service(gNMI gateway) and use a gNMI target which the client will then request the path. gNMI gateway documentation can be found here NANOG demo can also be found here In this demo we will start the gNMI gateway binary and use gNMIC to then stream to a target which is managed by gNMI gateway. Please make adjustments to the targets.json file to match your own network. The demo is structured in a few different files all which have their own function. \u251c\u2500\u2500 gnmi-gateway \u251c\u2500\u2500 index.md \u251c\u2500\u2500 server.crt \u251c\u2500\u2500 server.key \u2514\u2500\u2500 targets.json gnmi-gateway - The binary to activate gNMI gateway server.crt / server.key - the certificate and key for gNMI gateway targets.json - This file specifies the targets. gNMI-gateway supports hot reloading of the files. So if changes are made within targets.json it will reload automatically with new targets and or new paths.","title":"Overview"},{"location":"examples/gnmi-gateway/#eos-configuration","text":"The following configuration will add a self signed cert to the device and start the gNMI service with the cert. management api gnmi transport grpc default ssl profile SELFSIGNED provider eos-native ! management security ssl profile SELFSIGNED certificate cvp.crt key cvp.key ! security pki certificate generate self-signed cvp.crt key cvp.key generate rsa 2048 validity 30000 parameters common-name cvp","title":"EOS configuration"},{"location":"examples/gnmi-gateway/#start-gnmi-gateway","text":"gnmi-gateway -EnableGNMIServer -ServerTLSCert=server.crt \\ -ServerTLSKey=server.key -TargetLoaders=json -TargetJSONFile=targets.json Output: {\"level\":\"info\",\"time\":\"2021-03-19T08:47:35-04:00\",\"message\":\"Starting GNMI Gateway.\"} {\"level\":\"info\",\"time\":\"2021-03-19T08:47:35-04:00\",\"message\":\"Clustering is NOT enabled. No locking or cluster coordination will happen.\"} {\"level\":\"info\",\"time\":\"2021-03-19T08:47:35-04:00\",\"message\":\"Starting connection manager.\"} {\"level\":\"info\",\"time\":\"2021-03-19T08:47:35-04:00\",\"message\":\"Starting gNMI server on 0.0.0.0:9339.\"} {\"level\":\"info\",\"time\":\"2021-03-19T08:47:35-04:00\",\"message\":\"Connection manager received a target control message: 3 inserts 0 removes\"} {\"level\":\"info\",\"time\":\"2021-03-19T08:47:35-04:00\",\"message\":\"Initializing target DC2-SP02 ([10.20.30.22:6030]) map[NoTLS:yes].\"} {\"level\":\"info\",\"time\":\"2021-03-19T08:47:35-04:00\",\"message\":\"Initializing target DC2-LEAF1A ([10.20.30.5:6030]) map[NoTLS:yes].\"} {\"level\":\"info\",\"time\":\"2021-03-19T08:47:35-04:00\",\"message\":\"Target DC2-SP02: Connecting\"} {\"level\":\"warn\",\"time\":\"2021-03-19T08:47:35-04:00\",\"message\":\"DEPRECATED: The 'NoTLS' target flag has been deprecated and will be removed in a future release. Please use 'NoTLSVerify' instead.\"} {\"level\":\"info\",\"time\":\"2021-03-19T08:47:35-04:00\",\"message\":\"Target DC2-SP02: Subscribing\"} {\"level\":\"info\",\"time\":\"2021-03-19T08:47:35-04:00\",\"message\":\"Initializing target DC2-LF70 ([10.20.30.70:6030]) map[NoTLS:yes].\"} {\"level\":\"info\",\"time\":\"2021-03-19T08:47:35-04:00\",\"message\":\"Target DC2-LEAF1A: Connecting\"} {\"level\":\"warn\",\"time\":\"2021-03-19T08:47:35-04:00\",\"message\":\"DEPRECATED: The 'NoTLS' target flag has been deprecated and will be removed in a future release. Please use 'NoTLSVerify' instead.\"} {\"level\":\"info\",\"time\":\"2021-03-19T08:47:35-04:00\",\"message\":\"Target DC2-LEAF1A: Subscribing\"} {\"level\":\"info\",\"time\":\"2021-03-19T08:47:35-04:00\",\"message\":\"Target DC2-LF70: Connecting\"} {\"level\":\"warn\",\"time\":\"2021-03-19T08:47:35-04:00\",\"message\":\"DEPRECATED: The 'NoTLS' target flag has been deprecated and will be removed in a future release. Please use 'NoTLSVerify' instead.\"} {\"level\":\"info\",\"time\":\"2021-03-19T08:47:35-04:00\",\"message\":\"Target DC2-LF70: Subscribing\"} {\"level\":\"info\",\"time\":\"2021-03-19T08:47:35-04:00\",\"message\":\"Target DC2-SP02: Connected\"} {\"level\":\"info\",\"time\":\"2021-03-19T08:47:36-04:00\",\"message\":\"Target DC2-LF70: Connected\"} {\"level\":\"info\",\"time\":\"2021-03-19T08:47:36-04:00\",\"message\":\"Target DC2-LEAF1A: Connected\"} {\"level\":\"info\",\"time\":\"2021-03-19T08:47:37-04:00\",\"message\":\"Target DC2-LF70: Synced\"} {\"level\":\"info\",\"time\":\"2021-03-19T08:47:37-04:00\",\"message\":\"Target DC2-SP02: Synced\"} {\"level\":\"info\",\"time\":\"2021-03-19T08:47:38-04:00\",\"message\":\"Target DC2-LEAF1A: Synced\"} The output tells us that gNMI-gateway has started and began to serve up gNMI requests to the /interfaces/interface path via any gNMI external client.","title":"Start gNMI gateway"},{"location":"examples/gnmi-gateway/#requesting-a-target-managed-by-gnmi-gateway","text":"gnmic subscribe -a 127.0.0.1 -u ansible -p ansible --port=9339 \\ --skip-verify --target=DC2-SP02 --path=/interfaces Output: { \"source\": \"127.0.0.1:9339\", \"subscription-name\": \"default-1616158143\", \"timestamp\": 1605208845740882713, \"time\": \"2020-11-12T14:20:45.740882713-05:00\", \"target\": \"DC2-SP02\", \"updates\": [ { \"Path\": \"interfaces/interface[name=Ethernet54/1]/state/tpid\", \"values\": { \"interfaces/interface/state/tpid\": \"openconfig-vlan-types:TPID_0X8100\" } } ] } Since the gNMI gateway is running locally a query can be issued to the service on port 9339 passing in the target value of DC2-SP02 and telemetry will start to stream data back to the client.","title":"Requesting a target managed by gNMI gateway"},{"location":"examples/gnoi/gnoic/","text":"About gRPC gRPC - Google Remote Procedure Call gRPC uses protobuf and HTTP/2 About gNOI gNOI - gRPC Network Operations Interface gNOI defines a set of gRPC-based microservices for executing operational commands on network devices. gNOI github repository As example, this gNOI proto file defines the service System with the RPC Traceroute and Ping Ping executes the ping command on the target and streams back the results Traceroute executes the traceroute command on the target and streams back the results As you can see in the proto file, the field VRF is not defined for these messages About gNOI support on EOS Please refer to this link for the gNOI support by EOS. Examples: gnoi ping gnoi traceroute gNOIc overview gNOIc is a gNOI CLI client: source code documentation The following examples shows various gNOIc commands with Arista EOS devices. Download & install gNOIc To install run: bash -c \"$(curl -sL https://get-gnoic.kmrd.dev)\" To get the version run: $ gnoic version Output: version : 0.0.5 commit : 26c6248 date : 2021-05-12T10:12:55Z gitURL : https://github.com/karimra/gnoic docs : https://gnoic.kmrd.dev Device config interface Management1 description oob_management vrf MGMT ip address 10.73.1.118/24 username arista secret 0 arista management api gnmi transport grpc def vrf MGMT DC1-L2LEAF2A#show management api gnmi Enabled: Yes Server: running on port 6030, in MGMT VRF SSL Profile: none QoS DSCP: none DC1-L2LEAF2A# Before to use gNOI ping and traceroute, lets run these commands locally: $ ssh arista@10.73.1.118 Password: Last login: Thu Jun 3 12:06:25 2021 from 10.73.1.3 DC1-L2LEAF2A>en DC1-L2LEAF2A#bash Arista Networks EOS shell [arista@DC1-L2LEAF2A ~]$ ping 172.31.255.0 -c 2 PING 172.31.255.0 (172.31.255.0) 56(84) bytes of data. 64 bytes from 172.31.255.0: icmp_seq=1 ttl=63 time=24.6 ms 64 bytes from 172.31.255.0: icmp_seq=2 ttl=63 time=18.8 ms --- 172.31.255.0 ping statistics --- 2 packets transmitted, 2 received, 0% packet loss, time 1001ms rtt min/avg/max/mdev = 18.861/21.738/24.616/2.881 ms [arista@DC1-L2LEAF2A ~]$ [arista@DC1-L2LEAF2A ~]$ traceroute -A 172.31.255.0 traceroute to 172.31.255.0 (172.31.255.0), 30 hops max, 60 byte packets 1 10.90.90.1 (10.90.90.1) [!!] 26.636 ms 29.420 ms 32.113 ms 2 172.31.255.0 (172.31.255.0) [!!] 52.764 ms 53.881 ms 63.213 ms [arista@DC1-L2LEAF2A ~]$ [arista@DC1-L2LEAF2A ~]$ exit logout DC1-L2LEAF2A#exit Connection to 10.73.1.118 closed. gNOI demo with Arista using gNOIc $ gnoic -a 10.73.1.118:6030 -u arista -p arista --insecure system ping --destination 172.31.255.0 --count 2 --do-not-resolve WARN[0000] \"10.73.1.118:6030\" could not lookup hostname: lookup 118.1.73.10.in-addr.arpa. on 127.0.0.53:53: no such host source: \"172.31.255.0\" time: 31200000 bytes: 64 sequence: 1 ttl: 63 source: \"172.31.255.0\" time: 33900000 bytes: 64 sequence: 2 ttl: 63 source: \"172.31.255.0\" time: 1001000000 sent: 2 received: 2 min_time: 31251000 avg_time: 32590000 max_time: 33930000 std_dev: 1351000 $ gnoic -a 10.73.1.118:6030 -u arista -p arista --insecure system traceroute --destination 172.31.255.0 --do-not-resolve WARN[0000] \"10.73.1.118:6030\" could not lookup hostname: lookup 118.1.73.10.in-addr.arpa. on 127.0.0.53:53: no such host destination_name: \"172.31.255.0\" destination_address: \"172.31.255.0\" hops: 30 packet_size: 60 hop: 1 address: \"10.90.90.1\" rtt: 21440000 hop: 1 address: \"10.90.90.1\" rtt: 23011000 hop: 1 address: \"10.90.90.1\" rtt: 31135000 hop: 2 address: \"172.31.255.0\" rtt: 62216000 hop: 2 address: \"172.31.255.0\" rtt: 63213000 hop: 2 address: \"172.31.255.0\" rtt: 71079000 $ gnoic -a 10.73.1.118:6030 -u arista -p arista --insecure cert can-generate-csr WARN[0000] \"10.73.1.118:6030\" could not lookup hostname: lookup 118.1.73.10.in-addr.arpa. on 127.0.0.53:53: no such host INFO[0000] \"10.73.1.118:6030\" key-type=KT_RSA, cert-type=CT_X509, key-size=2048: can_generate: true +------------------+------------------+ | Target Name | Can Generate CSR | +------------------+------------------+ | 10.73.1.118:6030 | true | +------------------+------------------+","title":"gNOIc"},{"location":"examples/gnoi/gnoic/#about-grpc","text":"gRPC - Google Remote Procedure Call gRPC uses protobuf and HTTP/2","title":"About gRPC"},{"location":"examples/gnoi/gnoic/#about-gnoi","text":"gNOI - gRPC Network Operations Interface gNOI defines a set of gRPC-based microservices for executing operational commands on network devices. gNOI github repository As example, this gNOI proto file defines the service System with the RPC Traceroute and Ping Ping executes the ping command on the target and streams back the results Traceroute executes the traceroute command on the target and streams back the results As you can see in the proto file, the field VRF is not defined for these messages","title":"About gNOI"},{"location":"examples/gnoi/gnoic/#about-gnoi-support-on-eos","text":"Please refer to this link for the gNOI support by EOS. Examples: gnoi ping gnoi traceroute","title":"About gNOI support on EOS"},{"location":"examples/gnoi/gnoic/#gnoic-overview","text":"gNOIc is a gNOI CLI client: source code documentation The following examples shows various gNOIc commands with Arista EOS devices.","title":"gNOIc overview"},{"location":"examples/gnoi/gnoic/#download-install-gnoic","text":"To install run: bash -c \"$(curl -sL https://get-gnoic.kmrd.dev)\" To get the version run: $ gnoic version Output: version : 0.0.5 commit : 26c6248 date : 2021-05-12T10:12:55Z gitURL : https://github.com/karimra/gnoic docs : https://gnoic.kmrd.dev","title":"Download &amp; install gNOIc"},{"location":"examples/gnoi/gnoic/#device-config","text":"interface Management1 description oob_management vrf MGMT ip address 10.73.1.118/24 username arista secret 0 arista management api gnmi transport grpc def vrf MGMT DC1-L2LEAF2A#show management api gnmi Enabled: Yes Server: running on port 6030, in MGMT VRF SSL Profile: none QoS DSCP: none DC1-L2LEAF2A# Before to use gNOI ping and traceroute, lets run these commands locally: $ ssh arista@10.73.1.118 Password: Last login: Thu Jun 3 12:06:25 2021 from 10.73.1.3 DC1-L2LEAF2A>en DC1-L2LEAF2A#bash Arista Networks EOS shell [arista@DC1-L2LEAF2A ~]$ ping 172.31.255.0 -c 2 PING 172.31.255.0 (172.31.255.0) 56(84) bytes of data. 64 bytes from 172.31.255.0: icmp_seq=1 ttl=63 time=24.6 ms 64 bytes from 172.31.255.0: icmp_seq=2 ttl=63 time=18.8 ms --- 172.31.255.0 ping statistics --- 2 packets transmitted, 2 received, 0% packet loss, time 1001ms rtt min/avg/max/mdev = 18.861/21.738/24.616/2.881 ms [arista@DC1-L2LEAF2A ~]$ [arista@DC1-L2LEAF2A ~]$ traceroute -A 172.31.255.0 traceroute to 172.31.255.0 (172.31.255.0), 30 hops max, 60 byte packets 1 10.90.90.1 (10.90.90.1) [!!] 26.636 ms 29.420 ms 32.113 ms 2 172.31.255.0 (172.31.255.0) [!!] 52.764 ms 53.881 ms 63.213 ms [arista@DC1-L2LEAF2A ~]$ [arista@DC1-L2LEAF2A ~]$ exit logout DC1-L2LEAF2A#exit Connection to 10.73.1.118 closed.","title":"Device config"},{"location":"examples/gnoi/gnoic/#gnoi-demo-with-arista-using-gnoic","text":"$ gnoic -a 10.73.1.118:6030 -u arista -p arista --insecure system ping --destination 172.31.255.0 --count 2 --do-not-resolve WARN[0000] \"10.73.1.118:6030\" could not lookup hostname: lookup 118.1.73.10.in-addr.arpa. on 127.0.0.53:53: no such host source: \"172.31.255.0\" time: 31200000 bytes: 64 sequence: 1 ttl: 63 source: \"172.31.255.0\" time: 33900000 bytes: 64 sequence: 2 ttl: 63 source: \"172.31.255.0\" time: 1001000000 sent: 2 received: 2 min_time: 31251000 avg_time: 32590000 max_time: 33930000 std_dev: 1351000 $ gnoic -a 10.73.1.118:6030 -u arista -p arista --insecure system traceroute --destination 172.31.255.0 --do-not-resolve WARN[0000] \"10.73.1.118:6030\" could not lookup hostname: lookup 118.1.73.10.in-addr.arpa. on 127.0.0.53:53: no such host destination_name: \"172.31.255.0\" destination_address: \"172.31.255.0\" hops: 30 packet_size: 60 hop: 1 address: \"10.90.90.1\" rtt: 21440000 hop: 1 address: \"10.90.90.1\" rtt: 23011000 hop: 1 address: \"10.90.90.1\" rtt: 31135000 hop: 2 address: \"172.31.255.0\" rtt: 62216000 hop: 2 address: \"172.31.255.0\" rtt: 63213000 hop: 2 address: \"172.31.255.0\" rtt: 71079000 $ gnoic -a 10.73.1.118:6030 -u arista -p arista --insecure cert can-generate-csr WARN[0000] \"10.73.1.118:6030\" could not lookup hostname: lookup 118.1.73.10.in-addr.arpa. on 127.0.0.53:53: no such host INFO[0000] \"10.73.1.118:6030\" key-type=KT_RSA, cert-type=CT_X509, key-size=2048: can_generate: true +------------------+------------------+ | Target Name | Can Generate CSR | +------------------+------------------+ | 10.73.1.118:6030 | true | +------------------+------------------+","title":"gNOI demo with Arista using gNOIc"},{"location":"examples/gnoi/grpcurl/","text":"About gRPC gRPC - Google Remote Procedure Call gRPC uses protobuf and HTTP/2 About gNOI gNOI - gRPC Network Operations Interface gNOI defines a set of gRPC-based microservices for executing operational commands on network devices. gNOI github repository As example, this gNOI proto file defines the service System with the RPC Traceroute and Ping Ping executes the ping command on the target and streams back the results Traceroute executes the traceroute command on the target and streams back the results As you can see in the proto file, the field VRF is not defined for these messages About gNOI support on EOS Please refer to this link for the gNOI support by EOS. Examples: gnoi ping gnoi traceroute gRPCurl overview gRPCurl is a command-line tool that lets you interact with gRPC servers: github repository The following examples shows various gRPCurl commands to interact with Arista EOS devices. Install gRPCurl Install GO $ go version go version go1.16.4 linux/amd64 $ go env | grep 'GOROOT\\|GOPATH' $ export GOROOT=/usr/local/go $ export GOPATH=$HOME/go $ export PATH=$GOPATH/bin:$GOROOT/bin:$PATH Get gNOI repository $ mkdir -p $GOPATH/src/github.com/openconfig $ git clone https://github.com/openconfig/gnoi.git $GOPATH/src/github.com/openconfig/gnoi $ ls $GOPATH/src/github.com/openconfig gnoi Install gRPCurl $ go get github.com/fullstorydev/grpcurl $ ls $GOPATH/pkg/mod/github.com/fullstorydev/ grpcurl@v1.8.1 $ go install github.com/fullstorydev/grpcurl/cmd/grpcurl@latest ls $GOPATH/bin/ grpcurl Device config interface Management1 description oob_management vrf MGMT ip address 10.73.1.118/24 username arista secret 0 arista management api gnmi transport grpc def vrf MGMT DC1-L2LEAF2A#show management api gnmi Enabled: Yes Server: running on port 6030, in MGMT VRF SSL Profile: none QoS DSCP: none DC1-L2LEAF2A# Before to use gNOI ping and traceroute, lets run these commands locally: $ ssh arista@10.73.1.118 Password: Last login: Thu Jun 3 12:06:25 2021 from 10.73.1.3 DC1-L2LEAF2A>en DC1-L2LEAF2A#bash Arista Networks EOS shell [arista@DC1-L2LEAF2A ~]$ ping 172.31.255.0 -c 2 PING 172.31.255.0 (172.31.255.0) 56(84) bytes of data. 64 bytes from 172.31.255.0: icmp_seq=1 ttl=63 time=24.6 ms 64 bytes from 172.31.255.0: icmp_seq=2 ttl=63 time=18.8 ms --- 172.31.255.0 ping statistics --- 2 packets transmitted, 2 received, 0% packet loss, time 1001ms rtt min/avg/max/mdev = 18.861/21.738/24.616/2.881 ms [arista@DC1-L2LEAF2A ~]$ [arista@DC1-L2LEAF2A ~]$ traceroute -A 172.31.255.0 traceroute to 172.31.255.0 (172.31.255.0), 30 hops max, 60 byte packets 1 10.90.90.1 (10.90.90.1) [!!] 26.636 ms 29.420 ms 32.113 ms 2 172.31.255.0 (172.31.255.0) [!!] 52.764 ms 53.881 ms 63.213 ms [arista@DC1-L2LEAF2A ~]$ [arista@DC1-L2LEAF2A ~]$ exit logout DC1-L2LEAF2A#exit Connection to 10.73.1.118 closed. Use gRPCurl Describe from a proto file $ grpcurl --plaintext --import-path ${GOPATH}/src --proto github.com/openconfig/gnoi/system/system.proto describe gnoi.system.System.CancelReboot gnoi.system.System.CancelReboot is a method: // CancelReboot cancels any pending reboot request. rpc CancelReboot ( .gnoi.system.CancelRebootRequest ) returns ( .gnoi.system.CancelRebootResponse ); $ grpcurl --plaintext --import-path ${GOPATH}/src --proto github.com/openconfig/gnoi/system/system.proto describe gnoi.system.System gnoi.system.System is a service: // The gNOI service is a collection of operational RPC's that allow for the // management of a target outside of the configuration and telemetry pipeline. service System { // CancelReboot cancels any pending reboot request. rpc CancelReboot ( .gnoi.system.CancelRebootRequest ) returns ( .gnoi.system.CancelRebootResponse ); // Ping executes the ping command on the target and streams back // the results. Some targets may not stream any results until all // results are in. If a packet count is not explicitly provided, // 5 is used. rpc Ping ( .gnoi.system.PingRequest ) returns ( stream .gnoi.system.PingResponse ); // Reboot causes the target to reboot, possibly at some point in the future. // If the method of reboot is not supported then the Reboot RPC will fail. // If the reboot is immediate the command will block until the subcomponents // have restarted. // If a reboot on the active control processor is pending the service must // reject all other reboot requests. // If a reboot request for active control processor is initiated with other // pending reboot requests it must be rejected. rpc Reboot ( .gnoi.system.RebootRequest ) returns ( .gnoi.system.RebootResponse ); // RebootStatus returns the status of reboot for the target. rpc RebootStatus ( .gnoi.system.RebootStatusRequest ) returns ( .gnoi.system.RebootStatusResponse ); // SetPackage places a software package (possibly including bootable images) // on the target. The file is sent in sequential messages, each message // up to 64KB of data. A final message must be sent that includes the hash // of the data sent. An error is returned if the location does not exist or // there is an error writing the data. If no checksum is received, the target // must assume the operation is incomplete and remove the partially // transmitted file. The target should initially write the file to a temporary // location so a failure does not destroy the original file. rpc SetPackage ( stream .gnoi.system.SetPackageRequest ) returns ( .gnoi.system.SetPackageResponse ); // SwitchControlProcessor will switch from the current route processor to the // provided route processor. If the current route processor is the same as the // one provided it is a NOOP. If the target does not exist an error is // returned. rpc SwitchControlProcessor ( .gnoi.system.SwitchControlProcessorRequest ) returns ( .gnoi.system.SwitchControlProcessorResponse ); // Time returns the current time on the target. Time is typically used to // test if a target is actually responding. rpc Time ( .gnoi.system.TimeRequest ) returns ( .gnoi.system.TimeResponse ); // Traceroute executes the traceroute command on the target and streams back // the results. Some targets may not stream any results until all // results are in. If a hop count is not explicitly provided, // 30 is used. rpc Traceroute ( .gnoi.system.TracerouteRequest ) returns ( stream .gnoi.system.TracerouteResponse ); } List List from a proto file $ grpcurl --plaintext --import-path ${GOPATH}/src --proto github.com/openconfig/gnoi/system/system.proto list gnoi.system.System $ grpcurl --plaintext --import-path ${GOPATH}/src --proto github.com/openconfig/gnoi/system/system.proto list gnoi.system.System gnoi.system.System.CancelReboot gnoi.system.System.Ping gnoi.system.System.Reboot gnoi.system.System.RebootStatus gnoi.system.System.SetPackage gnoi.system.System.SwitchControlProcessor gnoi.system.System.Time gnoi.system.System.Traceroute $ grpcurl --plaintext --import-path ${GOPATH}/src --proto github.com/openconfig/gnoi/os/os.proto list gnoi.os.OS gnoi.os.OS.Activate gnoi.os.OS.Install gnoi.os.OS.Verify List from a gRPC server (EOS device) $ grpcurl --plaintext 10.73.1.105:6030 list gnmi.gNMI gnoi.certificate.CertificateManagement gnoi.system.System grpc.reflection.v1alpha.ServerReflection Execute gNOI RPC with EOS $ grpcurl -H 'username: arista' -H 'password: arista' -d '{\"destination\": \"172.31.255.0\", \"count\": 2, \"do_not_resolve\":true}' -import-path ${GOPATH}/src -proto github.com/openconfig/gnoi/system/system.proto -plaintext 10.73.1.118:6030 gnoi.system.System/Ping { \"source\": \"172.31.255.0\", \"time\": \"29800000\", \"bytes\": 64, \"sequence\": 1, \"ttl\": 63 } { \"source\": \"172.31.255.0\", \"time\": \"25200000\", \"bytes\": 64, \"sequence\": 2, \"ttl\": 63 } { \"source\": \"172.31.255.0\", \"time\": \"1001000000\", \"sent\": 2, \"received\": 2, \"minTime\": \"25210000\", \"avgTime\": \"27510000\", \"maxTime\": \"29810000\", \"stdDev\": \"2300000\" } $ grpcurl -H 'username: arista' -H 'password: arista' -d '{\"destination\": \"172.31.255.0\", \"max_ttl\": 50, \"do_not_resolve\":true}' -import-path ${GOPATH}/src -proto github.com/openconfig/gnoi/system/system.proto -plaintext 10.73.1.118:6030 gnoi.system.System/Traceroute { \"destinationName\": \"172.31.255.0\", \"destinationAddress\": \"172.31.255.0\", \"hops\": 50, \"packetSize\": 60 } { \"hop\": 1, \"address\": \"10.90.90.1\", \"rtt\": \"16589000\" } { \"hop\": 1, \"address\": \"10.90.90.1\", \"rtt\": \"17886000\" } { \"hop\": 1, \"address\": \"10.90.90.1\", \"rtt\": \"23219000\" } { \"hop\": 2, \"address\": \"172.31.255.0\", \"rtt\": \"46537000\" } { \"hop\": 2, \"address\": \"172.31.255.0\", \"rtt\": \"47873000\" } { \"hop\": 2, \"address\": \"172.31.255.0\", \"rtt\": \"55376000\" }","title":"gRPCurl"},{"location":"examples/gnoi/grpcurl/#about-grpc","text":"gRPC - Google Remote Procedure Call gRPC uses protobuf and HTTP/2","title":"About gRPC"},{"location":"examples/gnoi/grpcurl/#about-gnoi","text":"gNOI - gRPC Network Operations Interface gNOI defines a set of gRPC-based microservices for executing operational commands on network devices. gNOI github repository As example, this gNOI proto file defines the service System with the RPC Traceroute and Ping Ping executes the ping command on the target and streams back the results Traceroute executes the traceroute command on the target and streams back the results As you can see in the proto file, the field VRF is not defined for these messages","title":"About gNOI"},{"location":"examples/gnoi/grpcurl/#about-gnoi-support-on-eos","text":"Please refer to this link for the gNOI support by EOS. Examples: gnoi ping gnoi traceroute","title":"About gNOI support on EOS"},{"location":"examples/gnoi/grpcurl/#grpcurl-overview","text":"gRPCurl is a command-line tool that lets you interact with gRPC servers: github repository The following examples shows various gRPCurl commands to interact with Arista EOS devices.","title":"gRPCurl overview"},{"location":"examples/gnoi/grpcurl/#install-grpcurl","text":"","title":"Install gRPCurl"},{"location":"examples/gnoi/grpcurl/#install-go","text":"$ go version go version go1.16.4 linux/amd64 $ go env | grep 'GOROOT\\|GOPATH' $ export GOROOT=/usr/local/go $ export GOPATH=$HOME/go $ export PATH=$GOPATH/bin:$GOROOT/bin:$PATH","title":"Install GO"},{"location":"examples/gnoi/grpcurl/#get-gnoi-repository","text":"$ mkdir -p $GOPATH/src/github.com/openconfig $ git clone https://github.com/openconfig/gnoi.git $GOPATH/src/github.com/openconfig/gnoi $ ls $GOPATH/src/github.com/openconfig gnoi","title":"Get gNOI repository"},{"location":"examples/gnoi/grpcurl/#install-grpcurl_1","text":"$ go get github.com/fullstorydev/grpcurl $ ls $GOPATH/pkg/mod/github.com/fullstorydev/ grpcurl@v1.8.1 $ go install github.com/fullstorydev/grpcurl/cmd/grpcurl@latest ls $GOPATH/bin/ grpcurl","title":"Install gRPCurl"},{"location":"examples/gnoi/grpcurl/#device-config","text":"interface Management1 description oob_management vrf MGMT ip address 10.73.1.118/24 username arista secret 0 arista management api gnmi transport grpc def vrf MGMT DC1-L2LEAF2A#show management api gnmi Enabled: Yes Server: running on port 6030, in MGMT VRF SSL Profile: none QoS DSCP: none DC1-L2LEAF2A# Before to use gNOI ping and traceroute, lets run these commands locally: $ ssh arista@10.73.1.118 Password: Last login: Thu Jun 3 12:06:25 2021 from 10.73.1.3 DC1-L2LEAF2A>en DC1-L2LEAF2A#bash Arista Networks EOS shell [arista@DC1-L2LEAF2A ~]$ ping 172.31.255.0 -c 2 PING 172.31.255.0 (172.31.255.0) 56(84) bytes of data. 64 bytes from 172.31.255.0: icmp_seq=1 ttl=63 time=24.6 ms 64 bytes from 172.31.255.0: icmp_seq=2 ttl=63 time=18.8 ms --- 172.31.255.0 ping statistics --- 2 packets transmitted, 2 received, 0% packet loss, time 1001ms rtt min/avg/max/mdev = 18.861/21.738/24.616/2.881 ms [arista@DC1-L2LEAF2A ~]$ [arista@DC1-L2LEAF2A ~]$ traceroute -A 172.31.255.0 traceroute to 172.31.255.0 (172.31.255.0), 30 hops max, 60 byte packets 1 10.90.90.1 (10.90.90.1) [!!] 26.636 ms 29.420 ms 32.113 ms 2 172.31.255.0 (172.31.255.0) [!!] 52.764 ms 53.881 ms 63.213 ms [arista@DC1-L2LEAF2A ~]$ [arista@DC1-L2LEAF2A ~]$ exit logout DC1-L2LEAF2A#exit Connection to 10.73.1.118 closed.","title":"Device config"},{"location":"examples/gnoi/grpcurl/#use-grpcurl","text":"","title":"Use gRPCurl"},{"location":"examples/gnoi/grpcurl/#describe-from-a-proto-file","text":"$ grpcurl --plaintext --import-path ${GOPATH}/src --proto github.com/openconfig/gnoi/system/system.proto describe gnoi.system.System.CancelReboot gnoi.system.System.CancelReboot is a method: // CancelReboot cancels any pending reboot request. rpc CancelReboot ( .gnoi.system.CancelRebootRequest ) returns ( .gnoi.system.CancelRebootResponse ); $ grpcurl --plaintext --import-path ${GOPATH}/src --proto github.com/openconfig/gnoi/system/system.proto describe gnoi.system.System gnoi.system.System is a service: // The gNOI service is a collection of operational RPC's that allow for the // management of a target outside of the configuration and telemetry pipeline. service System { // CancelReboot cancels any pending reboot request. rpc CancelReboot ( .gnoi.system.CancelRebootRequest ) returns ( .gnoi.system.CancelRebootResponse ); // Ping executes the ping command on the target and streams back // the results. Some targets may not stream any results until all // results are in. If a packet count is not explicitly provided, // 5 is used. rpc Ping ( .gnoi.system.PingRequest ) returns ( stream .gnoi.system.PingResponse ); // Reboot causes the target to reboot, possibly at some point in the future. // If the method of reboot is not supported then the Reboot RPC will fail. // If the reboot is immediate the command will block until the subcomponents // have restarted. // If a reboot on the active control processor is pending the service must // reject all other reboot requests. // If a reboot request for active control processor is initiated with other // pending reboot requests it must be rejected. rpc Reboot ( .gnoi.system.RebootRequest ) returns ( .gnoi.system.RebootResponse ); // RebootStatus returns the status of reboot for the target. rpc RebootStatus ( .gnoi.system.RebootStatusRequest ) returns ( .gnoi.system.RebootStatusResponse ); // SetPackage places a software package (possibly including bootable images) // on the target. The file is sent in sequential messages, each message // up to 64KB of data. A final message must be sent that includes the hash // of the data sent. An error is returned if the location does not exist or // there is an error writing the data. If no checksum is received, the target // must assume the operation is incomplete and remove the partially // transmitted file. The target should initially write the file to a temporary // location so a failure does not destroy the original file. rpc SetPackage ( stream .gnoi.system.SetPackageRequest ) returns ( .gnoi.system.SetPackageResponse ); // SwitchControlProcessor will switch from the current route processor to the // provided route processor. If the current route processor is the same as the // one provided it is a NOOP. If the target does not exist an error is // returned. rpc SwitchControlProcessor ( .gnoi.system.SwitchControlProcessorRequest ) returns ( .gnoi.system.SwitchControlProcessorResponse ); // Time returns the current time on the target. Time is typically used to // test if a target is actually responding. rpc Time ( .gnoi.system.TimeRequest ) returns ( .gnoi.system.TimeResponse ); // Traceroute executes the traceroute command on the target and streams back // the results. Some targets may not stream any results until all // results are in. If a hop count is not explicitly provided, // 30 is used. rpc Traceroute ( .gnoi.system.TracerouteRequest ) returns ( stream .gnoi.system.TracerouteResponse ); }","title":"Describe from a proto file"},{"location":"examples/gnoi/grpcurl/#list","text":"","title":"List"},{"location":"examples/gnoi/grpcurl/#list-from-a-proto-file","text":"$ grpcurl --plaintext --import-path ${GOPATH}/src --proto github.com/openconfig/gnoi/system/system.proto list gnoi.system.System $ grpcurl --plaintext --import-path ${GOPATH}/src --proto github.com/openconfig/gnoi/system/system.proto list gnoi.system.System gnoi.system.System.CancelReboot gnoi.system.System.Ping gnoi.system.System.Reboot gnoi.system.System.RebootStatus gnoi.system.System.SetPackage gnoi.system.System.SwitchControlProcessor gnoi.system.System.Time gnoi.system.System.Traceroute $ grpcurl --plaintext --import-path ${GOPATH}/src --proto github.com/openconfig/gnoi/os/os.proto list gnoi.os.OS gnoi.os.OS.Activate gnoi.os.OS.Install gnoi.os.OS.Verify","title":"List from a proto file"},{"location":"examples/gnoi/grpcurl/#list-from-a-grpc-server-eos-device","text":"$ grpcurl --plaintext 10.73.1.105:6030 list gnmi.gNMI gnoi.certificate.CertificateManagement gnoi.system.System grpc.reflection.v1alpha.ServerReflection","title":"List from a gRPC server (EOS device)"},{"location":"examples/gnoi/grpcurl/#execute-gnoi-rpc-with-eos","text":"$ grpcurl -H 'username: arista' -H 'password: arista' -d '{\"destination\": \"172.31.255.0\", \"count\": 2, \"do_not_resolve\":true}' -import-path ${GOPATH}/src -proto github.com/openconfig/gnoi/system/system.proto -plaintext 10.73.1.118:6030 gnoi.system.System/Ping { \"source\": \"172.31.255.0\", \"time\": \"29800000\", \"bytes\": 64, \"sequence\": 1, \"ttl\": 63 } { \"source\": \"172.31.255.0\", \"time\": \"25200000\", \"bytes\": 64, \"sequence\": 2, \"ttl\": 63 } { \"source\": \"172.31.255.0\", \"time\": \"1001000000\", \"sent\": 2, \"received\": 2, \"minTime\": \"25210000\", \"avgTime\": \"27510000\", \"maxTime\": \"29810000\", \"stdDev\": \"2300000\" } $ grpcurl -H 'username: arista' -H 'password: arista' -d '{\"destination\": \"172.31.255.0\", \"max_ttl\": 50, \"do_not_resolve\":true}' -import-path ${GOPATH}/src -proto github.com/openconfig/gnoi/system/system.proto -plaintext 10.73.1.118:6030 gnoi.system.System/Traceroute { \"destinationName\": \"172.31.255.0\", \"destinationAddress\": \"172.31.255.0\", \"hops\": 50, \"packetSize\": 60 } { \"hop\": 1, \"address\": \"10.90.90.1\", \"rtt\": \"16589000\" } { \"hop\": 1, \"address\": \"10.90.90.1\", \"rtt\": \"17886000\" } { \"hop\": 1, \"address\": \"10.90.90.1\", \"rtt\": \"23219000\" } { \"hop\": 2, \"address\": \"172.31.255.0\", \"rtt\": \"46537000\" } { \"hop\": 2, \"address\": \"172.31.255.0\", \"rtt\": \"47873000\" } { \"hop\": 2, \"address\": \"172.31.255.0\", \"rtt\": \"55376000\" }","title":"Execute gNOI RPC with EOS"},{"location":"examples/golang/","text":"Overview The following example uses the goarista go module for gNMI to interact with a device. Within this very simplistic getting started example main.go will simply perform a get method to the device for all paths. package main import ( \"context\" \"fmt\" \"github.com/aristanetworks/glog\" \"github.com/aristanetworks/goarista/gnmi\" pb \"github.com/openconfig/gnmi/proto/gnmi\" ) var cfg = &gnmi.Config{ Addr: \"10.20.30.67:6030\", Username: \"ansible\", Password: \"ansible\", } func main() { paths := []string{\"/\"} var origin = \"openconfig\" //var origin = \"eos_native\" ctx := gnmi.NewContext(context.Background(), cfg) client, err := gnmi.Dial(cfg) if err != nil { glog.Fatal(err) } req, err := gnmi.NewGetRequest(gnmi.SplitPaths(paths), origin) if err != nil { glog.Fatal(err) } if cfg.Addr != \"\" { if req.Prefix == nil { req.Prefix = &pb.Path{} } req.Prefix.Target = cfg.Addr } err = gnmi.GetWithRequest(ctx, client, req) if err != nil { glog.Fatal(err) } fmt.Println(err) } Copy the above code into a file and run via the following command. go run main.go Truncated output { \"openconfig-acl:acl\": { \"state\": { \"counter-capability\": \"AGGREGATE_ONLY\" } }, \"arista-exp-eos:arista\": { \"eos\": { \"arista-exp-eos-igmpsnooping:bridging\": { \"igmpsnooping\": { \"config\": {} } }, \"arista-exp-eos-mlag:mlag\": { \"config\": { \"dual-primary-action\": \"action-none\",","title":"Go Lang"},{"location":"examples/golang/#overview","text":"The following example uses the goarista go module for gNMI to interact with a device. Within this very simplistic getting started example main.go will simply perform a get method to the device for all paths. package main import ( \"context\" \"fmt\" \"github.com/aristanetworks/glog\" \"github.com/aristanetworks/goarista/gnmi\" pb \"github.com/openconfig/gnmi/proto/gnmi\" ) var cfg = &gnmi.Config{ Addr: \"10.20.30.67:6030\", Username: \"ansible\", Password: \"ansible\", } func main() { paths := []string{\"/\"} var origin = \"openconfig\" //var origin = \"eos_native\" ctx := gnmi.NewContext(context.Background(), cfg) client, err := gnmi.Dial(cfg) if err != nil { glog.Fatal(err) } req, err := gnmi.NewGetRequest(gnmi.SplitPaths(paths), origin) if err != nil { glog.Fatal(err) } if cfg.Addr != \"\" { if req.Prefix == nil { req.Prefix = &pb.Path{} } req.Prefix.Target = cfg.Addr } err = gnmi.GetWithRequest(ctx, client, req) if err != nil { glog.Fatal(err) } fmt.Println(err) } Copy the above code into a file and run via the following command. go run main.go","title":"Overview"},{"location":"examples/golang/#truncated-output","text":"{ \"openconfig-acl:acl\": { \"state\": { \"counter-capability\": \"AGGREGATE_ONLY\" } }, \"arista-exp-eos:arista\": { \"eos\": { \"arista-exp-eos-igmpsnooping:bridging\": { \"igmpsnooping\": { \"config\": {} } }, \"arista-exp-eos-mlag:mlag\": { \"config\": { \"dual-primary-action\": \"action-none\",","title":"Truncated output"},{"location":"examples/python/","text":"Overview The following example uses the pygnmi python module to talk to gNMI devices. # Modules from pygnmi.client import gNMIclient import json # Variables host = ('10.20.30.67', '6030') # Body if __name__ == '__main__': with gNMIclient(target=host, username='ansible', password='ansible', insecure=True) as gc: result = gc.get(path=['openconfig:interfaces']) print(json.dumps(result, indent=4)) Assuming that the pygnmi module has been installed, this can be executed via the following command. python3 pygnmi.py The following will simply run the pygnmi.py file using python3 to get the openconfig interfaces. Truncated output { \"notification\": [ { \"timestamp\": 0, \"update\": [ { \"path\": \"interfaces\", \"json_ietf_val\": { \"openconfig-interfaces:interface\": [ { \"config\": { \"enabled\": true, \"arista-intf-augments:load-interval\": 300, \"loopback-mode\": false, \"mtu\": 0, \"name\": \"Ethernet1\", \"openconfig-vlan:tpid\": \"openconfig-vlan-types:TPID_0X8100\", \"type\": \"iana-if-type:ethernetCsmacd\" },","title":"Python"},{"location":"examples/python/#overview","text":"The following example uses the pygnmi python module to talk to gNMI devices. # Modules from pygnmi.client import gNMIclient import json # Variables host = ('10.20.30.67', '6030') # Body if __name__ == '__main__': with gNMIclient(target=host, username='ansible', password='ansible', insecure=True) as gc: result = gc.get(path=['openconfig:interfaces']) print(json.dumps(result, indent=4)) Assuming that the pygnmi module has been installed, this can be executed via the following command. python3 pygnmi.py The following will simply run the pygnmi.py file using python3 to get the openconfig interfaces.","title":"Overview"},{"location":"examples/python/#truncated-output","text":"{ \"notification\": [ { \"timestamp\": 0, \"update\": [ { \"path\": \"interfaces\", \"json_ietf_val\": { \"openconfig-interfaces:interface\": [ { \"config\": { \"enabled\": true, \"arista-intf-augments:load-interval\": 300, \"loopback-mode\": false, \"mtu\": 0, \"name\": \"Ethernet1\", \"openconfig-vlan:tpid\": \"openconfig-vlan-types:TPID_0X8100\", \"type\": \"iana-if-type:ethernetCsmacd\" },","title":"Truncated output"},{"location":"examples/ygot/","text":"Overview ygot is a collection of Go utilities that can generate Go structures based off of yang modules. In the demo we are going to generate go code based off of the openconfig-system model using ygot. The demo will do the following. Leverage necessary yang files for openconfig-system to create a hostname. The hostname will be printed out and stored within the system.json file. Using the Arista gNMI binary we will configure a device to use the ceos1 hostname. Clone this repo git clone https://github.com/aristanetworks/openmgmt && cd openmgmt/src/ygot Install ygot on your system go get github.com/openconfig/ygot Check to see if all of the current yang files are accurate tree -f yang/ Reveal output \u251c\u2500\u2500 yang/openconfig-aaa-radius.yang \u251c\u2500\u2500 yang/openconfig-aaa-tacacs.yang \u251c\u2500\u2500 yang/openconfig-aaa-types.yang \u251c\u2500\u2500 yang/openconfig-aaa.yang \u251c\u2500\u2500 yang/openconfig-alarms.yang \u251c\u2500\u2500 yang/openconfig-alarm-types.yang \u251c\u2500\u2500 yang/openconfig-extensions.yang \u251c\u2500\u2500 yang/openconfig-inet-types.yang \u251c\u2500\u2500 yang/openconfig-license.yang \u251c\u2500\u2500 yang/openconfig-messages.yang \u251c\u2500\u2500 yang/openconfig-platform-types.yang \u251c\u2500\u2500 yang/openconfig-platform.yang \u251c\u2500\u2500 yang/openconfig-procmon.yang \u251c\u2500\u2500 yang/openconfig-system-logging.yang \u251c\u2500\u2500 yang/openconfig-system-management.yang \u251c\u2500\u2500 yang/openconfig-system-terminal.yang \u251c\u2500\u2500 yang/openconfig-system.yang \u251c\u2500\u2500 yang/openconfig-types.yang \u2514\u2500\u2500 yang/openconfig-yang-types.yang Run ygot go run $GOPATH/src/github.com/openconfig/ygot/generator/generator.go -path=yang -output_file=pkg/oc.go -package_name=oc -generate_fakeroot -fakeroot_name=device -compress_paths=true yang/openconfig-system.yang Check the contents of pkg/oc.go pkg \u2514\u2500\u2500 oc.go oc.go is the necessary go import / package for openconfig-system. Looking at the Device struct within pkg/oc.go type Device struct { Component map[string]*Component `path:\"components/component\" module:\"openconfig-platform\"` Messages *Messages `path:\"messages\" module:\"openconfig-messages\"` System *System `path:\"system\" module:\"openconfig-system\"` } Then looking at the System struct we can see the Hostname field. type System struct { Hostname *string `path:\"config/hostname\" module:\"openconfig-system\"` } We need to simply fill in the Hostname field and pass it through the EmitJSON function so we can render this model with the correct information which can be sounf in main.go. Run the go code. go run main.go Reveal output This is the output { \"openconfig-system:system\": { \"config\": { \"hostname\": \"ceos1\" } } } Adding to config/hostname.json The output is also within config/hostname.json which looks the same as the printed version. Change the hostname on a device gnmi -addr deviceip:6030 -username admin -password admin update '/' config/hostname.json The device should now have the \"ceos1\" hostname.","title":"ygot"},{"location":"examples/ygot/#overview","text":"ygot is a collection of Go utilities that can generate Go structures based off of yang modules. In the demo we are going to generate go code based off of the openconfig-system model using ygot.","title":"Overview"},{"location":"examples/ygot/#the-demo-will-do-the-following","text":"Leverage necessary yang files for openconfig-system to create a hostname. The hostname will be printed out and stored within the system.json file. Using the Arista gNMI binary we will configure a device to use the ceos1 hostname.","title":"The demo will do the following."},{"location":"examples/ygot/#clone-this-repo","text":"git clone https://github.com/aristanetworks/openmgmt && cd openmgmt/src/ygot","title":"Clone this repo"},{"location":"examples/ygot/#install-ygot-on-your-system","text":"go get github.com/openconfig/ygot","title":"Install ygot on your system"},{"location":"examples/ygot/#check-to-see-if-all-of-the-current-yang-files-are-accurate","text":"tree -f yang/ Reveal output \u251c\u2500\u2500 yang/openconfig-aaa-radius.yang \u251c\u2500\u2500 yang/openconfig-aaa-tacacs.yang \u251c\u2500\u2500 yang/openconfig-aaa-types.yang \u251c\u2500\u2500 yang/openconfig-aaa.yang \u251c\u2500\u2500 yang/openconfig-alarms.yang \u251c\u2500\u2500 yang/openconfig-alarm-types.yang \u251c\u2500\u2500 yang/openconfig-extensions.yang \u251c\u2500\u2500 yang/openconfig-inet-types.yang \u251c\u2500\u2500 yang/openconfig-license.yang \u251c\u2500\u2500 yang/openconfig-messages.yang \u251c\u2500\u2500 yang/openconfig-platform-types.yang \u251c\u2500\u2500 yang/openconfig-platform.yang \u251c\u2500\u2500 yang/openconfig-procmon.yang \u251c\u2500\u2500 yang/openconfig-system-logging.yang \u251c\u2500\u2500 yang/openconfig-system-management.yang \u251c\u2500\u2500 yang/openconfig-system-terminal.yang \u251c\u2500\u2500 yang/openconfig-system.yang \u251c\u2500\u2500 yang/openconfig-types.yang \u2514\u2500\u2500 yang/openconfig-yang-types.yang","title":"Check to see if all of the current yang files are accurate"},{"location":"examples/ygot/#run-ygot","text":"go run $GOPATH/src/github.com/openconfig/ygot/generator/generator.go -path=yang -output_file=pkg/oc.go -package_name=oc -generate_fakeroot -fakeroot_name=device -compress_paths=true yang/openconfig-system.yang","title":"Run ygot"},{"location":"examples/ygot/#check-the-contents-of-pkgocgo","text":"pkg \u2514\u2500\u2500 oc.go oc.go is the necessary go import / package for openconfig-system. Looking at the Device struct within pkg/oc.go type Device struct { Component map[string]*Component `path:\"components/component\" module:\"openconfig-platform\"` Messages *Messages `path:\"messages\" module:\"openconfig-messages\"` System *System `path:\"system\" module:\"openconfig-system\"` } Then looking at the System struct we can see the Hostname field. type System struct { Hostname *string `path:\"config/hostname\" module:\"openconfig-system\"` } We need to simply fill in the Hostname field and pass it through the EmitJSON function so we can render this model with the correct information which can be sounf in main.go.","title":"Check the contents of pkg/oc.go"},{"location":"examples/ygot/#run-the-go-code","text":"go run main.go Reveal output This is the output { \"openconfig-system:system\": { \"config\": { \"hostname\": \"ceos1\" } } } Adding to config/hostname.json The output is also within config/hostname.json which looks the same as the printed version.","title":"Run the go code."},{"location":"examples/ygot/#change-the-hostname-on-a-device","text":"gnmi -addr deviceip:6030 -username admin -password admin update '/' config/hostname.json The device should now have the \"ceos1\" hostname.","title":"Change the hostname on a device"},{"location":"models/","text":"overview What are device models and why should I care? OpenConfig models IETF models vendor-specific models References / Resources YANG RFC: https://tools.ietf.org/html/rfc6020 Repository of OpenConfig YANG models: https://github.com/openconfig/public Arista Networks YANG Repository: https://github.com/aristanetworks/yang","title":"Device Models"},{"location":"models/#overview","text":"What are device models and why should I care?","title":"overview"},{"location":"models/#openconfig-models","text":"","title":"OpenConfig models"},{"location":"models/#ietf-models","text":"","title":"IETF models"},{"location":"models/#vendor-specific-models","text":"","title":"vendor-specific models"},{"location":"models/#references-resources","text":"YANG RFC: https://tools.ietf.org/html/rfc6020 Repository of OpenConfig YANG models: https://github.com/openconfig/public Arista Networks YANG Repository: https://github.com/aristanetworks/yang","title":"References / Resources"},{"location":"protocols/","text":"Overview ssh (CLI) eAPI gRPC gRPC is a Remote Procedure Call (RPC) framework that OpenConfig utilizes as a transport. Services built with gRPC are defined in .proto files. They describe the RPCs supported by the service and the data types exchanged in those RPCs. The OpenConfig group originally published openconfig.proto , but have since deprecated it in favor of gnmi.proto . The current EOS versions supports gnmi.proto v0.7 and includes support for Get, Subscribe, Set, and Capabilities RPCs. Note: Support for openconfig.proto was dropped in EOS-4.23.0F+. A client application is required to communicate with a gRPC service. A sample application can be found on the Arista GitHub account: gnmi . gnmi is a simple command-line client for gNMI written in Go that can be used for testing and prototyping. Another popular gnmi client is gnmic . NETCONF NETCONF provides mechanisms to install, manipulate and delete the configuration of network devices. It uses eXtensible Markup Language (XML) based data encoding for the configuration data as well as protocol messages. The NETCONF protocol operations are realized as RPCs over ssh transport. RESTCONF References / Resources NETCONF RFC: https://tools.ietf.org/html/rfc6241 RESTCONF RFC: https://tools.ietf.org/html/rfc8040","title":"Management Protocols"},{"location":"protocols/#overview","text":"","title":"Overview"},{"location":"protocols/#ssh-cli","text":"","title":"ssh (CLI)"},{"location":"protocols/#eapi","text":"","title":"eAPI"},{"location":"protocols/#grpc","text":"gRPC is a Remote Procedure Call (RPC) framework that OpenConfig utilizes as a transport. Services built with gRPC are defined in .proto files. They describe the RPCs supported by the service and the data types exchanged in those RPCs. The OpenConfig group originally published openconfig.proto , but have since deprecated it in favor of gnmi.proto . The current EOS versions supports gnmi.proto v0.7 and includes support for Get, Subscribe, Set, and Capabilities RPCs. Note: Support for openconfig.proto was dropped in EOS-4.23.0F+. A client application is required to communicate with a gRPC service. A sample application can be found on the Arista GitHub account: gnmi . gnmi is a simple command-line client for gNMI written in Go that can be used for testing and prototyping. Another popular gnmi client is gnmic .","title":"gRPC"},{"location":"protocols/#netconf","text":"NETCONF provides mechanisms to install, manipulate and delete the configuration of network devices. It uses eXtensible Markup Language (XML) based data encoding for the configuration data as well as protocol messages. The NETCONF protocol operations are realized as RPCs over ssh transport.","title":"NETCONF"},{"location":"protocols/#restconf","text":"","title":"RESTCONF"},{"location":"protocols/#references-resources","text":"NETCONF RFC: https://tools.ietf.org/html/rfc6241 RESTCONF RFC: https://tools.ietf.org/html/rfc8040","title":"References / Resources"},{"location":"telemetry/","text":"overview gNMI EOS native streaming (TerminAttr) OpenConfig OpenConfig + TerminAttr (Octa) RPCs subscription types ONCE STREAM POLL References / Resources","title":"Device Telemetry"},{"location":"telemetry/#overview","text":"","title":"overview"},{"location":"telemetry/#gnmi","text":"","title":"gNMI"},{"location":"telemetry/#eos-native-streaming-terminattr","text":"","title":"EOS native streaming (TerminAttr)"},{"location":"telemetry/#openconfig","text":"","title":"OpenConfig"},{"location":"telemetry/#openconfig-terminattr-octa","text":"","title":"OpenConfig + TerminAttr (Octa)"},{"location":"telemetry/#rpcs","text":"","title":"RPCs"},{"location":"telemetry/#subscription-types","text":"","title":"subscription types"},{"location":"telemetry/#once","text":"","title":"ONCE"},{"location":"telemetry/#stream","text":"","title":"STREAM"},{"location":"telemetry/#poll","text":"","title":"POLL"},{"location":"telemetry/#references-resources","text":"","title":"References / Resources"}]}